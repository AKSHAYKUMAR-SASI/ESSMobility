using Newtonsoft.Json.Linq;
using Syncfusion.Pdf;
using Syncfusion.Pdf.Graphics;
using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Web.Script.Serialization;
using System.Web.Script.Services;
using System.Web.Services;

namespace ESSMobility
{
    /// <summary>
    /// Summary description for ESSMobility
    /// </summary>
    [WebService(Namespace = "http://tempuri.org/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]
    // To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
    // [System.Web.Script.Services.ScriptService]
    public class ESSMobility : System.Web.Services.WebService
    {

        JavaScriptSerializer js = new JavaScriptSerializer();

        DataTable dt, dt1 = new DataTable();



        localhost.ESSDBAccess lb = new localhost.ESSDBAccess();

        public void DownloadFile(string fn, byte[] s) // function to download file from db to server
        {
            System.Web.HttpResponse Response = System.Web.HttpContext.Current.Response;
            using (Stream file = File.OpenWrite(Server.MapPath("~/Images/" + fn)))
            {
                file.Write(s, 0, s.Length);
            }

        }

        private byte[] convertTiffToPdf(byte[] tiffImageByteArray)
        {
            PdfDocument doc = new PdfDocument();
            byte[] docBytes;
            //doc.PageSettings.Margins.All = 0;



            //Get the image stream and draw frame by frame
            using (var tiffMemoryStream = new MemoryStream(tiffImageByteArray))
            using (var tiffImage = new PdfBitmap(System.Drawing.Image.FromStream(tiffMemoryStream)))
            {
                int frameCount = tiffImage.FrameCount;
                for (int i = 0; i < frameCount; i++)
                {
                    //Add pages to the document
                    var page = doc.Pages.Add();
                    //Getting page size to fit the image within the page
                    SizeF pageSize = page.GetClientSize();
                    //Selecting frame in TIFF
                    tiffImage.ActiveFrame = i;
                    //Draw TIFF frame
                    page.Graphics.DrawImage(tiffImage, 0, 0, pageSize.Width, pageSize.Height);
                }



                //Creates a new Memory stream
                MemoryStream stream = new MemoryStream();
                // Saves the document as stream
                doc.Save(stream);
                doc.Close(true);
                // Converts the PdfDocument object to byte form.
                docBytes = stream.ToArray();
                var docMemoryStream = new MemoryStream(docBytes);



            }



            return docBytes;
        }



        public string justfunc(Byte[] tiffBytes)
        {
            //  Byte[] tiffBytes;
            Byte[] jpegBytes;
            string newholdjpg;

            using (MemoryStream inStream = new MemoryStream(tiffBytes))
            using (MemoryStream outStream = new MemoryStream())
            {
                System.Drawing.Bitmap.FromStream(inStream).Save(outStream, System.Drawing.Imaging.ImageFormat.Jpeg);
                jpegBytes = outStream.ToArray();
                newholdjpg = Convert.ToBase64String(jpegBytes);
            }
            return newholdjpg;
        }



        public Byte[] justfuncJpegBytes(Byte[] tiffBytes)
        {
            //  Byte[] tiffBytes;
            Byte[] jpegBytes;
            string newholdjpg;

            using (MemoryStream inStream = new MemoryStream(tiffBytes))
            using (MemoryStream outStream = new MemoryStream())
            {
                System.Drawing.Bitmap.FromStream(inStream).Save(outStream, System.Drawing.Imaging.ImageFormat.Jpeg);
                jpegBytes = outStream.ToArray();
                //  newholdjpg = Convert.ToBase64String(jpegBytes);
            }
            return jpegBytes;
        }


        public Byte[] justfuncPDFBytes(Byte[] tiffBytes)
        {
            //  Byte[] tiffBytes;
            Byte[] jpegBytes;
            string newholdjpg;

            using (MemoryStream inStream = new MemoryStream(tiffBytes))
            using (MemoryStream outStream = new MemoryStream())
            {
                System.Drawing.Bitmap.FromStream(inStream).Save(outStream, System.Drawing.Imaging.ImageFormat.Jpeg);
                jpegBytes = outStream.ToArray();
                //  newholdjpg = Convert.ToBase64String(jpegBytes);
            }
            return jpegBytes;
        }
        public class ResultModel
        {
            public string status { get; set; }
            public string result { get; set; }
            //public string customer_photo { get; set; }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void macCheck(string macId)
        {
            DataSet dS = new DataSet();
            DataTable dt = new DataTable();
            ResultModel ResultData = new ResultModel();

            try
            {
                dS = lb.callToProcMobAppESS(7, macId.ToString());
                dt = dS.Tables[0];

                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        ResultData.status = "111";
                        ResultData.result = "Device can access ESS App";
                    }
                }
                else
                {
                    ResultData.status = "110";
                    ResultData.result = "Device can't access ESS App";
                }
            }
            catch (Exception e)
            {
                throw e;
            }

            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            Context.Response.Write(js.Serialize(ResultData));
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void macCheckImei(string macId, string imei)
        {
            DataSet dS = new DataSet();
            DataTable dt = new DataTable();
            ResultModel ResultData = new ResultModel();

            try
            {
                dS = lb.callToProcMobAppESS(9, macId.ToString() + "~" + imei.ToString());
                dt = dS.Tables[0];

                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        ResultData.status = "111";
                        ResultData.result = "Device can access ESS App";
                    }
                }
                else
                {
                    ResultData.status = "110";
                    ResultData.result = "Device can't access ESS App";
                }
            }
            catch (Exception e)
            {
                throw e;
            }

            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            Context.Response.Write(js.Serialize(ResultData));
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void macCheckVersion10(string macId, string imei) // check only macis for versions greater than Android 9 Dilsha 04-01-2020
        {
            DataSet dS = new DataSet();
            DataTable dt = new DataTable();
            ResultModel ResultData = new ResultModel();



            try
            {
                dS = lb.callToProcMobAppESS(16, macId.ToString() + "~" + imei.ToString());
                dt = dS.Tables[0];



                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        ResultData.status = "111";
                        ResultData.result = "Device can access ESS App";
                    }
                }
                else
                {
                    ResultData.status = "110";
                    ResultData.result = "Device can't access ESS App";
                }
            }
            catch (Exception e)
            {
                throw e;
            }
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            Context.Response.Write(js.Serialize(ResultData));
        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void macCheckOnlyWithImei(string imei)
        {
            DataSet dS = new DataSet();
            DataTable dt = new DataTable();
            ResultModel ResultData = new ResultModel();

            try
            {
                dS = lb.callToProcMobAppESS(12, imei);
                dt = dS.Tables[0];

                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        ResultData.status = "111";
                        ResultData.result = "Device can access ESS App";
                    }
                }
                else
                {
                    ResultData.status = "110";
                    ResultData.result = "Device can't access ESS App";
                }
            }
            catch (Exception e)
            {
                throw e;
            }

            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            Context.Response.Write(js.Serialize(ResultData));
        }

        public string Decrypt(string cipherText)
        {
            string password = "LD@8RG#3SEZ";
            byte[] cipherBytes = Convert.FromBase64String(cipherText);
            using (Aes encryptor = Aes.Create())
            {
                // extract salt (first 16 bytes)
                var salt = cipherBytes.Take(16).ToArray();
                // extract iv (next 16 bytes)
                var iv = cipherBytes.Skip(16).Take(16).ToArray();
                // the rest is encrypted data
                var encrypted = cipherBytes.Skip(32).ToArray();
                Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(password, salt, 100);
                encryptor.Key = pdb.GetBytes(32);
                encryptor.Padding = PaddingMode.PKCS7;
                encryptor.Mode = CipherMode.CBC;
                encryptor.IV = iv;
                // you need to decrypt this way, not the way in your question
                using (MemoryStream ms = new MemoryStream(encrypted))
                {
                    using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Read))
                    {
                        using (var reader = new StreamReader(cs, Encoding.UTF8))
                        {
                            return reader.ReadToEnd();
                        }
                    }
                }
            }
        }



        [WebMethod]
        public string isSessionValidess(string sessionId)
        {
            DataSet dS = new DataSet();
            DataTable dt = new DataTable();
            ResultModel ResultData = new ResultModel();
            String result = "";

            try
            {
                dS = lb.callToProcMobAppESS(4, sessionId);
                dt = dS.Tables[0];

                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        result = dr["status"].ToString();
                    }
                }
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        [WebMethod]
        public void checkLoginCredentials(string sessionId, int empCode, string password) // Check the password or status have been changed
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            if (isSessionValid(sessionId) == "1")
            {
                string test;
                test = lb.checkLoginCredentials(empCode, password);

                string[] resultArray = test.Split('-');

                if (resultArray[1] == "1")
                {
                    Context.Response.Write(js.Serialize("111"));
                }
                else
                {
                    Context.Response.Write(js.Serialize("110"));
                }
            }
            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }

        }

        private string isSessionValid(string sessionId)
        {
            DataSet dS = new DataSet();
            DataTable dt = new DataTable();
            ResultModel ResultData = new ResultModel();
            String result = "";

            try
            {
                dS = lb.callToProcMobAppESS(4, sessionId);
                dt = dS.Tables[0];

                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        result = dr["status"].ToString();
                    }
                }
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }


        public string Decryptrel(string cipherText) // Webservice
        {
            var keybytes = Encoding.UTF8.GetBytes("8080808080808080");
            var iv = Encoding.UTF8.GetBytes("8080808080808080");



            var encrypted = Convert.FromBase64String(cipherText);
            var decriptedFromJavascript = DecryptStringFromBytes1(encrypted, keybytes, iv);
            return string.Format(decriptedFromJavascript);
        }

        private static string DecryptStringFromBytes1(byte[] cipherText, byte[] key, byte[] iv)
        {
            // Check arguments.
            if (cipherText == null || cipherText.Length <= 0)
            {
                throw new ArgumentNullException("cipherText");
            }
            if (key == null || key.Length <= 0)
            {
                throw new ArgumentNullException("key");
            }
            if (iv == null || iv.Length <= 0)
            {
                throw new ArgumentNullException("key");
            }



            // Declare the string used to hold
            // the decrypted text.
            string plaintext = null;



            // Create an RijndaelManaged object
            // with the specified key and IV.
            using (var rijAlg = new RijndaelManaged())
            {
                //Settings
                rijAlg.Mode = CipherMode.CBC;
                rijAlg.Padding = PaddingMode.PKCS7;
                rijAlg.FeedbackSize = 128;



                rijAlg.Key = key;
                rijAlg.IV = iv;



                // Create a decrytor to perform the stream transform.
                var decryptor = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV);
                try
                {
                    // Create the streams used for decryption.
                    using (var msDecrypt = new MemoryStream(cipherText))
                    {
                        using (var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                        {
                            using (var srDecrypt = new StreamReader(csDecrypt))
                            {
                                // Read the decrypted bytes from the decrypting stream
                                // and place them in a string.
                                plaintext = srDecrypt.ReadToEnd();
                            }
                        }
                    }
                }
                catch
                {
                    plaintext = "keyError";
                }
            }
            return plaintext;
        }



        public class state_lists
        {
            public string state_id { get; set; }
            public string state_name { get; set; }
            public string region_id { get; set; }
            public string status { get; set; }
            public string result { get; set; }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_state_list_ngl(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string branch_id = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                state_lists data = new state_lists();
                //List<state_lists> get_state_data = new List<state_lists>();

                try
                {
                    dt = lb.proc_mobapp_ngl(15, branch_id);

                    if (dt.Rows.Count > 0)
                    {
                        data.state_id = dt.Rows[0][0].ToString();
                        data.state_name = dt.Rows[0][1].ToString();
                        data.region_id = dt.Rows[0][2].ToString();



                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        public class state_data
        {
            public string STATE_ID { get; set; }
            public string STATE_NAME { get; set; }

        }



        public class state_dataDetails
        {
            public List<state_data> getstateDetails { get; set; }
            public string status { get; set; }
            public string result { get; set; }



        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void StateDetails(string sessionId)
        {
            js.MaxJsonLength = Int32.MaxValue;
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";



            DataTable dt = new DataTable();



            state_dataDetails details = new state_dataDetails();
            List<state_data> get_CarLogDetails = new List<state_data>();



            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_mobapp_sales(212, sessionId);



                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_CarLogDetails.Add(new state_data()
                            {
                                STATE_ID = dr["STATE_ID"].ToString(),
                                STATE_NAME = dr["STATE_NAME"].ToString(),

                            });
                        }



                        details.getstateDetails = get_CarLogDetails;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }



            Context.Response.Write(js.Serialize(details));



        }

        public class Districtdata
        {
            public string DISTRICT_ID { get; set; }
            public string DISTRICT_NAME { get; set; }

        }



        public class Districtdatadetails
        {
            public List<Districtdata> getdistDetails { get; set; }
            public string status { get; set; }
            public string result { get; set; }



        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void DistrictDetails(string sessionId, string state_id)
        {
            js.MaxJsonLength = Int32.MaxValue;
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";



            DataTable dt = new DataTable();



            Districtdatadetails details = new Districtdatadetails();
            List<Districtdata> get_CarLogDetails = new List<Districtdata>();



            if (isSessionValid(sessionId) == "1")
            {
                try
                {


                    dt = lb.proc_mobapp_sales(213, state_id);



                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_CarLogDetails.Add(new Districtdata()
                            {
                                DISTRICT_ID = dr["DISTRICT_ID"].ToString(),
                                DISTRICT_NAME = dr["DISTRICT_NAME"].ToString(),

                            });
                        }



                        details.getdistDetails = get_CarLogDetails;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }



            Context.Response.Write(js.Serialize(details));



        }


        // ------116649-Zonal Heads Punching Schedule And Punching Schedule Cancel Option In Ess App---------Start------girish------///


        public class get_zh_list
        {

            public List<zh_list> get_zh_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class zh_list
        {
            public string fzm_id { get; set; }
            public string fzm_dtls { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_ZH_schedule(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_zh_list data = new get_zh_list();
                List<zh_list> get_zh_data = new List<zh_list>();

                try
                {
                    dt = lb.callToProcDoorCallCenter("", "VIEWZH", "", "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_zh_data.Add(new zh_list()
                            {
                                fzm_id = dr[0].ToString(),
                                fzm_dtls = dr[1].ToString(),

                            });
                        }

                        data.get_zh_data = get_zh_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class get_zh_br_list
        {

            public List<zh_br_list> get_zh_br_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class zh_br_list
        {
            public string Branch_id { get; set; }
            public string Branch_dtls { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_ZH_BrList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string fzm_id = data1.Split('~')[1].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_zh_br_list data = new get_zh_br_list();
                List<zh_br_list> get_zh_br_data = new List<zh_br_list>();

                try
                {
                    dt = lb.callToProcDoorCallCenter("", "VIEWBRANCH", fzm_id, "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_zh_br_data.Add(new zh_br_list()
                            {
                                Branch_id = dr[0].ToString(),
                                Branch_dtls = dr[1].ToString(),

                            });
                        }

                        data.get_zh_br_data = get_zh_br_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Confirm_schedule_zh(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();
            string assgn_brnch = data1.Split('~')[2].ToString();
            string from_dt = data1.Split('~')[3].ToString();
            string to_dt = data1.Split('~')[4].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                string inputString = emp_code + '~' + assgn_brnch + '~' + from_dt + '~' + to_dt;

                try
                {
                    dt = lb.callToProcDoorCallCenter("", "savedata", "", inputString);

                    if (dt.Rows[0][0].ToString() == "SUCCESSFULLY SCHEDULED")
                    {


                        resultModel.status = "111";
                        resultModel.result = "SUCCESSFULLY SCHEDULED";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Already Scheduled";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }
        public class get_zh_cancel_list
        {

            public List<zh_cancel_list> get_zh_cancel_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class zh_cancel_list
        {

            public string zm_dtls { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_ZH_Cancel_schedule(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_zh_cancel_list data = new get_zh_cancel_list();
                List<zh_cancel_list> get_zh_cancel_data = new List<zh_cancel_list>();

                try
                {
                    dt = lb.callToProcDoorCallCenter("", "VIEW_sch_ZH", "", "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_zh_cancel_data.Add(new zh_cancel_list()
                            {
                                zm_dtls = dr[0].ToString(),


                            });
                        }

                        data.get_zh_cancel_data = get_zh_cancel_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class get_zh_cancel_dtls
        {
            public string ASSGN_BRNCH { get; set; }
            public string FROM_DT { get; set; }
            public string TO_DT { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }




        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_cancel_dtls(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string EMP_CODE = data1.Split('~')[2].ToString();
            string from_dt = data1.Split('~')[4].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_zh_cancel_dtls data = new get_zh_cancel_dtls();

                string inputString = "" + '~' + EMP_CODE + '~' + "" + '~' + from_dt;

                try
                {
                    dt = lb.callToProcDoorCallCenter("", "getdtl", "", inputString);

                    if (dt.Rows.Count > 0)
                    {

                        data.ASSGN_BRNCH = dt.Rows[0][0].ToString();
                        data.FROM_DT = dt.Rows[0][1].ToString();
                        data.TO_DT = dt.Rows[0][2].ToString();

                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Cancel_schedule_zh(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[2].ToString();
            string from_dt = data1.Split('~')[4].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                string inputString = "" + '~' + emp_code + '~' + "" + '~' + from_dt;

                try
                {
                    dt = lb.callToProcDoorCallCenter("", "cancel_sch", "", inputString);

                    if (dt.Rows[0][0].ToString() == "CANCELLED")
                    {


                        resultModel.status = "111";
                        resultModel.result = "SUCCESSFULLY CANCELLED";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Failed";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        // -----116649-Zonal Heads Punching Schedule And Punching Schedule Cancel Option In Ess App-------end---------girish------///

        //  ---------------116465---Complaint Registration Report in ESS App-------start-----------------Athira---------------------


        public class get_ticket_complaint_list
        {

            public List<Ticket_complaint_list> get_ticket_complaint_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class Ticket_complaint_list
        {

            public string id { get; set; }
            public string name { get; set; }
            public string count { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Ticket_Complaint_Count(string p_data, string flag)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            get_ticket_complaint_list data = new get_ticket_complaint_list();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();
            string fromdate = data1.Split('~')[2].ToString();
            string todate = data1.Split('~')[3].ToString();
            string id = data1.Split('~')[4].ToString();

            string inputstring = emp_code + '~' + fromdate + '~' + todate + '~' + id;



            try
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                List<Ticket_complaint_list> get_tkt_complaint_data = new List<Ticket_complaint_list>();


                if (isSessionValid(sessionId) == "1")
                {
                    if (flag == "1")
                    {
                        dt = lb.proc_mobapp_ngl(25, inputstring);

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                get_tkt_complaint_data.Add(new Ticket_complaint_list()
                                {
                                    id = dr[0].ToString(),
                                    name = dr[1].ToString(),
                                    count = dr[2].ToString()


                                });
                            }

                            data.get_ticket_complaint_data = get_tkt_complaint_data;
                            data.status = "111";
                            data.result = "Success";
                        }


                    }
                    else if (flag == "2")
                    {
                        dt = lb.proc_mobapp_ngl(26, inputstring);

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                get_tkt_complaint_data.Add(new Ticket_complaint_list()
                                {
                                    id = dr[0].ToString(),
                                    name = dr[1].ToString(),
                                    count = dr[2].ToString()

                                });
                            }

                            data.get_ticket_complaint_data = get_tkt_complaint_data;
                            data.status = "111";
                            data.result = "Success";
                        }

                    }
                    else if (flag == "3")
                    {
                        dt = lb.proc_mobapp_ngl(27, inputstring);

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                get_tkt_complaint_data.Add(new Ticket_complaint_list()
                                {
                                    id = dr[0].ToString(),
                                    name = dr[1].ToString(),
                                    count = dr[2].ToString()


                                });
                            }

                            data.get_ticket_complaint_data = get_tkt_complaint_data;
                            data.status = "111";
                            data.result = "Success";

                        }
                    }
                    else if (flag == "4")
                    {
                        dt = lb.proc_mobapp_ngl(28, inputstring);

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                get_tkt_complaint_data.Add(new Ticket_complaint_list()
                                {
                                    id = dr[0].ToString(),
                                    name = dr[1].ToString(),
                                    count = dr[2].ToString()


                                });
                            }

                            data.get_ticket_complaint_data = get_tkt_complaint_data;
                            data.status = "111";
                            data.result = "Success";

                        }
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                else
                {
                    resultModel.status = "333";
                    resultModel.result = "Session expired";
                }
            }
            catch (Exception e)
            {
                resultModel.status = "666";
                resultModel.result = "Something Went wrong";
            }

            if (data.status == "111")
            {
                Context.Response.Write(js.Serialize(data));
            }
            else
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        public class get_ticket_details_list
        {

            public List<Ticket_details_list> get_ticket_details_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class Ticket_details_list
        {

            public string reported_date { get; set; }
            public string reported_by { get; set; }
            public string reported_by_name { get; set; }
            public string ticket_type { get; set; }
            public string ticket_no { get; set; }
            public string severity { get; set; }
            public string branch_id { get; set; }
            public string person_branch { get; set; }
            public string category_nme { get; set; }
            public string subcategory_nme { get; set; }
            public string bin_nme { get; set; }
            public string tick_dscr { get; set; }
            public string cont_num { get; set; }
            public string tick_sts { get; set; }
            public string area_nme { get; set; }
            public string reg_nme { get; set; }
            public string zone_nme { get; set; }
            public string st_ate { get; set; }
            public string descript { get; set; }
            public string delaydays { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Ticket_Complaint_details(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            get_ticket_details_list data = new get_ticket_details_list();
            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();
            string fromdate = data1.Split('~')[2].ToString();
            string todate = data1.Split('~')[3].ToString();
            string flag = data1.Split('~')[4].ToString();
            string Br_id = data1.Split('~')[5].ToString();

            string inputstring = emp_code + '~' + fromdate + '~' + todate + '~' + flag + '~' + Br_id;

            try
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();


                List<Ticket_details_list> get_tkt_details_data = new List<Ticket_details_list>();

                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_mobapp_ngl(21, inputstring);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_tkt_details_data.Add(new Ticket_details_list()
                            {
                                reported_date = dr[0].ToString(),

                                reported_by = dr[1].ToString(),

                                reported_by_name = dr[2].ToString(),

                                ticket_type = dr[3].ToString(),

                                ticket_no = dr[4].ToString(),

                                severity = dr[5].ToString(),

                                branch_id = dr[6].ToString(),

                                person_branch = dr[7].ToString(),

                                category_nme = dr[8].ToString(),

                                subcategory_nme = dr[9].ToString(),

                                bin_nme = dr[10].ToString(),

                                tick_dscr = dr[11].ToString(),

                                cont_num = dr[12].ToString(),

                                tick_sts = dr[13].ToString(),

                                area_nme = dr[14].ToString(),

                                reg_nme = dr[15].ToString(),

                                zone_nme = dr[16].ToString(),

                                st_ate = dr[17].ToString(),

                                descript = dr[18].ToString(),

                                delaydays = dr[19].ToString()


                            });
                        }

                        data.get_ticket_details_data = get_tkt_details_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {
                        resultModel.status = "222";
                        resultModel.result = "No data found";
                    }
                }
                else
                {
                    resultModel.status = "333";
                    resultModel.result = "Session expired";
                }
            }
            catch (Exception e)
            {
                resultModel.status = "666";
                resultModel.result = "Something Went wrong";
            }

            if (data.status == "111")
            {
                Context.Response.Write(js.Serialize(data));
            }
            else
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        //    ---------------116465---Complaint Registration Report in ESS App-------end-----------------Athira---------------------

        //---------------116978---CRF for Micro Home Finance marketing activities tracking-------start-------girish---------//

        public class get_mhf_daily_list
        {

            public List<mhf_daily_list> get_mhf_daily_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class mhf_daily_list
        {

            public string activity_dtls { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_mhf_daily_activity_list(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();
            string flag = data1.Split('~')[2].ToString();

            string inputstring = emp_code + '~' + flag;



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_mhf_daily_list data = new get_mhf_daily_list();
                List<mhf_daily_list> get_mhf_daily_data = new List<mhf_daily_list>();

                try
                {
                    if (flag == "1")
                    {
                        dt = lb.proc_mobapp_ngl(29, inputstring);

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                get_mhf_daily_data.Add(new mhf_daily_list()
                                {
                                    activity_dtls = dr[0].ToString(),



                                });
                            }

                            data.get_mhf_daily_data = get_mhf_daily_data;
                            data.status = "111";
                            data.result = "Success";
                        }
                        else
                        {

                            data.status = "222";
                            data.result = "No data found";
                        }



                    }
                    else if (flag == "2")
                    {
                        dt = lb.proc_mobapp_ngl(30, inputstring);

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                get_mhf_daily_data.Add(new mhf_daily_list()
                                {
                                    activity_dtls = dr[0].ToString(),

                                });
                            }

                            data.get_mhf_daily_data = get_mhf_daily_data;
                            data.status = "111";
                            data.result = "Success";
                        }
                        else
                        {

                            data.status = "222";
                            data.result = "No data found";
                        }



                    }
                    else
                    {

                        data.status = "333";
                        data.result = "failed";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }




        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void mhf_market_activity_update(string p_data, string image)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string po_id = data1.Split('~')[1].ToString();
            string emp_code = data1.Split('~')[2].ToString();
            string po_subject = data1.Split('~')[3].ToString();
            string flag = data1.Split('~')[4].ToString();
            string br_id = data1.Split('~')[5].ToString();
            string br_name = data1.Split('~')[6].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                string inputString = po_id + '~' + emp_code + '~' + po_subject + '~' + flag + '~' + br_id + '~' + br_name;
                try
                {
                    dt = lb.proc_mobapp_ngl(33, inputString);

                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                    {

                        String pt = lb.DocumentUpload(dt.Rows[0][1].ToString(), image);
                        if (pt == "111")
                        {
                            resultModel.status = "111";
                            resultModel.result = "Confirmed Successfully!!!";

                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "Something went wrong!!";
                        }

                    }
                    else
                    {
                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }
                }
                catch (Exception ex)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "555";
            }

            Context.Response.Write(js.Serialize(resultModel));

        }



        public class get_mhf_list
        {

            public List<mhf_list> get_mhf_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class mhf_list
        {
            public string po_id { get; set; }
            public string po_dtls { get; set; }
            //public string image_id { get; set; }



        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_mhf_activity_list_approval(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string flag = data1.Split('~')[1].ToString();


            //string inputstring = emp_code + '~' + flag;



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_mhf_list data = new get_mhf_list();
                List<mhf_list> get_mhf_data = new List<mhf_list>();

                try
                {
                    dt = lb.proc_mobapp_ngl(31, flag);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_mhf_data.Add(new mhf_list()
                            {
                                po_id = dr[0].ToString(),
                                po_dtls = dr[1].ToString(),
                                //image_id = dr[2].ToString(),


                            });
                        }

                        data.get_mhf_data = get_mhf_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class get_mhf_dtls
        {

            public List<mhf_dtls> get_mhf_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class mhf_dtls
        {

            public string image_id { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_mhf_activity_dtls_approval(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string flag = data1.Split('~')[1].ToString();
            string po_id = data1.Split('~')[2].ToString();


            string inputstring = flag + '~' + po_id;



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_mhf_dtls data = new get_mhf_dtls();
                List<mhf_dtls> get_mhf_data = new List<mhf_dtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(35, inputstring);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_mhf_data.Add(new mhf_dtls()
                            {
                                image_id = dr[0].ToString(),



                            });
                        }

                        data.get_mhf_data = get_mhf_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        public bool DownloadFile2(string fn, byte[] s)
        {
            System.Web.HttpResponse Response = System.Web.HttpContext.Current.Response;
            try
            {
                using (Stream file = File.OpenWrite(Server.MapPath("~/Images/" + fn)))
                {
                    file.Write(s, 0, s.Length);
                }
                return true;
            }
            catch
            {
                return false;
            }
        }

        public class ResultModel_doc
        {
            public string status { get; set; }
            public string result { get; set; }
            public string image { get; set; }



        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_MHF_docs(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel_doc resultModel = new ResultModel_doc();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string flag = data1.Split('~')[1].ToString();
            string image_id = data1.Split('~')[2].ToString();

            string inputstring = flag + '~' + image_id;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileName;
                string newData;


                try
                {
                    dt = lb.proc_mobapp_ngl(32, inputstring);
                    if (dt.Rows.Count != 0)
                    {

                        string image1 = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][0];

                                byte[] tiffjpgByte = justfuncJpegBytes(s);
                                DocFileName = image_id + "-MHF.jpg";
                                if (DownloadFile2(DocFileName, tiffjpgByte))
                                {
                                    resultModel.status = "111";
                                    resultModel.result = "Success";
                                    resultModel.image = DocFileName;

                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "Failed";
                                }
                            }
                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "No Image found!";

                        }

                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));

            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Confirm_mhf_maket_activity(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string flag = data1.Split('~')[1].ToString();
            string po_id = data1.Split('~')[2].ToString();
            string empCode = data1.Split('~')[3].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                string inputString = flag + '~' + po_id + '~' + empCode;

                try
                {
                    dt = lb.proc_mobapp_ngl(34, inputString);

                    if (dt.Rows[0][0].ToString() == "111")
                    {


                        resultModel.status = "111";
                        resultModel.result = "Confirmed Successfully";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Already Confirmed";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void mhf_daily_market_activity_update(string p_data, string image)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();
            string po_subject = data1.Split('~')[2].ToString();
            string br_id = data1.Split('~')[3].ToString();
            string br_name = data1.Split('~')[4].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                string inputString = emp_code + '~' + po_subject + '~' + br_id + '~' + br_name;
                try
                {
                    dt = lb.proc_mobapp_ngl(36, inputString);

                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                    {

                        String pt = lb.DocumentUpload(dt.Rows[0][1].ToString(), image);
                        if (pt == "111")
                        {
                            resultModel.status = "111";
                            resultModel.result = "Confirmed Successfully!!!";

                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "Something went wrong!!";
                        }

                    }
                    else
                    {
                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }
                }
                catch (Exception ex)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "555";
            }

            Context.Response.Write(js.Serialize(resultModel));

        }



        public class get_daily_mhf_list
        {

            public List<mhf_dailiy_list> get_mhf_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class mhf_dailiy_list
        {
            public string act_dtls { get; set; }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_mhf_daily_activity_list_approval(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_daily_mhf_list data = new get_daily_mhf_list();
                List<mhf_dailiy_list> get_mhf_data = new List<mhf_dailiy_list>();

                try
                {
                    dt = lb.proc_mobapp_ngl(37, sessionId);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_mhf_data.Add(new mhf_dailiy_list()
                            {
                                act_dtls = dr[0].ToString(),



                            });
                        }

                        data.get_mhf_data = get_mhf_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }



        public class get_daily_mhf_dtls
        {

            public List<mhf_daily_dtls> get_mhf_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class mhf_daily_dtls
        {

            public string image_id { get; set; }
            public string enter_date { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_mhf_daily_activity_dtls_approval(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_daily_mhf_dtls data = new get_daily_mhf_dtls();
                List<mhf_daily_dtls> get_mhf_data = new List<mhf_daily_dtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(38, emp_code);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_mhf_data.Add(new mhf_daily_dtls()
                            {
                                image_id = dr[0].ToString(),
                                enter_date = dr[1].ToString(),


                            });
                        }

                        data.get_mhf_data = get_mhf_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Confirm_mhf_daily_maket_activity(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string image_id = data1.Split('~')[1].ToString();
            string emp_code = data1.Split('~')[2].ToString();
            string emp_code1 = data1.Split('~')[3].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                string inputString = image_id + '~' + emp_code + '~' + emp_code1;

                try
                {
                    dt = lb.proc_mobapp_ngl(40, inputString);

                    if (dt.Rows[0][0].ToString() == "111")
                    {


                        resultModel.status = "111";
                        resultModel.result = "Confirmed Successfully";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Already Confirmed";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        //---------------116978---CRF for Micro Home Finance marketing activities tracking-------end-------girish---------//

        //---------------117265---CRF for Hostel Updation-------Start ----------

        public class flatDetailList
        {
            public List<getHostelDetails> flatList { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }


        public class getHostelDetails
        {
            public string id { get; set; }
            public string name { get; set; }
        }

        [WebMethod]
        public void getHostelListForEmployee(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt, dt1, dt2, dt3;
            flatDetailList val = new flatDetailList();
            List<getHostelDetails> vallist = new List<getHostelDetails>();
            ResultModel stack = new ResultModel();
            string param = "";
            try
            {
                //p_data = sessionId~13976µ1µ
                // 2µ3038µ
                // 3µ3038µ
                string data1 = Decryptrel(p_data);
                string sessionId = data1.Split('~')[0].ToString();
                string inputData = data1.Split('~')[1].ToString();
                string empCode = inputData.Split('µ')[0].ToString();
                string firmId = inputData.Split('µ')[1].ToString();
                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_hostel_rent_select("UPDATEEMPLOYE", "1µ" + inputData);

                    if (dt.Rows.Count > 0)
                    {
                        param += dt.Rows[0][0].ToString() + "µ";
                        dt1 = lb.proc_hostel_rent_select("UPDATEEMPLOYE", "2µ" + param);
                        param = "";
                        if (dt1.Rows.Count > 0)
                        {
                            param += dt1.Rows[0][0].ToString() + "µ";
                            param += firmId + "µ";

                            dt2 = lb.proc_hostel_rent_select("UPDATEEMPLOYE", "3µ" + param);
                            param = "";
                            if (dt2.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dt2.Rows)
                                {
                                    vallist.Add(new getHostelDetails()
                                    {
                                        id = dr[0].ToString(),
                                        name = dr[1].ToString(),
                                    });

                                }
                                val.flatList = vallist;
                                val.status = "111";
                                val.result = "success";
                            }
                        }

                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "Check Login Firm !";
                    }

                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session expired";
                }
            }
            catch (Exception e)
            {
                stack.status = "666";
                stack.result = "Something Went wrong";
            }

            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(stack));
            }
        }


        public class getHostelData
        {
            public string FLAT_NO { get; set; }
            public string FLAT_NAME { get; set; }
            public string CHECKIN { get; set; }
            public string CHECKINREASON { get; set; }
            public string Agreement_From { get; set; }
            public string Agreement_to { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void getHostelDetailsOfEmployee(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt;
            getHostelData val = new getHostelData();
            ResultModel stack = new ResultModel();
            string param = "";
            try
            {
                // p_data = 2CS49ENQUM47ABSMG7A3:13976~13976
                string data1 = Decryptrel(p_data);
                string sessionId = data1.Split('~')[0].ToString();
                string empCode = data1.Split('~')[1].ToString();
                if (isSessionValid(sessionId) == "1")
                {
                    param += empCode + "µ";
                    dt = lb.proc_hostel_rent_select("UPDATEEMPLOYE", "10µ" + param);
                    if (dt.Rows.Count > 0)
                    {
                        val.FLAT_NO = dt.Rows[0][0].ToString();
                        val.FLAT_NAME = dt.Rows[0][1].ToString();
                        val.CHECKIN = dt.Rows[0][2].ToString();
                        val.CHECKINREASON = dt.Rows[0][3].ToString();
                        val.status = "111";
                        val.result = "success";

                    }

                    else
                    {
                        stack.status = "222";
                        stack.result = "You are not till registred in any of Manappuram Hostel.If yes please update!";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session expired";
                }
            }
            catch (Exception e)
            {
                stack.status = "666";
                stack.result = "Something Went wrong";
            }

            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(stack));
            }
        }

        [WebMethod]
        public void getHostelDataOfEmployee(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt;
            getHostelData val = new getHostelData();
            ResultModel stack = new ResultModel();

            try
            {
                // sessionId~selectedFlatId µ firmId µ
                // sessionId~5µ7905µ1µ
                string data1 = Decryptrel(p_data);
                string sessionId = data1.Split('~')[0].ToString();
                string inputData = data1.Split('~')[1].ToString();
                if (isSessionValid(sessionId) == "1")
                {

                    dt = lb.proc_hostel_rent_select("UPDATEEMPLOYE", "5µ" + inputData);
                    if (dt.Rows.Count > 0)
                    {
                        val.FLAT_NO = dt.Rows[0][0].ToString();
                        val.FLAT_NAME = dt.Rows[0][1].ToString();
                        val.CHECKIN = dt.Rows[0][2].ToString();
                        val.CHECKINREASON = dt.Rows[0][3].ToString();
                        val.Agreement_From = dt.Rows[0][4].ToString();
                        val.Agreement_to = dt.Rows[0][5].ToString();
                        val.status = "111";
                        val.result = "success";

                    }

                    else
                    {
                        stack.status = "222";
                        stack.result = "Please Enter Currect Flat No !";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session expired";
                }
            }
            catch (Exception e)
            {
                stack.status = "666";
                stack.result = "Something Went wrong";
            }

            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(stack));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Confirm_HostelData(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            try
            {
                string data1 = Decryptrel(p_data);
                string sessionId = data1.Split('~')[0].ToString();
                string empCode = data1.Split('~')[1].ToString();
                string flatNo = data1.Split('~')[2].ToString();
                string yesNo = data1.Split('~')[3].ToString();
                string param = "";

                int flatNoInt = int.Parse(flatNo);
                int empCodeInt = int.Parse(empCode);
                int yesNoInt = int.Parse(yesNo);

                // p_data = IDESCUKCJLCL5G70VGK5:386837~386837~7905

                if (isSessionValid(sessionId) == "1")
                {
                    DataSet ds = new DataSet();
                    DataTable dt = new DataTable();
                    DataTable dt1 = new DataTable();
                    if (yesNo == "1")
                    {

                        param += empCode + "µ";
                        dt = lb.proc_hostel_rent_select("UPDATEEMPLOYE", "7µ" + param);  // 7µ386837µ
                        param = "";

                        param += flatNo + "µ";
                        dt1 = lb.proc_hostel_rent_select("UPDATEEMPLOYE", "8µ" + param); //8µ7905µ
                        if (dt.Rows.Count == 0)
                        {
                            if (dt1.Rows[0][0].ToString() != "6" && dt1.Rows[0][0].ToString() != "7")
                            {
                                resultModel.status = "222";
                                resultModel.result = "You Cannot Select GENTS Hostels For LADIES .. SELECT LADIES FLAT ONLY !";
                            }
                        }
                        else if (dt.Rows[0][0].ToString() == "1" && dt1.Rows[0][0].ToString() == "6")
                        {
                            resultModel.status = "222";
                            resultModel.result = "You Cannot Select LADIES Hostels For GENTS .. SELECT OTHER GENTS FLAT !";
                        }

                        if (dt.Rows.Count != 0 && dt1.Rows.Count != 0 && resultModel.status != "222")
                        {
                            if (BH_BM_ABH_CHECK(dt.Rows[0][2].ToString(), dt.Rows[0][1].ToString(), dt1.Rows[0][2].ToString(), dt1.Rows[0][1].ToString(), dt.Rows[0][3].ToString()) != "0")
                            {
                                resultModel.status = "222";
                                resultModel.result = "You Cannot Select Same Hostel For JOINT Custodians,Choose Another One!";
                            }
                            else
                            {
                                resultModel.status = "111";
                                resultModel.result = lb.EmployeeHostelUpdation(flatNoInt, empCodeInt, yesNoInt);

                            }
                        }
                    }
                    else
                    {
                        lb.EmployeeHostelUpdation(0, empCodeInt, yesNoInt);
                        resultModel.status = "222";
                        resultModel.result = "You Are Not Allowed To Stay In Any Hostels Provided By Manappuram Finance Limited!";
                    }

                }
                else
                {
                    resultModel.status = "333";
                    resultModel.result = "Session Expired!";
                }
            }
            catch (Exception e)
            {
                resultModel.status = "666";
                resultModel.result = "Exception : " + e.Message;

            }

            if (resultModel.status == "111")
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
            else
            {
                Context.Response.Write(js.Serialize(resultModel));
            }

        }



        public string BH_BM_ABH_CHECK(string empCode, string postid, string flatNo, string brId, string emp_branch)
        {
            DataTable dt = new DataTable();
            string result = "", param = "";
            param += flatNo + "µ";
            param += emp_branch + "µ";
            dt = lb.proc_hostel_rent_select("UPDATEEMPLOYE", "6µ" + param);

            if (postid == "1" || postid == "10" || postid == "198")
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    if (dt.Rows[i][0].ToString() == flatNo)
                    {
                        if (dt.Rows[i][5].ToString() == emp_branch)
                        {
                            if (dt.Rows[i][1].ToString() != empCode)
                            {
                                result = "1";
                            }
                            else
                            {
                                result = "0";
                            }
                        }

                    }

                }
            }
            else
            {
                result = "0";
            }

            return result;
        }

        //--------------- 117265 --- CRF for Hostel Updation------- End -----------

        // -------------117200---Special cases pdc entry-Module access In Ess App--------------start-------girish---------///

        public class pdc_loan_dtls
        {
            public string loan_id { get; set; }
            public string loan_amount { get; set; }
            public string branch_name { get; set; }
            public string branch_id { get; set; }

            public string status { get; set; }
            public string result { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_pdc_dtls(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string application_id = data1.Split('~')[1].ToString();
            string emp_code = data1.Split('~')[2].ToString();

            string inputString = application_id + '~' + emp_code;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                pdc_loan_dtls data = new pdc_loan_dtls();

                try
                {
                    dt = lb.proc_mobapp_ngl(41, inputString);

                    //if (dt.Rows.Count > 0)
                    if (dt.Rows[0][0].ToString() == "111")
                    {
                        data.status = "222";
                        data.result = "No data found";

                    }
                    else
                    {

                        data.loan_id = dt.Rows[0][0].ToString();
                        data.loan_amount = dt.Rows[0][1].ToString();
                        data.branch_name = dt.Rows[0][2].ToString();
                        data.branch_id = dt.Rows[0][3].ToString();

                        data.status = "111";
                        data.result = "Success";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class pdc_loan_dtls1
        {
            public string loan_id { get; set; }
            public string loan_amount { get; set; }
            public string branch_name { get; set; }


            public string status { get; set; }
            public string result { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_pdc_dtls_appr(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string application_id = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                pdc_loan_dtls1 data = new pdc_loan_dtls1();

                try
                {
                    dt = lb.proc_nloan_pdc_entry_exception("loandetails", application_id, "");

                    if (dt.Rows.Count > 0)
                    {

                        data.loan_id = dt.Rows[0][0].ToString();
                        data.loan_amount = dt.Rows[0][1].ToString();
                        data.branch_name = dt.Rows[0][2].ToString();


                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {


                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Submit_pdc_request(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string loan_appication_no = data1.Split('^')[1].ToString();
            string reason = data1.Split('^')[2].ToString();
            string submition_date = data1.Split('^')[3].ToString();
            string updated_by = data1.Split('^')[4].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                string inputString = loan_appication_no + '^' + reason + '^' + submition_date + '^' + updated_by;

                try
                {
                    dt = lb.proc_nloan_pdc_entry_exception("confirmdtls", inputString, "");

                    if (dt.Rows[0][0].ToString() == "000")
                    {


                        resultModel.status = "111";
                        resultModel.result = "Submitted Successfully";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "failed";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class get_pdc_recomnd_dtls
        {

            public List<pdc_recomnd_dtls> pdc_recomnd_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class pdc_recomnd_dtls
        {

            public string Loan_Appication_No { get; set; }
            public string LOAN_APPICATION_NO { get; set; }


        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_pdc_appid_recommend_approve(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string branch_id = data1.Split('~')[1].ToString();
            string emp_code = data1.Split('~')[2].ToString();
            string flag = data1.Split('~')[3].ToString();

            string inputString1 = branch_id + '~' + flag;
            string inputString = branch_id + '~' + emp_code + '~' + flag;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_pdc_recomnd_dtls data = new get_pdc_recomnd_dtls();
                List<pdc_recomnd_dtls> pdc_recomnd_data = new List<pdc_recomnd_dtls>();

                try
                {
                    if (flag == "1")
                    {
                        dt = lb.proc_mobapp_ngl(58, inputString);

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                pdc_recomnd_data.Add(new pdc_recomnd_dtls()
                                {
                                    Loan_Appication_No = dr[0].ToString(),
                                    LOAN_APPICATION_NO = dr[1].ToString(),


                                });
                            }

                            data.pdc_recomnd_data = pdc_recomnd_data;
                            data.status = "111";
                            data.result = "Success";
                        }
                    }
                    else if (flag == "2")
                    {
                        dt = lb.proc_nloan_pdc_entry_exception("GETAPPID2", "", "");

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                pdc_recomnd_data.Add(new pdc_recomnd_dtls()
                                {
                                    Loan_Appication_No = dr[0].ToString(),
                                    LOAN_APPICATION_NO = dr[1].ToString(),


                                });
                            }

                            data.pdc_recomnd_data = pdc_recomnd_data;
                            data.status = "111";
                            data.result = "Success";
                        }
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }


                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Recom_apprv_rejct_pdc(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string loan_appication_no = data1.Split('^')[1].ToString();
            string remarks = data1.Split('^')[2].ToString();
            string verified_by = data1.Split('^')[3].ToString();
            string submition_date = data1.Split('^')[4].ToString();
            string flag = data1.Split('^')[5].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                string inputString = loan_appication_no + '^' + remarks + '^' + verified_by;
                string inputString1 = loan_appication_no + '^' + remarks + '^' + verified_by + '^' + submition_date;

                try
                {
                    if (flag == "1")
                    {
                        dt = lb.proc_nloan_pdc_entry_exception("RECOMMENT", inputString, "");

                        if (dt.Rows[0][0].ToString() == "000")
                        {


                            resultModel.status = "000";
                            resultModel.result = "Recommended Successfully";

                        }
                    }
                    else if (flag == "2")
                    {
                        dt = lb.proc_pdc_entry_exception("APPROVE", inputString, "");

                        if (dt.Rows[0][0].ToString() == "000")
                        {


                            resultModel.status = "111";
                            resultModel.result = "Approved Successfully";

                        }
                    }

                    else if (flag == "3")
                    {
                        dt = lb.proc_nloan_pdc_entry_exception("REJECT", inputString, "");

                        if (dt.Rows[0][0].ToString() == "000")
                        {


                            resultModel.status = "222";
                            resultModel.result = "Rejected Successfully";

                        }
                    }
                    else if (flag == "4")
                    {
                        dt = lb.proc_nloan_pdc_entry_exception("APPROVEXTENT", inputString1, "");

                        if (dt.Rows[0][0].ToString() == "000")
                        {


                            resultModel.status = "333";
                            resultModel.result = "Approved Successfully";

                        }
                    }
                    else
                    {

                        resultModel.status = "444";
                        resultModel.result = "failed";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        // -------------117200---Special cases pdc entry-Module access In Ess App--------------end-------girish---------///

        //   -------------117201---Crf for Migration of module in Ess app--------------start-------sheela---------///


        public class blocked_list_spl
        {
            public List<blocked_list> SPL_blocked_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class blocked_list
        {
            public string emp_code { get; set; }
            public string emp_name { get; set; }
            public string designation { get; set; }
            public string block_dt { get; set; }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_blocked_list_spl(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                blocked_list_spl list_Spl = new blocked_list_spl();
                List<blocked_list> get_blockedlist = new List<blocked_list>();
                try
                {
                    dt = lb.proc_get_blocked_list_spl("", "", "", "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_blockedlist.Add(new blocked_list()
                            {
                                emp_code = dr[0].ToString(),
                                emp_name = dr[1].ToString(),
                                designation = dr[2].ToString(),
                                block_dt = dr[3].ToString(),


                            });
                        }

                        list_Spl.SPL_blocked_list = get_blockedlist;
                        list_Spl.status = "111";
                        list_Spl.result = "Success";
                    }

                    else
                    {

                        list_Spl.status = "222";
                        list_Spl.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    list_Spl.status = "666";
                    list_Spl.result = "Exception : " + e.Message;

                }

                if (list_Spl.status == "111")
                {
                    Context.Response.Write(js.Serialize(list_Spl));
                }
                else
                {
                    Context.Response.Write(js.Serialize(list_Spl));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class unblock_punch
        {

            public string status { get; set; }
            public string result { get; set; }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_unblock_punch_spl(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            unblock_punch list_Spl = new unblock_punch();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();
            string emp_code1 = data1.Split('~')[2].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();

                try
                {
                    dt = lb.proc_unblock_punch_spl("", emp_code, emp_code1, "");

                    if (dt.Rows[0][0].ToString() == "Updated Successfully ")
                    {


                        list_Spl.status = "111";
                        list_Spl.result = "BLOCK REMOVED SUCCESSFULLY";

                    }
                    else
                    {

                        list_Spl.status = "222";
                        list_Spl.result = "User  have no permission to unblock";
                    }

                }
                catch (Exception e)
                {
                    list_Spl.status = "666";
                    list_Spl.result = "Exception : " + e.Message;

                }

                if (list_Spl.status == "111")
                {
                    Context.Response.Write(js.Serialize(list_Spl));
                }
                else
                {
                    Context.Response.Write(js.Serialize(list_Spl));
                }

            }
            else
            {
                list_Spl.status = "666";
                list_Spl.result = "Session Expired!";
                Context.Response.Write(js.Serialize(list_Spl));
            }
        }
        // -------------117201---Crf for Migration of module in Ess app--------------end-------sheela---------///

        //---------------117563---CRF for Disbursment report for SSIF in ess app-------start-------girish--------------///

        public class get_ssif_state_list
        {

            public List<ssif_state_list> get_ssif_data { get; set; }

            public string loan_count_total { get; set; }
            public string loan_amount_total { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class ssif_state_list
        {

            public string state_name { get; set; }
            public string state_id { get; set; }
            public string loan_count { get; set; }
            public string loan_amount { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ssif_state_count(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string from_dt = data1.Split('~')[1].ToString();
            string to_dt = data1.Split('~')[2].ToString();
            string emp_code = data1.Split('~')[3].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                get_ssif_state_list data = new get_ssif_state_list();
                List<ssif_state_list> get_ssif_data = new List<ssif_state_list>();

                string inputString = from_dt + '~' + to_dt + '~' + emp_code;

                try
                {
                    dt = lb.proc_mobapp_ngl(42, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_ssif_data.Add(new ssif_state_list()
                            {
                                state_name = dr[0].ToString(),
                                state_id = dr[1].ToString(),
                                loan_count = dr[2].ToString(),
                                loan_amount = dr[3].ToString(),

                            });
                        }

                        data.get_ssif_data = get_ssif_data;
                        dt1 = lb.proc_mobapp_ngl(59, inputString);
                        data.loan_count_total = dt1.Rows[0][0].ToString();
                        data.loan_amount_total = dt1.Rows[0][1].ToString();
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class get_ssif_state_loan
        {

            public List<ssif_state_loan> get_ssif_loan_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class ssif_state_loan
        {

            public string loan_id { get; set; }
            public string Loan_Date { get; set; }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ssif_state_loan_list(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string from_dt = data1.Split('~')[1].ToString();
            string to_dt = data1.Split('~')[2].ToString();
            string state_id = data1.Split('~')[3].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_ssif_state_loan data = new get_ssif_state_loan();
                List<ssif_state_loan> get_ssif_loan_data = new List<ssif_state_loan>();

                string inputString = from_dt + '~' + to_dt + '~' + state_id;

                try
                {
                    dt = lb.proc_mobapp_ngl(43, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_ssif_loan_data.Add(new ssif_state_loan()
                            {
                                loan_id = dr[0].ToString(),
                                Loan_Date = dr[1].ToString(),


                            });
                        }

                        data.get_ssif_loan_data = get_ssif_loan_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }



        public class ssif_state_loan_dtls
        {
            public string branch_id { get; set; }
            public string branch_name { get; set; }
            public string Cust_name { get; set; }
            public string loan_amount { get; set; }
            public string Loan_Date { get; set; }
            public string executive_name { get; set; }

            public string status { get; set; }
            public string result { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ssif_loan_dtls(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string LOAN_ID = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                ssif_state_loan_dtls data = new ssif_state_loan_dtls();

                try
                {
                    dt = lb.proc_mobapp_ngl(44, LOAN_ID);

                    if (dt.Rows.Count > 0)

                    {

                        data.branch_id = dt.Rows[0][0].ToString();
                        data.branch_name = dt.Rows[0][1].ToString();
                        data.Cust_name = dt.Rows[0][2].ToString();
                        data.loan_amount = dt.Rows[0][3].ToString();
                        data.Loan_Date = dt.Rows[0][4].ToString();
                        data.executive_name = dt.Rows[0][5].ToString();

                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class get_ssif_so_list
        {

            public List<ssif_so_list> get_ssif_data { get; set; }

            public string loan_count_total { get; set; }
            public string loan_amount_total { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class ssif_so_list
        {

            public string executive_name { get; set; }
            public string executive_code { get; set; }
            public string state_name { get; set; }
            public string loan_count { get; set; }
            public string loan_amount { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ssif_SO_count(string p_data)                ///SO wise loan count///
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string from_dt = data1.Split('~')[1].ToString();
            string to_dt = data1.Split('~')[2].ToString();
            string emp_code = data1.Split('~')[3].ToString();
            string state_id = data1.Split('~')[4].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                get_ssif_so_list data = new get_ssif_so_list();
                List<ssif_so_list> get_ssif_data = new List<ssif_so_list>();

                string inputString = from_dt + '~' + to_dt + '~' + emp_code + '~' + state_id;

                try
                {
                    dt = lb.proc_mobapp_ngl(45, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_ssif_data.Add(new ssif_so_list()
                            {
                                executive_name = dr[0].ToString(),
                                executive_code = dr[1].ToString(),
                                state_name = dr[2].ToString(),
                                loan_count = dr[3].ToString(),
                                loan_amount = dr[4].ToString(),

                            });
                        }

                        data.get_ssif_data = get_ssif_data;
                        dt1 = lb.proc_mobapp_ngl(60, inputString);
                        data.loan_count_total = dt1.Rows[0][0].ToString();
                        data.loan_amount_total = dt1.Rows[0][1].ToString();
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }




        //public class get_ssif_so_loan
        //{

        //    public List<ssif_so_loan> get_ssif_loan_data { get; set; }
        //    public string status { get; set; }
        //    public string result { get; set; }

        //}

        //public class ssif_so_loan
        //{

        //    public string loan_id { get; set; }
        //    public string Loan_Date { get; set; }


        //}


        //[WebMethod]
        //[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        //public void ssif_so_loan_list_state(string p_data)
        //{
        //    Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
        //    Context.Response.Cache.SetNoStore();
        //    Context.Response.Clear();
        //    Context.Response.ContentType = "application/json";
        //    ResultModel resultModel = new ResultModel();

        //    string data1 = Decryptrel(p_data);
        //    string sessionId = data1.Split('~')[0].ToString();
        //    string from_dt = data1.Split('~')[1].ToString();
        //    string to_dt = data1.Split('~')[2].ToString();
        //    string state_id = data1.Split('~')[3].ToString();



        //    if (isSessionValid(sessionId) == "1")
        //    {
        //        DataSet ds = new DataSet();
        //        DataTable dt = new DataTable();
        //        get_ssif_state_loan data = new get_ssif_state_loan();
        //        List<ssif_state_loan> get_ssif_loan_data = new List<ssif_state_loan>();

        //        string inputString = from_dt + '~' + to_dt + '~' + state_id;

        //        try
        //        {
        //            dt = lb.proc_mobapp_ngl(43, inputString);

        //            if (dt.Rows.Count > 0)
        //            {
        //                foreach (DataRow dr in dt.Rows)
        //                {
        //                    get_ssif_loan_data.Add(new ssif_state_loan()
        //                    {
        //                        loan_id = dr[0].ToString(),
        //                        Loan_Date = dr[1].ToString(),


        //                    });
        //                }

        //                data.get_ssif_loan_data = get_ssif_loan_data;
        //                data.status = "111";
        //                data.result = "Success";
        //            }

        //            else
        //            {

        //                data.status = "222";
        //                data.result = "No data found";
        //            }

        //        }
        //        catch (Exception e)
        //        {
        //            data.status = "666";
        //            data.result = "Exception : " + e.Message;

        //        }

        //        if (data.status == "111")
        //        {
        //            Context.Response.Write(js.Serialize(data));
        //        }
        //        else
        //        {
        //            Context.Response.Write(js.Serialize(data));
        //        }

        //    }


        //    else
        //    {
        //        Context.Response.Write(js.Serialize("Session Expired."));
        //    }
        //}



        //public class get_ssif_state_loan
        //{

        //    public List<ssif_state_loan> get_ssif_loan_data { get; set; }
        //    public string status { get; set; }
        //    public string result { get; set; }

        //}

        //public class ssif_state_loan
        //{

        //    public string loan_id { get; set; }
        //    public string Loan_Date { get; set; }


        //}


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ssif_so_loan_list(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string from_dt = data1.Split('~')[1].ToString();
            string to_dt = data1.Split('~')[2].ToString();
            string EXECUTIVE_CODE = data1.Split('~')[3].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_ssif_state_loan data = new get_ssif_state_loan();
                List<ssif_state_loan> get_ssif_loan_data = new List<ssif_state_loan>();

                string inputString = from_dt + '~' + to_dt + '~' + EXECUTIVE_CODE;

                try
                {
                    dt = lb.proc_mobapp_ngl(46, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_ssif_loan_data.Add(new ssif_state_loan()
                            {
                                loan_id = dr[0].ToString(),
                                Loan_Date = dr[1].ToString(),


                            });
                        }

                        data.get_ssif_loan_data = get_ssif_loan_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        public class get_ssif_br_loan
        {

            public List<ssif_br_loan> get_ssif_loan_data { get; set; }

            public string loan_count_total { get; set; }
            public string loan_amount_total { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class ssif_br_loan
        {

            public string branch_id { get; set; }
            public string branch_name { get; set; }
            public string loan_count { get; set; }
            public string loan_amount { get; set; }



        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ssif_br_dmy_count(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string flag = data1.Split('~')[1].ToString();




            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                get_ssif_br_loan data = new get_ssif_br_loan();
                List<ssif_br_loan> get_ssif_loan_data = new List<ssif_br_loan>();

                //string inputString = from_dt + '~' + to_dt + '~' + EXECUTIVE_CODE;

                try
                {
                    dt = lb.proc_mobapp_ngl(47, flag);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_ssif_loan_data.Add(new ssif_br_loan()
                            {
                                branch_id = dr[0].ToString(),
                                branch_name = dr[1].ToString(),
                                loan_count = dr[2].ToString(),
                                loan_amount = dr[3].ToString(),


                            });
                        }

                        data.get_ssif_loan_data = get_ssif_loan_data;
                        dt1 = lb.proc_mobapp_ngl(61, flag);
                        data.loan_count_total = dt1.Rows[0][0].ToString();
                        data.loan_amount_total = dt1.Rows[0][1].ToString();
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        public class get_ssif_br_so_loan
        {

            public List<ssif_br_so_loan> get_ssif_loan_data { get; set; }
            public string loan_count_total { get; set; }
            public string loan_amount_total { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class ssif_br_so_loan
        {

            public string executive_name { get; set; }
            public string executive_code { get; set; }
            public string loan_count { get; set; }
            public string loan_amount { get; set; }



        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void ssif_br_so_dmy_count(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string flag = data1.Split('~')[1].ToString();
            string branch_id = data1.Split('~')[2].ToString();




            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                get_ssif_br_so_loan data = new get_ssif_br_so_loan();
                List<ssif_br_so_loan> get_ssif_loan_data = new List<ssif_br_so_loan>();

                string inputString = flag + '~' + branch_id;

                try
                {
                    dt = lb.proc_mobapp_ngl(48, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_ssif_loan_data.Add(new ssif_br_so_loan()
                            {
                                executive_name = dr[0].ToString(),
                                executive_code = dr[1].ToString(),
                                loan_count = dr[2].ToString(),
                                loan_amount = dr[3].ToString(),


                            });
                        }

                        data.get_ssif_loan_data = get_ssif_loan_data;
                        dt1 = lb.proc_mobapp_ngl(62, inputString);
                        data.loan_count_total = dt1.Rows[0][0].ToString();
                        data.loan_amount_total = dt1.Rows[0][1].ToString();
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        //---------------117563---CRF for Disbursment report for SSIF in ess app-------end-------girish--------------///

        //---------------117943-Cutomer home visit-SPL-Deliquency in ess app-------Start-------girish--------------///

        public class get_deliq_loan
        {

            public List<deliq_loan_list> deliq_loan_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class deliq_loan_list
        {

            public string loan_id { get; set; }
            public string loan_dtls { get; set; }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_SPL_deliquecy_list(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();




            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_deliq_loan data = new get_deliq_loan();
                List<deliq_loan_list> deliq_loan_data = new List<deliq_loan_list>();

                //string inputString = from_dt + '~' + to_dt + '~' + state_id;

                try
                {
                    dt = lb.proc_customeroverdue("GETAPPLICATIONID", emp_code, "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            deliq_loan_data.Add(new deliq_loan_list()
                            {
                                loan_id = dr[0].ToString(),
                                loan_dtls = dr[1].ToString(),


                            });
                        }

                        data.deliq_loan_data = deliq_loan_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Submit_spl_home_visit(string p_data, string image)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string Flag = data1.Split('^')[1].ToString();

            //string a = data1.Split('^')[1].ToString();
            int flag = int.Parse(data1.Split('^')[1]);

            string loan_number = data1.Split('^')[2].ToString();
            string customer_name = data1.Split('^')[3].ToString();
            string visit_date = data1.Split('^')[4].ToString();
            string prop_clr_ovdue = data1.Split('^')[5].ToString();
            string followup1 = data1.Split('^')[6].ToString();
            string followup2 = data1.Split('^')[7].ToString();
            string followup3 = data1.Split('^')[8].ToString();
            string followup4 = data1.Split('^')[9].ToString();
            string kilometer = data1.Split('^')[10].ToString();
            string remarks = data1.Split('^')[11].ToString();
            string updated_by = data1.Split('^')[12].ToString();
            string filename = data1.Split('^')[13].ToString();
            string extn = data1.Split('^')[14].ToString();

            DataSet ds = new DataSet();
            DataTable dt, dt1, dt2, dt3, dt4 = new DataTable();

            if (isSessionValid(sessionId) == "1")
            {

                string inputString = Flag + '^' + loan_number + '^' + customer_name + '^' + visit_date + '^' + prop_clr_ovdue + '^' + followup1 + '^' + kilometer + '^' + remarks + '^' + updated_by;

                string inputString1 = Flag + '^' + loan_number + '^' + customer_name + '^' + visit_date + '^' + prop_clr_ovdue + '^' + followup2 + '^' + kilometer + '^' + remarks + '^' + updated_by;

                string inputString2 = Flag + '^' + loan_number + '^' + customer_name + '^' + visit_date + '^' + prop_clr_ovdue + '^' + followup3 + '^' + kilometer + '^' + remarks + '^' + updated_by;

                string inputString3 = Flag + '^' + loan_number + '^' + customer_name + '^' + visit_date + '^' + prop_clr_ovdue + '^' + followup4 + '^' + kilometer + '^' + remarks + '^' + updated_by;


                string inputString4 = loan_number + '^' + visit_date + '^' + filename + '^' + extn + '^' + updated_by;
                String result = "";
                String sl_no = "";

                try
                {

                    if (flag == 1)
                    {


                        dt = lb.proc_customeroverdue("detailsupdation", inputString, "");

                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "Updated Successfully"))
                        {

                            result = lb.proc_lmslos_docupload("customeroverdue", inputString4);

                            String pt1 = lb.DocumentUpload_ssif(result, image);

                            if (pt1 == "111")
                            {
                                resultModel.status = "111";
                                resultModel.result = "Confirmed Successfully!!!";

                            }
                            else
                            {
                                resultModel.status = "222";
                                resultModel.result = "Something went wrong!!";
                            }

                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "Already Updated!!";
                        }
                    }
                    else if (flag == 2)
                    {
                        dt = lb.proc_customeroverdue("detailsupdation", inputString1, "");

                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "Updated Successfully"))
                        {

                            result = lb.proc_lmslos_docupload("customeroverdue", inputString4);

                            String pt1 = lb.DocumentUpload_ssif(result, image);

                            if (pt1 == "111")
                            {
                                resultModel.status = "111";
                                resultModel.result = "Confirmed Successfully!!!";

                            }
                            else
                            {
                                resultModel.status = "222";
                                resultModel.result = "Something went wrong!!";
                            }
                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "Already Updated!!";
                        }

                    }
                    else if (flag == 3)
                    {

                        dt = lb.proc_customeroverdue("detailsupdation", inputString2, "");

                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "Updated Successfully"))
                        {

                            result = lb.proc_lmslos_docupload("customeroverdue", inputString4);

                            String pt1 = lb.DocumentUpload_ssif(result, image);

                            if (pt1 == "111")
                            {
                                resultModel.status = "111";
                                resultModel.result = "Confirmed Successfully!!!";

                            }
                            else
                            {
                                resultModel.status = "222";

                                resultModel.result = "Something went wrong!!";
                            }
                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "Already Updated!!";
                        }

                    }
                    else
                    {

                        dt = lb.proc_customeroverdue("detailsupdation", inputString3, "");

                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "Updated Successfully"))
                        {

                            result = lb.proc_lmslos_docupload("customeroverdue", inputString4);

                            String pt1 = lb.DocumentUpload_ssif(result, image);

                            if (pt1 == "111")
                            {
                                resultModel.status = "111";
                                resultModel.result = "Confirmed Successfully!!!";

                            }
                            else
                            {
                                resultModel.status = "222";
                                resultModel.result = "Something went wrong!!";
                            }
                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "Already Updated!!";
                        }
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }



        public class spl_custdetails
        {
            public string Cust_name { get; set; }

            public string status { get; set; }
            public string result { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_spl_custdetails(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string loan_id = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                spl_custdetails data = new spl_custdetails();

                try
                {
                    dt = lb.proc_customeroverdue("Details", loan_id, "");

                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "000"))

                    {
                        data.status = "000";
                        data.result = "Already Settled";


                    }
                    else
                    {

                        data.Cust_name = dt.Rows[0][0].ToString();

                        data.status = "111";
                        data.result = "Success";


                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class spl_followup
        {
            public string details { get; set; }
            public string status { get; set; }
            public string result { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_spl_followup_dtls(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string loan_number = data1.Split('^')[1].ToString();
            string visit_date = data1.Split('^')[2].ToString();

            string inputString = loan_number + '^' + visit_date;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                spl_followup data = new spl_followup();

                try
                {
                    dt = lb.proc_customeroverdue("overduefollowupdetails", inputString, "");

                    if (dt.Rows[0][0].ToString() == "000")

                    {
                        data.status = "000";
                        data.result = "Already Settled";

                    }
                    else if (dt.Rows[0][0].ToString() == "111")

                    {
                        data.status = "111";
                        data.result = "Followup-1";

                    }

                    else if (dt.Rows[0][0].ToString() == "555")

                    {
                        data.status = "555";
                        data.result = "Above Followup-4";

                    }
                    else if (dt.Rows[0][1].ToString() == "222")
                    {
                        data.details = dt.Rows[0][0].ToString();
                        data.status = "222";
                        data.result = "Followup-2";

                    }
                    else if (dt.Rows[0][1].ToString() == "333")
                    {
                        data.details = dt.Rows[0][0].ToString();
                        data.status = "333";
                        data.result = "Followup-3";

                    }
                    else if (dt.Rows[0][1].ToString() == "444")
                    {
                        data.details = dt.Rows[0][0].ToString();
                        data.status = "444";
                        data.result = "Followup-4";

                    }
                    else
                    {

                        data.status = "777";
                        data.result = "No data found";

                    }


                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        //--------------117943-Cutomer home visit-SPL-Deliquency in ess app-------end-------girish--------------///

        // -------------118082 : Crf for MSME End User Verification Visit---------Start---------------------///

        public class get_msme_enduse_dtls
        {

            public List<msme_enduse_dtls> get_msme_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class msme_enduse_dtls
        {

            public string state_id { get; set; }
            public string state_name { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_msme_enduse_state(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string from_date = data1.Split('~')[1].ToString();
            string to_date = data1.Split('~')[2].ToString();
            string inputString = from_date + '~' + to_date;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_msme_enduse_dtls data = new get_msme_enduse_dtls();
                List<msme_enduse_dtls> get_msme_data = new List<msme_enduse_dtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(63, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_msme_data.Add(new msme_enduse_dtls()
                            {
                                state_id = dr[0].ToString(),
                                state_name = dr[1].ToString(),


                            });
                        }

                        data.get_msme_data = get_msme_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class get_msme_endusebranch_dtls
        {

            public List<msme_endusebranch_dtls> get_msmebranch_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class msme_endusebranch_dtls
        {

            public string branch_id { get; set; }
            public string branch_name { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_msme_enduse_branch(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string from_date = data1.Split('~')[1].ToString();
            string to_date = data1.Split('~')[2].ToString();
            string state_id = data1.Split('~')[3].ToString();
            string inputString = from_date + '~' + to_date + '~' + state_id;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_msme_endusebranch_dtls data = new get_msme_endusebranch_dtls();
                List<msme_endusebranch_dtls> get_msme_data = new List<msme_endusebranch_dtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(64, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_msme_data.Add(new msme_endusebranch_dtls()
                            {
                                branch_id = dr[0].ToString(),
                                branch_name = dr[1].ToString(),


                            });
                        }

                        data.get_msmebranch_data = get_msme_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }



        public class get_msme_enduseapplication_dtls
        {

            public List<msme_enduseapplication_dtls> get_msmeapplication_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class msme_enduseapplication_dtls
        {

            public string applicationid { get; set; }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_msme_enduse_applicationid(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string from_date = data1.Split('~')[1].ToString();
            string to_date = data1.Split('~')[2].ToString();
            string branch_id = data1.Split('~')[3].ToString();
            string inputString = from_date + '~' + to_date + '~' + branch_id;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_msme_enduseapplication_dtls data = new get_msme_enduseapplication_dtls();
                List<msme_enduseapplication_dtls> get_msme_data = new List<msme_enduseapplication_dtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(65, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_msme_data.Add(new msme_enduseapplication_dtls()
                            {
                                applicationid = dr[0].ToString()



                            });
                        }

                        data.get_msmeapplication_data = get_msme_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }




        public class application_lists
        {
            public string application_id { get; set; }
            public string loan_id { get; set; }
            public string cust_name { get; set; }
            public string scheme_name { get; set; }
            public string loan_amount { get; set; }
            public string loan_dt { get; set; }
            public string tenure { get; set; }
            public string int_rate { get; set; }
            public string state_name { get; set; }
            public string BRANCH_NAME { get; set; }
            public string status { get; set; }
            public string result { get; set; }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_msmeapplication_details(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string from_date = data1.Split('~')[1].ToString();
            string to_date = data1.Split('~')[2].ToString();
            string applicationid = data1.Split('~')[3].ToString();
            string inputString = from_date + '~' + to_date + '~' + applicationid;


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                application_lists data = new application_lists();
                //List<state_lists> get_state_data = new List<state_lists>();

                try
                {
                    dt = lb.proc_mobapp_ngl(66, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        data.application_id = dt.Rows[0][0].ToString();
                        data.loan_id = dt.Rows[0][1].ToString();
                        data.cust_name = dt.Rows[0][2].ToString();
                        data.scheme_name = dt.Rows[0][3].ToString();
                        data.loan_amount = dt.Rows[0][4].ToString();
                        data.loan_dt = dt.Rows[0][5].ToString();
                        data.tenure = dt.Rows[0][6].ToString();
                        data.int_rate = dt.Rows[0][7].ToString();
                        data.state_name = dt.Rows[0][8].ToString();
                        data.BRANCH_NAME = dt.Rows[0][9].ToString();



                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        public void MSME_Enduse_confirmation(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt;
            ResultModel stack = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(p_data);
                string[] dataArray = decryptedIData.Split('$');

                if (isSessionValid(dataArray[0]) == "1")
                {
                    dt = lb.proc_mobapp_ngl(67, dataArray[1]);
                    if (dt.Rows[0][0].ToString() == "111")
                    {
                        stack.status = "111";
                        stack.result = dt.Rows[0][1].ToString();

                    }
                    else
                    {
                        stack.status = dt.Rows[0][0].ToString();
                        stack.result = dt.Rows[0][1].ToString();
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "555";
                stack.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(stack));

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void MSME_Image_upload(string p_data, string image)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(p_data);
            string[] dataArray = decryptedIData.Split('$');



            if (isSessionValid(dataArray[0]) == "1")

            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();

                try
                {
                    dt = lb.proc_mobapp_ngl(68, dataArray[1]);

                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                    {

                        String pt = lb.DocumentUpload(dt.Rows[0][2].ToString(), image);
                        if (pt == "111")
                        {
                            resultModel.status = "111";
                            resultModel.result = dt.Rows[0][1].ToString();

                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "Something went wrong!!";
                        }

                    }
                    else
                    {
                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }
                }
                catch (Exception ex)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "555";
            }

            Context.Response.Write(js.Serialize(resultModel));

        }

        public class uploaded_documents
        {
            public string branch_id { get; set; }
            public string applicationid { get; set; }
            public string imageid { get; set; }
            public string image { get; set; }
            public string veri_empcode { get; set; }
            public string verifydate { get; set; }


        }

        public class uploadeddocuments
        {
            public List<uploaded_documents> get_uploaded_doc { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_image(string p_data)
        {
            js.MaxJsonLength = Int32.MaxValue;
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dT = new DataTable();
            DataSet dS = new DataSet();

            uploadeddocuments images = new uploadeddocuments();
            byte[] s;
            //string photo = "";


            List<uploaded_documents> get_uploaddoc = new List<uploaded_documents>();

            try
            {

                string decryptedIData = Decryptrel(p_data);
                string[] dataArray = decryptedIData.Split('$');
                if (isSessionValid(dataArray[0]) == "1")
                {
                    dT = lb.proc_mobapp_ngl(70, dataArray[1]);


                    if (dT.Rows.Count > 0)
                    {
                        for (int i = 0; i < dT.Rows.Count; i++)
                        {
                            s = (byte[])dT.Rows[0][3];

                            string str = Convert.ToBase64String(s);

                            if (!str.Equals(null))
                            {
                                uploaded_documents upload = new uploaded_documents();
                                upload.branch_id = dT.Rows[0][0].ToString();
                                upload.applicationid = dT.Rows[0][1].ToString();
                                upload.imageid = dT.Rows[0][2].ToString();
                                upload.veri_empcode = dT.Rows[0][4].ToString();
                                upload.verifydate = dT.Rows[0][5].ToString();
                                upload.image = str;


                                get_uploaddoc.Add(upload);

                                images.status = "111";
                            }
                            else
                            {
                                images.status = "110";
                            }

                        }
                        images.get_uploaded_doc = get_uploaddoc;
                        images.status = "111";
                        images.result = "Success!";
                    }

                    else
                    {
                        images.status = "222";
                        images.result = "No Images Found";
                    }

                }
                else
                {
                    images.status = "333";
                    images.result = "Session Expired";
                }


            }
            catch (Exception ex)
            {
                images.result = "Exception : " + ex.Message;
                images.status = "666";
            }

            Context.Response.Write(js.Serialize(images));

        }







        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void delete_image_msme(string p_data)

        {

            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel Out_result = new ResultModel();


            try
            {
                string decryptedIData = Decryptrel(p_data);
                string[] dataArray = decryptedIData.Split('$');
                if (isSessionValid(dataArray[0]) == "1")
                {
                    dt = lb.proc_mobapp_ngl(69, dataArray[1]);


                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0][0].ToString() == "111")
                        {
                            Out_result.status = dt.Rows[0][0].ToString();
                            Out_result.result = dt.Rows[0][1].ToString();
                            // success ---
                        }
                        else
                        {
                            Out_result.status = dt.Rows[0][0].ToString();
                            Out_result.result = dt.Rows[0][1].ToString();
                            // failed ---

                        }

                    }
                    else
                    {
                        Out_result.status = "333";
                        Out_result.result = "Error!";


                    }

                }
                else
                {
                    Out_result.status = "555";
                    Out_result.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                Out_result.status = "666";
                Out_result.result = "Exception : " + ex.Message;
            }

            Context.Response.Write(js.Serialize(Out_result));

        }
        // -------------118082 : Crf for MSME End User Verification Visit--Report------------------------------///
        public class get_msme_enduse_dtls_report
        {

            public List<msme_enduse_dtls_report> get_msme_data_report { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }
        public class msme_enduse_dtls_report
        {

            public string applicationid { get; set; }

            public string loan_id { get; set; }

            public string customer_name { get; set; }

            public string scheme_name { get; set; }

            public string loan_amt { get; set; }

            public string loan_date { get; set; }

            public string tenure { get; set; }

            public string roi { get; set; }

            public string BRANCH_NAME { get; set; }

            public string state_name { get; set; }

            public string remarks { get; set; }

            public string enduse_status { get; set; }

            public string veri_empcode { get; set; }

            public string emp_name { get; set; }

            public string uploaded_date { get; set; }

            public string empbranchname { get; set; }

            public string postname { get; set; }

            public string imageid { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void MSME_Enduse_confirmation_Report(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string from_date = data1.Split('~')[1].ToString();
            string to_date = data1.Split('~')[2].ToString();
            string inputString = from_date + '~' + to_date;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_msme_enduse_dtls_report data = new get_msme_enduse_dtls_report();
                List<msme_enduse_dtls_report> get_msme_data_report = new List<msme_enduse_dtls_report>();

                try
                {
                    dt = lb.proc_mobapp_ngl(94, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_msme_data_report.Add(new msme_enduse_dtls_report()
                            {

                                applicationid = dr[0].ToString(),

                                loan_id = dr[1].ToString(),

                                customer_name = dr[2].ToString(),

                                scheme_name = dr[3].ToString(),

                                loan_amt = dr[4].ToString(),

                                loan_date = dr[5].ToString(),

                                tenure = dr[6].ToString(),

                                roi = dr[7].ToString(),

                                BRANCH_NAME = dr[8].ToString(),

                                state_name = dr[9].ToString(),

                                remarks = dr[10].ToString(),

                                enduse_status = dr[11].ToString(),

                                veri_empcode = dr[12].ToString(),

                                emp_name = dr[13].ToString(),

                                uploaded_date = dr[14].ToString(),

                                empbranchname = dr[15].ToString(),

                                postname = dr[16].ToString(),

                                imageid = dr[17].ToString(),
                            });
                        }

                        data.get_msme_data_report = get_msme_data_report;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        // -------------118082 : Crf for MSME End User Verification Visit------------end------------------///


        //----------------CRF for Legal Recovery Calling module- Employee debit balance-----Girish--------118420--------start-----//



        //--Resigned staff call module HO----////
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_call_FzmList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string flag_id = data1.Split('~')[1].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_recover_br data = new get_recover_br();
                List<recover_br_list> recover_br_data = new List<recover_br_list>();

                //string inputString = flag_id + '~' + fzm_id;

                try
                {
                    dt = lb.proc_mobapp_ngl(71, flag_id);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            recover_br_data.Add(new recover_br_list()
                            {
                                fzm_id = dr[0].ToString(),
                                fzm = dr[1].ToString(),


                            });
                        }

                        data.recover_br_data = recover_br_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_call_RegList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string flag_id = data1.Split('~')[1].ToString();
            string fzm_id = data1.Split('~')[2].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_recover_br data = new get_recover_br();
                List<recover_br_list> recover_br_data = new List<recover_br_list>();

                string inputString = flag_id + '~' + fzm_id;

                try
                {
                    dt = lb.proc_mobapp_ngl(72, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            recover_br_data.Add(new recover_br_list()
                            {
                                reg_id = dr[0].ToString(),
                                reg_name = dr[1].ToString(),


                            });
                        }

                        data.recover_br_data = recover_br_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_call_AreaList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string flag_id = data1.Split('~')[1].ToString();
            string reg_id = data1.Split('~')[2].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_recover_br data = new get_recover_br();
                List<recover_br_list> recover_br_data = new List<recover_br_list>();

                string inputString = flag_id + '~' + reg_id;

                try
                {
                    dt = lb.proc_mobapp_ngl(73, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            recover_br_data.Add(new recover_br_list()
                            {
                                area_id = dr[0].ToString(),
                                area_name = dr[1].ToString(),


                            });
                        }

                        data.recover_br_data = recover_br_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class get_recover_br
        {

            public List<recover_br_list> recover_br_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class recover_br_list
        {

            public string branch_id { get; set; }
            public string branch_name { get; set; }
            public string area_id { get; set; }
            public string area_name { get; set; }
            public string reg_id { get; set; }
            public string reg_name { get; set; }
            public string fzm_id { get; set; }
            public string fzm { get; set; }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_call_BrList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string flag_id = data1.Split('~')[1].ToString();
            string area_id = data1.Split('~')[2].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_recover_br data = new get_recover_br();
                List<recover_br_list> recover_br_data = new List<recover_br_list>();

                string inputString = flag_id + '~' + area_id;

                try
                {
                    dt = lb.proc_mobapp_ngl(74, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            recover_br_data.Add(new recover_br_list()
                            {
                                branch_id = dr[0].ToString(),
                                branch_name = dr[1].ToString(),


                            });
                        }

                        data.recover_br_data = recover_br_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class get_recover_emp
        {

            public List<recover_emp_list> recover_emp_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class recover_emp_list
        {

            public string cust_id { get; set; }
            public string cust_id1 { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_call_List_ho(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string flag_id = data1.Split('~')[1].ToString();
            string branch_id = data1.Split('~')[2].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_recover_emp data = new get_recover_emp();
                List<recover_emp_list> recover_emp_data = new List<recover_emp_list>();

                string inputString = flag_id + '~' + branch_id;

                try
                {
                    dt = lb.proc_mobapp_ngl(75, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            recover_emp_data.Add(new recover_emp_list()
                            {
                                cust_id = dr[0].ToString(),
                                cust_id1 = dr[1].ToString(),

                            });
                        }

                        data.recover_emp_data = recover_emp_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_dtls_call_ho(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                recover_emp_dtls data = new recover_emp_dtls();
                List<recover_emp_dtls> recover_emp_data = new List<recover_emp_dtls>();

                //string inputString = from_dt + '~' + to_dt + '~' + state_id;


                try
                {
                    dt = lb.proc_mobapp_ngl(76, emp_code);

                    if (dt.Rows.Count > 0)

                    {

                        data.emp_name = dt.Rows[0][0].ToString();
                        data.res_phone = dt.Rows[0][1].ToString();
                        data.cont_phone = dt.Rows[0][2].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_amnt_call_ho(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                recover_emp_dtls data = new recover_emp_dtls();
                List<recover_emp_dtls> recover_emp_data = new List<recover_emp_dtls>();

                //string inputString = from_dt + '~' + to_dt + '~' + state_id;


                try
                {
                    dt = lb.proc_mobapp_ngl(77, emp_code);

                    if (dt.Rows.Count > 0)

                    {

                        data.amount = dt.Rows[0][0].ToString();

                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class recover_emp_dtls
        {

            public string emp_name { get; set; }
            public string res_phone { get; set; }
            public string cont_phone { get; set; }
            public string amount { get; set; }
            public string father_name { get; set; }
            public string perm_add1 { get; set; }
            public string landmark { get; set; }
            public string post_office { get; set; }
            public string district_name { get; set; }
            public string state_name { get; set; }
            public string pin_code { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Update_Emp_call_ho(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();
            string type_id = data1.Split('~')[2].ToString();
            string attend_sts = data1.Split('~')[3].ToString();
            string attend_response = data1.Split('~')[4].ToString();
            string not_attnd_reason = data1.Split('~')[5].ToString();
            string remark = data1.Split('~')[6].ToString();
            string branch_id = data1.Split('~')[7].ToString();
            string user_id = data1.Split('~')[8].ToString();

            //string inputString = emp_code + '~' + remark + '~' + branch_id + '~' + uploaded_by + '~' + rent_own + '~' + owner_ship + '~' + home_vist_dt + '~' + doc_name + '~' + visit_emp;

            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";

                try
                {
                    dt = lb.proc_mobapp_ngl(79, cust_id);

                    if (dt.Rows[0][0].ToString() == "111")
                    {

                        result = lb.PROC_RIIM_RECOVERY_CALL_HO(cust_id, type_id, attend_sts, attend_response, not_attnd_reason, remark, user_id, branch_id);

                        if (result == "Successfully Updated")
                        {

                            resultModel.status = "111";
                            resultModel.result = "Submitted Successfully";
                        }
                        else
                        {

                            resultModel.status = "222";
                            resultModel.result = "failed";
                        }
                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "failed";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }




        //--Resigned staff call module HO----////

        //---Resigned staff home visit assign HO----//

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_List_assign_ho(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string branch_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_recover_emp data = new get_recover_emp();
                List<recover_emp_list> recover_emp_data = new List<recover_emp_list>();

                //string inputString = from_dt + '~' + to_dt + '~' + state_id;

                try
                {
                    dt = lb.proc_mobapp_ngl(80, branch_id);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            recover_emp_data.Add(new recover_emp_list()
                            {
                                cust_id = dr[0].ToString(),
                                cust_id1 = dr[1].ToString(),

                            });
                        }

                        data.recover_emp_data = recover_emp_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_BrList_assign_ho(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_recover_br data = new get_recover_br();
                List<recover_br_list> recover_br_data = new List<recover_br_list>();

                //string inputString = from_dt + '~' + to_dt + '~' + state_id;

                try
                {
                    dt = lb.proc_mobapp_ngl(81, sessionId);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            recover_br_data.Add(new recover_br_list()
                            {
                                branch_id = dr[0].ToString(),
                                branch_name = dr[1].ToString(),


                            });
                        }

                        data.recover_br_data = recover_br_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_amnt_assign_ho(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                recover_emp_dtls data = new recover_emp_dtls();
                List<recover_emp_dtls> recover_emp_data = new List<recover_emp_dtls>();

                //string inputString = from_dt + '~' + to_dt + '~' + state_id;


                try
                {
                    dt = lb.proc_mobapp_ngl(83, emp_code);

                    if (dt.Rows.Count > 0)

                    {
                        data.amount = dt.Rows[0][0].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_dtls_assign_ho(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                recover_emp_dtls data = new recover_emp_dtls();
                List<recover_emp_dtls> recover_emp_data = new List<recover_emp_dtls>();

                //string inputString = from_dt + '~' + to_dt + '~' + state_id;


                try
                {
                    dt = lb.proc_mobapp_ngl(84, emp_code);

                    if (dt.Rows.Count > 0)

                    {

                        data.father_name = dt.Rows[0][0].ToString();
                        data.perm_add1 = dt.Rows[0][1].ToString();
                        data.landmark = dt.Rows[0][2].ToString();
                        data.post_office = dt.Rows[0][3].ToString();
                        data.district_name = dt.Rows[0][4].ToString();
                        data.state_name = dt.Rows[0][5].ToString();
                        data.pin_code = dt.Rows[0][6].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }



        public class recover_emp_div_dtls
        {

            public string fzm { get; set; }
            public string reg_name { get; set; }
            public string area_name { get; set; }
            public string BRANCH_NAME { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_assign_div_dtls(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                recover_emp_div_dtls data = new recover_emp_div_dtls();
                List<recover_emp_dtls> recover_emp_data = new List<recover_emp_dtls>();

                //string inputString = from_dt + '~' + to_dt + '~' + state_id;


                try
                {
                    dt = lb.proc_mobapp_ngl(85, emp_code);

                    if (dt.Rows.Count > 0)

                    {

                        data.fzm = dt.Rows[0][0].ToString();
                        data.reg_name = dt.Rows[0][1].ToString();
                        data.area_name = dt.Rows[0][2].ToString();
                        data.BRANCH_NAME = dt.Rows[0][3].ToString();



                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_assign_div_dtls_br(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string BRANCH_ID = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                recover_emp_div_dtls data = new recover_emp_div_dtls();
                List<recover_emp_dtls> recover_emp_data = new List<recover_emp_dtls>();

                //string inputString = from_dt + '~' + to_dt + '~' + state_id;


                try
                {
                    dt = lb.proc_mobapp_ngl(86, BRANCH_ID);

                    if (dt.Rows.Count > 0)

                    {

                        data.BRANCH_NAME = dt.Rows[0][0].ToString();
                        data.fzm = dt.Rows[0][1].ToString();
                        data.reg_name = dt.Rows[0][2].ToString();
                        data.area_name = dt.Rows[0][3].ToString();



                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Assign_home_visit_ho(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string employee_code = data1.Split('~')[1].ToString();
            string nearest_branch = data1.Split('~')[2].ToString();
            string assigned_by = data1.Split('~')[3].ToString();
            string call_gen_dt = data1.Split('~')[4].ToString();
            string REMARK = data1.Split('~')[5].ToString();
            string fzm = data1.Split('~')[6].ToString();


            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = employee_code + '~' + nearest_branch + '~' + assigned_by + '~' + call_gen_dt + '~' + REMARK + '~' + fzm;

                try
                {
                    dt = lb.proc_mobapp_ngl(88, inputString);

                    if (dt.Rows[0][0].ToString() == "111")
                    {


                        resultModel.status = "111";
                        resultModel.result = "Submitted Successfully";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "failed";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }
        //---Resigned staff home visit assign HO----//

        //---Resigned staff home visit branch----//

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_List_visit_br(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string Near_branch_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_recover_emp data = new get_recover_emp();
                List<recover_emp_list> recover_emp_data = new List<recover_emp_list>();

                //string inputString = from_dt + '~' + to_dt + '~' + state_id;

                try
                {
                    dt = lb.proc_mobapp_ngl(89, Near_branch_id);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            recover_emp_data.Add(new recover_emp_list()
                            {
                                cust_id = dr[0].ToString(),
                                cust_id1 = dr[1].ToString(),

                            });
                        }

                        data.recover_emp_data = recover_emp_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_dtls_visit_br(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                recover_emp_dtls data = new recover_emp_dtls();
                List<recover_emp_dtls> recover_emp_data = new List<recover_emp_dtls>();

                //string inputString = from_dt + '~' + to_dt + '~' + state_id;


                try
                {
                    dt = lb.proc_mobapp_ngl(90, emp_code);

                    if (dt.Rows.Count > 0)

                    {

                        data.emp_name = dt.Rows[0][0].ToString();
                        data.res_phone = dt.Rows[0][1].ToString();
                        data.cont_phone = dt.Rows[0][2].ToString();




                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_amnt_visit_br(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                recover_emp_dtls data = new recover_emp_dtls();
                List<recover_emp_dtls> recover_emp_data = new List<recover_emp_dtls>();

                //string inputString = from_dt + '~' + to_dt + '~' + state_id;


                try
                {
                    dt = lb.proc_mobapp_ngl(91, emp_code);

                    if (dt.Rows.Count > 0)

                    {

                        data.amount = dt.Rows[0][0].ToString();

                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_address_visit_br(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                recover_emp_dtls data = new recover_emp_dtls();
                List<recover_emp_dtls> recover_emp_data = new List<recover_emp_dtls>();

                //string inputString = from_dt + '~' + to_dt + '~' + state_id;


                try
                {
                    dt = lb.proc_mobapp_ngl(92, emp_code);

                    if (dt.Rows.Count > 0)

                    {

                        data.perm_add1 = dt.Rows[0][0].ToString();

                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }

            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Confirm_home_visit_Br(string p_data, string home_photo, string home_format_doc)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();
            string remark = data1.Split('~')[2].ToString();
            string branch_id = data1.Split('~')[3].ToString();
            string uploaded_by = data1.Split('~')[4].ToString();
            string rent_own = data1.Split('~')[5].ToString();
            string owner_ship = data1.Split('~')[6].ToString();
            string home_vist_dt = data1.Split('~')[7].ToString();
            string doc_name = data1.Split('~')[8].ToString();
            string home_format_doc_name = data1.Split('~')[9].ToString();
            string visit_emp = data1.Split('~')[10].ToString();
            string resign_branch_id = data1.Split('~')[11].ToString();
            string status = data1.Split('~')[12].ToString();

            string inputString = emp_code + '~' + remark + '~' + branch_id + '~' + uploaded_by + '~' + rent_own + '~' + owner_ship + '~' + home_vist_dt + '~' + doc_name + '~' + home_format_doc_name + '~' + visit_emp + '~' + resign_branch_id;

            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";

                try
                {
                    dt = lb.proc_mobapp_ngl(93, inputString);

                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                    {

                        result = lb.add_visit_photo(emp_code, home_photo, home_format_doc, remark, branch_id, uploaded_by, rent_own, owner_ship, home_vist_dt, doc_name, home_format_doc_name, visit_emp, resign_branch_id, status);

                        if (result == "111")
                        {

                            resultModel.status = "111";
                            resultModel.result = "Submitted Successfully";
                        }
                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "failed";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class call_date_dtls
        {

            public string call_gen_dt { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_call_gen_date(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                call_date_dtls data = new call_date_dtls();
                List<recover_emp_dtls> recover_emp_data = new List<recover_emp_dtls>();

                //string inputString = from_dt + '~' + to_dt + '~' + state_id;


                try
                {
                    dt = lb.proc_mobapp_ngl(87, emp_code);

                    if (dt.Rows.Count > 0)

                    {

                        data.call_gen_dt = dt.Rows[0][0].ToString();

                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        //---Resigned staff home visit branch----//

        //----------------CRF for Legal Recovery Calling module- Employee debit balance-----Girish--------118420--------end-----//


        //--------------------------------------- 118461 and 119037 : Dashboard report Department Wise Shortage and Attrition summary ------- Start ------------------------

        public class attrition_summary_dtls
        {

            public string deptId { get; set; }
            public string dept_Name { get; set; }
            public string approved_norms { get; set; }
            public string actual_norms { get; set; }
            public string ten_days_leave { get; set; }
            public string notice_period { get; set; }
            public string surplus_short { get; set; }
        }

        public class attrition_summary
        {

            public List<attrition_summary_dtls> attrition_summary_data { get; set; }
            public string approved_norms { get; set; }
            public string actual_norms { get; set; }
            public string ten_days_leave { get; set; }
            public string notice_period { get; set; }
            public string surplus_short { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_Attrition_summary(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                attrition_summary data = new attrition_summary();
                List<attrition_summary_dtls> attrition_summaryList = new List<attrition_summary_dtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(102, sessionId);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            attrition_summaryList.Add(new attrition_summary_dtls()
                            {
                                deptId = dr[0].ToString(),
                                dept_Name = dr[1].ToString(),
                                approved_norms = dr[2].ToString(),
                                actual_norms = dr[3].ToString(),
                                ten_days_leave = dr[4].ToString(),
                                notice_period = dr[5].ToString(),
                                surplus_short = dr[6].ToString(),

                            });
                        }

                        data.attrition_summary_data = attrition_summaryList;
                        dt1 = lb.proc_mobapp_ngl(105, sessionId);
                        data.approved_norms = dt1.Rows[0][0].ToString();
                        data.actual_norms = dt1.Rows[0][1].ToString();
                        data.ten_days_leave = dt1.Rows[0][2].ToString();
                        data.notice_period = dt1.Rows[0][3].ToString();
                        data.surplus_short = dt1.Rows[0][4].ToString();
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        //--------------------------------------- 118461 and 119037  : Dashboard report Department Wise Shortage and Attrition summary ------- End ------------------------

        public bool DownloadFile1(string fn, byte[] s)
        {
            System.Web.HttpResponse Response = System.Web.HttpContext.Current.Response;
            try
            {
                using (Stream file = File.OpenWrite(Server.MapPath("~/Images/" + fn)))
                {
                    file.Write(s, 0, s.Length);
                }
                return true;
            }
            catch (Exception e)
            {
                return false;
            }
        }


        // -----------------------118359------------------------Customer Id Creation in Door step Application--------start----------
        public class getcustomer
        {
            public string cust_id { get; set; }
            public string cust_name { get; set; }
            public string branch_id { get; set; }

            public string status { get; set; }
            public string result { get; set; }
        }


        [WebMethod]
        public void getcustomer_search(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel stack = new ResultModel();
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            getcustomer val = new getcustomer();

            try
            {
                string data1 = Decryptrel(data);
                string sessionId = data1.Split('~')[0].ToString();
                string customerid = data1.Split('~')[1].ToString();


                string inputString = customerid;
                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_mobapp_ngl(100, inputString);

                    if (dt.Rows.Count > 0)
                    {

                        val.cust_id = dt.Rows[0][0].ToString();
                        val.cust_name = dt.Rows[0][1].ToString();
                        val.branch_id = dt.Rows[0][2].ToString();
                        val.status = "111";
                        val.result = "Success";


                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "No Data found";
                    }



                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session is expired";
                }


            }
            catch (Exception ex)
            {
                stack.status = "666";
                stack.result = "Something went wrong";
            }


            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(stack));
            }
        }



        public class GetDocModel
        {
            public string status { get; set; }
            public string result { get; set; }
            public string kycphoto { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_cust_docs(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            GetDocModel resultModel = new GetDocModel();
            string data1 = Decryptrel(data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileQuest;
                string DocFilphoto = "";



                try
                {
                    dt = lb.proc_mobapp_ngl(95, cust_id);

                    if (dt.Rows.Count != 0)
                    {
                        string image = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image))
                        {
                            byte[] s;
                            s = (byte[])dt.Rows[0][0];
                            DocFileQuest = cust_id + "kyc.jpg";
                            if (DownloadFile1(DocFileQuest, s))
                            {
                                resultModel.status = "111";
                                resultModel.result = "Success";
                                resultModel.kycphoto = DocFileQuest;
                            }
                            else
                            {
                                resultModel.status = "222";
                                resultModel.result = "Failed";
                            }
                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "No Image found!";
                        }
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));

            }
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void delete_image_photo(string data)
        // 
        {

            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel Out_result = new ResultModel();


            try
            {
                string data1 = Decryptrel(data);
                string sessionId = data1.Split('~')[0].ToString();
                string customerid = data1.Split('~')[1].ToString();
                string inputString = customerid;
                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_mobapp_ngl(101, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0][0].ToString() == "111")
                        {
                            Out_result.status = dt.Rows[0][0].ToString();
                            Out_result.result = dt.Rows[0][1].ToString();
                            // success --- 
                        }
                        else
                        {
                            Out_result.status = dt.Rows[0][0].ToString();
                            Out_result.result = dt.Rows[0][1].ToString();
                            // failed --- 

                        }

                    }
                    else
                    {
                        Out_result.status = "333";
                        Out_result.result = "Error!";


                    }

                }
                else
                {
                    Out_result.status = "555";
                    Out_result.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                Out_result.status = "666";
                Out_result.result = "Exception : " + ex.Message;
            }

            Context.Response.Write(js.Serialize(Out_result));

        }


        public class get_cust_appr_dtls
        {

            public List<cust_appr_dtls> get_cust_appr_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class cust_appr_dtls
        {
            public string cust_id { get; set; }
            public string cust_name { get; set; }
            public string cust_branch { get; set; }


        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_cust_data_approvedetails(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(data);
            string sessionId = data1.Split('~')[0].ToString();
            string approverempcode = data1.Split('~')[1].ToString();
            string requestedbranchid = data1.Split('~')[2].ToString();
            string inputString = approverempcode + '~' + requestedbranchid;
            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_cust_appr_dtls data2 = new get_cust_appr_dtls();
                List<cust_appr_dtls> get_cust_appr_data = new List<cust_appr_dtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(98, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_cust_appr_data.Add(new cust_appr_dtls()
                            {

                                cust_id = dr[0].ToString(),
                                cust_name = dr[1].ToString(),
                                cust_branch = dr[2].ToString(),


                            });
                        }

                        data2.get_cust_appr_data = get_cust_appr_data;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {

                        data2.status = "222";
                        data2.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Insert_custkyc_docs(string data, string KYC_PHOTO)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(data);
            string sessionId = data1.Split('~')[0].ToString();
            string CUST_ID = data1.Split('~')[1].ToString();
            string CUST_NAME = data1.Split('~')[2].ToString();
            string REQUESTED_BRANCH = data1.Split('~')[3].ToString();
            string REQUESTED_BY = data1.Split('~')[4].ToString();
            string CUST_BRANCH = data1.Split('~')[5].ToString();


            String data2 = CUST_ID + "~" + CUST_NAME + "~" + REQUESTED_BRANCH + "~" + REQUESTED_BY + "~" + CUST_BRANCH;
            if (isSessionValid(sessionId) == "1")
            {
                //String result = "";
                try
                {
                    dt = lb.proc_mobapp_ngl(97, data2);
                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                    {
                        String pt = lb.add_kyc_photo(CUST_ID, KYC_PHOTO);
                        if (pt == "111")
                        {
                            resultModel.status = dt.Rows[0][0].ToString();
                            resultModel.result = dt.Rows[0][1].ToString();

                        }
                        else
                        {
                            resultModel.status = dt.Rows[0][0].ToString();
                            resultModel.result = dt.Rows[0][1].ToString();
                        }

                    }
                    else
                    {
                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }
                }
                catch (Exception ex)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "555";
            }

            Context.Response.Write(js.Serialize(resultModel));

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Confirm_cust_data_update(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();
            string aprvd_by = data1.Split('~')[2].ToString();
            string flag = data1.Split('~')[3].ToString();
            string remarks = data1.Split('~')[4].ToString();





            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                string inputString = cust_id + '~' + aprvd_by + '~' + flag + '~' + remarks;

                try
                {
                    dt = lb.proc_mobapp_ngl(99, inputString);

                    //if (dt.Rows.Count > 0)
                    if (flag == "1")
                    {


                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();

                    }
                    else
                    {

                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        //  --------------------------118359-----------------------------Customer Id Creation in Door step Application-----------End-------


        // -----------Girish---118627-----module for the KYC checklist in ESS App-----Start-------------------------------------//

        public class get_cust_list
        {

            public List<kyc_cust_list> kyc_cust_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class kyc_cust_list
        {

            public string cust_id { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Cust_kyc_checkList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            get_cust_list data = new get_cust_list();
            List<kyc_cust_list> kyc_cust_data = new List<kyc_cust_list>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string branch_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();


                //string inputString = flag_id + '~' + branch_id;

                try
                {
                    dt = lb.proc_kyc_check_list_check("", "Get_Customer", branch_id, "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            kyc_cust_data.Add(new kyc_cust_list()
                            {
                                cust_id = dr[0].ToString(),

                            });
                        }

                        data.kyc_cust_data = kyc_cust_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "777";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));

            }
        }



        public class kyc_cust_dtls
        {

            public string cust_id { get; set; }
            public string cust_name { get; set; }
            public string identity_name { get; set; }
            public string id_number { get; set; }
            public string aadhar_status { get; set; }
            public string status_id { get; set; }
            public string ah_remarks { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Cust_dtls_kycCheckList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            kyc_cust_dtls data = new kyc_cust_dtls();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();


                //string inputString = from_dt + '~' + to_dt + '~' + state_id;


                try
                {
                    dt = lb.proc_kyc_check_list_check("", "Get_CustDtls", cust_id, "");

                    if (dt.Rows.Count > 0)

                    {

                        data.cust_id = dt.Rows[0][0].ToString();
                        data.cust_name = dt.Rows[0][1].ToString();
                        data.identity_name = dt.Rows[0][2].ToString();
                        data.id_number = dt.Rows[0][3].ToString();
                        data.aadhar_status = dt.Rows[0][4].ToString();
                        data.status_id = dt.Rows[0][5].ToString();
                        data.ah_remarks = dt.Rows[0][6].ToString();




                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "777";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }
        }

        public class kyc_pan_cust_photo
        {
            public string kyc_pan_photo { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Cust_kyc_photo(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            kyc_pan_cust_photo data = new kyc_pan_cust_photo();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileName;
                string newData;


                try
                {
                    dt = lb.proc_kyc_check_list_check("", "Get_kyc", cust_id, "");

                    if (dt.Rows.Count != 0)
                    {
                        string image1 = dt.Rows[0][0].ToString();
                        //if (dt.Rows==null)
                        //if (dt.Rows.Equals(null) || !string.IsNullOrEmpty(image1))
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][0];

                                byte[] tiffjpgByte = justfuncJpegBytes(s);
                                DocFileName = cust_id + "-KYC.jpg";
                                if (DownloadFile2(DocFileName, tiffjpgByte))
                                {
                                    data.status = "111";
                                    data.result = "Success";
                                    data.kyc_pan_photo = DocFileName;

                                }
                                else
                                {
                                    data.status = "222";
                                    data.result = "Failed";
                                }
                            }
                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }


                    }
                    else
                    {
                        data.status = "333";
                        data.result = "No Image found!";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;
                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }
            }
            else
            {
                data.result = "Session Expired";
                data.status = "333";
                Context.Response.Write(js.Serialize(data));

            }
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Cust_pan_photo(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            kyc_pan_cust_photo data = new kyc_pan_cust_photo();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                string DocFileName;

                try
                {
                    dt = lb.proc_kyc_check_list_check("", "Get_pan_form60", cust_id, "");
                    if (dt.Rows.Count != 0)
                    {

                        string image1 = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "No PAN/Form 60 found for these customer") && !string.IsNullOrEmpty(image1))
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][0];

                                byte[] tiffjpgByte = justfuncJpegBytes(s);
                                DocFileName = cust_id + "-PAN.jpg";
                                if (DownloadFile2(DocFileName, tiffjpgByte))
                                {
                                    data.status = "111";
                                    data.result = "Success";
                                    data.kyc_pan_photo = DocFileName;

                                }
                                else
                                {
                                    data.status = "222";
                                    data.result = "Failed";
                                }
                            }
                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }
            }
            else
            {
                data.result = "Session Expired";
                data.status = "333";
                Context.Response.Write(js.Serialize(data));

            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Submit_kyc_checkList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string KYC_NME_MATCH = data1.Split('~')[1].ToString();
            string KYC_CPY_MARKED = data1.Split('~')[2].ToString();
            string AADHAR_STATUS = data1.Split('~')[3].ToString();
            string AADHAR_MASKED = data1.Split('~')[4].ToString();
            string PAN_FORM60_MARKED = data1.Split('~')[5].ToString();
            string BH_VERIFIED_BY = data1.Split('~')[6].ToString();
            string bh_remarks = data1.Split('~')[7].ToString();
            string cust_id = data1.Split('~')[8].ToString();


            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = KYC_NME_MATCH + '~' + KYC_CPY_MARKED + '~' + AADHAR_STATUS + '~' + AADHAR_MASKED + '~' + PAN_FORM60_MARKED + '~' + BH_VERIFIED_BY + '~' + bh_remarks + '~' + cust_id;

                try
                {
                    dt = lb.proc_kyc_check_list_check("", "confirm_kyc", inputString, "");

                    if (dt.Rows[0][0].ToString() == "Successfully confirmed and forwarded to AH/RM verification")
                    {

                        resultModel.status = "111";
                        resultModel.result = "Successfully confirmed and forwarded to AH/RM verification";

                    }
                    else if (dt.Rows[0][0].ToString() == "The updation is pending, please print the documents and upload in the customer module for completion")
                    {

                        resultModel.status = "222";
                        resultModel.result = "The updation is pending, please print the documents and upload in the customer module for completion";
                    }
                    else if (dt.Rows[0][0].ToString() == "Kindly complete all checklist")
                    {

                        resultModel.status = "222";
                        resultModel.result = "Kindly complete all checklist";
                    }

                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Login user is not found to be BH/ABH.Kindly login again";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class get_cust_list_ah
        {

            public List<kyc_cust_list_ah> kyc_cust_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class kyc_cust_list_ah
        {

            public string cust_id { get; set; }
            public string cust_dtls { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Cust_checkList_ah(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            get_cust_list_ah data = new get_cust_list_ah();
            List<kyc_cust_list_ah> kyc_cust_data = new List<kyc_cust_list_ah>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();


                //string inputString = flag_id + '~' + branch_id;

                try
                {
                    dt = lb.proc_kyc_check_list_check("", "Get_ah_load", emp_code, "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            kyc_cust_data.Add(new kyc_cust_list_ah()
                            {
                                cust_id = dr[0].ToString(),
                                cust_dtls = dr[0].ToString(),

                            });
                        }

                        data.kyc_cust_data = kyc_cust_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "777";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));

            }
        }


        public class Cust_dtls_ah
        {
            public string cust_id { get; set; }
            public string cust_name { get; set; }
            public string identity_name { get; set; }
            public string id_number { get; set; }
            public string aadhar_status { get; set; }
            public string aadhar_masked { get; set; }
            public string kyc_cpy_marked { get; set; }
            public string kyc_nme_match { get; set; }
            public string pan_form60_marked { get; set; }
            public string bh_remarks { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Cust_dtls_checkList_ah(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Cust_dtls_ah data = new Cust_dtls_ah();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();


                //string inputString = from_dt + '~' + to_dt + '~' + state_id;


                try
                {
                    dt = lb.proc_kyc_check_list_check("", "Get_CustDtls_ah", cust_id, "");

                    if (dt.Rows.Count > 0)

                    {

                        data.cust_id = dt.Rows[0][0].ToString();
                        data.cust_name = dt.Rows[0][1].ToString();
                        data.identity_name = dt.Rows[0][2].ToString();
                        data.id_number = dt.Rows[0][3].ToString();
                        data.aadhar_status = dt.Rows[0][4].ToString();
                        data.aadhar_masked = dt.Rows[0][5].ToString();
                        data.kyc_cpy_marked = dt.Rows[0][6].ToString();
                        data.kyc_nme_match = dt.Rows[0][7].ToString();
                        data.pan_form60_marked = dt.Rows[0][8].ToString();
                        data.bh_remarks = dt.Rows[0][9].ToString();

                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "777";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Appr_Rej_kyc_checkList_Ah(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string ah_verified_by = data1.Split('~')[1].ToString();
            string ah_remarks = data1.Split('~')[2].ToString();
            string cust_id = data1.Split('~')[3].ToString();
            string flag_id = data1.Split('~')[4].ToString();


            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = ah_verified_by + '~' + ah_remarks + '~' + cust_id + '~' + flag_id;

                try
                {
                    dt = lb.proc_kyc_check_list_check("", "Get_ah_app_rej", inputString, "");

                    if (dt.Rows[0][0].ToString() == "Approved")
                    {

                        resultModel.status = "111";
                        resultModel.result = "Approved Successfully";

                    }
                    else if (dt.Rows[0][0].ToString() == "Rejected")
                    {

                        resultModel.status = "222";
                        resultModel.result = "Rejected";
                    }
                    else
                    {

                        resultModel.status = "333";
                        resultModel.result = "Login user is not found to be AH/RM.Kindly login again";
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        // -----------Girish---118627-----module for the KYC checklist in ESS App-----end-------------------------------------//

        //-----------Girish---119521-CRF DN-10  and additional field of Bank details updation in DN -10 in ESS App-----Start---------//


        public class get_date_list_dn10
        {

            public List<date_list_dn10> dn10_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class date_list_dn10
        {

            public string date_id { get; set; }
            public string hotlist_dt { get; set; }
            public string reason_id { get; set; }
            public string reason_name { get; set; }
            public string pledge_id { get; set; }
            public string pledge_no { get; set; }




        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_DateList_dn10(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            get_date_list_dn10 data = new get_date_list_dn10();
            List<date_list_dn10> dn10_data = new List<date_list_dn10>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string branch_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();


                //string inputString = flag_id + '~' + branch_id;

                try
                {
                    dt = lb.proc_mobapp_ngl(106, branch_id);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            dn10_data.Add(new date_list_dn10()
                            {
                                date_id = dr[0].ToString(),
                                hotlist_dt = dr[1].ToString(),



                            });
                        }

                        data.dn10_data = dn10_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "777";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));

            }
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_ReasonList_dn10(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            get_date_list_dn10 data = new get_date_list_dn10();
            List<date_list_dn10> dn10_data = new List<date_list_dn10>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            //string branch_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();


                //string inputString = flag_id + '~' + branch_id;

                try
                {
                    dt = lb.proc_mobapp_ngl(107, sessionId);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            dn10_data.Add(new date_list_dn10()
                            {
                                reason_id = dr[0].ToString(),
                                reason_name = dr[1].ToString(),


                            });
                        }

                        data.dn10_data = dn10_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "777";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));

            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_PledgeList_dn10(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            get_date_list_dn10 data = new get_date_list_dn10();
            List<date_list_dn10> dn10_data = new List<date_list_dn10>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string branch_id = data1.Split('~')[1].ToString();
            string hotlist_dt = data1.Split('~')[2].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();


                string inputString = branch_id + '~' + hotlist_dt;

                try
                {
                    dt = lb.proc_mobapp_ngl(108, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            dn10_data.Add(new date_list_dn10()
                            {
                                pledge_id = dr[0].ToString(),
                                pledge_no = dr[1].ToString(),



                            });
                        }

                        data.dn10_data = dn10_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "777";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));

            }
        }
        public class Cust_dtls_dn10
        {
            public string cust_id { get; set; }
            public string cust_name { get; set; }
            public string pledge_value { get; set; }
            public string tra_dt { get; set; }
            public string phone1 { get; set; }
            public string phone2 { get; set; }
            public string emp_name { get; set; }





            public string status { get; set; }
            public string result { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Cust_dtls_dn10(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Cust_dtls_dn10 data = new Cust_dtls_dn10();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string pledge_no = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();


                //string inputString = from_dt + '~' + to_dt + '~' + state_id;


                try
                {
                    dt = lb.proc_mobapp_ngl(110, pledge_no);

                    if (dt.Rows.Count > 0)

                    {

                        data.cust_id = dt.Rows[0][0].ToString();
                        data.cust_name = dt.Rows[0][1].ToString();
                        data.pledge_value = dt.Rows[0][2].ToString();
                        data.tra_dt = dt.Rows[0][3].ToString();
                        data.phone1 = dt.Rows[0][4].ToString();
                        data.phone2 = dt.Rows[0][5].ToString();

                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "777";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Submit_dn10(string p_data, string image)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string user_id = data1.Split('~')[1].ToString();
            string hotlist_dt = data1.Split('~')[2].ToString();
            string pledge_no = data1.Split('~')[3].ToString();
            string dn10_status = data1.Split('~')[4].ToString();
            string Employee_number = data1.Split('~')[5].ToString();
            string Employee_name = data1.Split('~')[6].ToString();
            string customer_feedback = data1.Split('~')[7].ToString();
            string visit_date = data1.Split('~')[8].ToString();
            string visit_time = data1.Split('~')[9].ToString();
            string HOME_VISIT_STS = data1.Split('~')[10].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                string inputString = user_id + '~' + hotlist_dt + '~' + pledge_no + '~' + dn10_status + '~' + Employee_number + '~' + Employee_name + '~' + customer_feedback + '~' + visit_date + '~' + visit_time + '~' + HOME_VISIT_STS;
                string inputString1 = hotlist_dt + '~' + pledge_no;
                try
                {
                    dt = lb.proc_mobapp_ngl(111, inputString);

                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                    {

                        String pt = lb.ImageUpload_dn10(pledge_no, image);
                        if (pt == "111")
                        {
                            resultModel.status = "111";
                            resultModel.result = "Confirmed Successfully!!!";

                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "Already updated!!";
                        }

                    }
                    else
                    {
                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }
                }
                catch (Exception ex)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "555";
            }

            Context.Response.Write(js.Serialize(resultModel));

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_dtls_dn10(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Cust_dtls_dn10 data = new Cust_dtls_dn10();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();




                try
                {
                    dt = lb.proc_mobapp_ngl(112, emp_code);

                    if (dt.Rows.Count > 0)

                    {

                        data.emp_name = dt.Rows[0][0].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "777";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Save_BankDetails_dn10(string p_data, string image)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string ifsc_code = data1.Split('~')[1].ToString();
            string beneficiary_account = data1.Split('~')[2].ToString();
            string cust_name = data1.Split('~')[3].ToString();
            string beneficiary_branch = data1.Split('~')[4].ToString();
            string cust_id = data1.Split('~')[5].ToString();
            string user_id = data1.Split('~')[6].ToString();
            string acc_type = data1.Split('~')[7].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                string inputString = ifsc_code + '~' + beneficiary_account + '~' + cust_name + '~' + beneficiary_branch + '~' + cust_id + '~' + user_id + '~' + acc_type;
                try
                {
                    dt = lb.proc_mobapp_ngl(113, inputString);

                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                    {

                        String pt = lb.Passbook_Upload_dn10(cust_id, image);
                        if (pt == "111")
                        {
                            resultModel.status = "111";
                            resultModel.result = "Confirmed Successfully!!!";

                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "Account number exists!!";
                        }

                    }
                    else
                    {
                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }
                }
                catch (Exception ex)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "555";
            }

            Context.Response.Write(js.Serialize(resultModel));

        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Neft_details(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                try
                {
                    dt = lb.proc_mobapp_ngl(115, cust_id);

                    if (dt.Rows[0][0].ToString() == "111")
                    {

                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();

                    }
                    else
                    {

                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }



                }
                catch (Exception ex)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "555";
            }

            Context.Response.Write(js.Serialize(resultModel));

        }

        //-----------Girish---119521-CRF DN-10  and additional field of Bank details updation in DN -10 in ESS App-----end---------//

        //  -------------------------------------119533---------------start-------------------------Disbursment and Collection report in ESS App------------------

        public class get_disb_coll_dtls
        {

            public List<disb_coll_dtls> get_disb_coll_data { get; set; }
            public string t_disbursement { get; set; }

            public string t_total_coll { get; set; }
            public string t_coll_per { get; set; }

            public string t_present_os { get; set; }

            public string t_perc { get; set; }
            public string t_interest_paid_os { get; set; }
            public string t_percent { get; set; }

            public string t_interest_not_paid_os { get; set; }
            public string t_percentage { get; set; }
            public string t_highrisk { get; set; }
            public string t_highrisk1 { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }

        public class disb_coll_dtls
        {
            public string name { get; set; }
            public string disbursement { get; set; }
            public string disb_totlake { get; set; }
            public string percentage1 { get; set; }
            public string IN_LAKE { get; set; }
            public string percentage2 { get; set; }
            public string OS_LAKE { get; set; }
            public string percentage3 { get; set; }
            public string TOT_LAKE { get; set; }
            public string percentage4 { get; set; }
            public string disb_dt { get; set; }
            public string id { get; set; }
            public string mtm { get; set; }
            public string target { get; set; }


        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_disbursment_collection_report(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(data);
            string sessionId = data1.Split('~')[0].ToString();
            string flag = data1.Split('~')[1].ToString();
            string disb_dt = data1.Split('~')[2].ToString();
            string id = data1.Split('~')[3].ToString();
            string inputString = flag + '~' + disb_dt + '~' + id;
            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                get_disb_coll_dtls data2 = new get_disb_coll_dtls();
                List<disb_coll_dtls> get_disb_col_data = new List<disb_coll_dtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(116, inputString);
                    dt1 = lb.proc_mobapp_ngl(117, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_disb_col_data.Add(new disb_coll_dtls()
                            {

                                name = dr[0].ToString(),
                                disbursement = dr[1].ToString(),
                                disb_totlake = dr[2].ToString(),
                                percentage1 = dr[3].ToString(),
                                IN_LAKE = dr[4].ToString(),
                                percentage2 = dr[5].ToString(),
                                OS_LAKE = dr[6].ToString(),
                                percentage3 = dr[7].ToString(),
                                TOT_LAKE = dr[8].ToString(),
                                percentage4 = dr[9].ToString(),
                                disb_dt = dr[10].ToString(),
                                id = dr[11].ToString(),
                                mtm = dr[12].ToString(),
                                target = dr[13].ToString()


                            });
                        }
                        data2.t_disbursement = dt1.Rows[0][0].ToString();
                        data2.t_total_coll = dt1.Rows[0][1].ToString();
                        data2.t_coll_per = dt1.Rows[0][2].ToString();
                        data2.t_present_os = dt1.Rows[0][3].ToString();
                        data2.t_perc = dt1.Rows[0][4].ToString();
                        data2.t_interest_paid_os = dt1.Rows[0][5].ToString();
                        data2.t_percent = dt1.Rows[0][6].ToString();
                        data2.t_interest_not_paid_os = dt1.Rows[0][7].ToString();
                        data2.t_percentage = dt1.Rows[0][8].ToString();
                        data2.t_highrisk = dt1.Rows[0][9].ToString();
                        data2.t_highrisk1 = dt1.Rows[0][10].ToString();

                        data2.get_disb_coll_data = get_disb_col_data;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {

                        data2.status = "222";
                        data2.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }






        //  -------------------------------------119533---------------end-------------------------Disbursment and Collection report in ESS App-----------------
        //-----------Girish---119528-CRF for KYC checklist reverification in ESS App-------------------------------start------------//

        public class get_fzm_list
        {

            public List<fzm_list> get_fzm_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class fzm_list
        {
            public string fzm_id { get; set; }
            public string fzm_name { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_FZM_List(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_fzm_list data = new get_fzm_list();
                List<fzm_list> get_fzm_data = new List<fzm_list>();

                try
                {
                    dt = lb.proc_kyc_pan_reverification(1, sessionId);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_fzm_data.Add(new fzm_list()
                            {
                                fzm_id = dr[0].ToString(),
                                fzm_name = dr[1].ToString(),

                            });
                        }

                        data.get_fzm_data = get_fzm_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class get_rm_list
        {

            public List<rm_list> get_rm_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class rm_list
        {
            public string reg_id { get; set; }
            public string reg_name { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_RM_List(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string fzm = data1.Split('~')[1].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_rm_list data = new get_rm_list();
                List<rm_list> get_rm_data = new List<rm_list>();

                try
                {
                    dt = lb.proc_kyc_pan_reverification(2, fzm);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_rm_data.Add(new rm_list()
                            {
                                reg_id = dr[0].ToString(),
                                reg_name = dr[1].ToString(),

                            });
                        }

                        data.get_rm_data = get_rm_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class get_Reverify_list
        {

            public List<Reverify_list> Cust_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class Reverify_list
        {
            public string cust_id { get; set; }
            public string cust_ids { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Cust_Reverification(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('$')[0].ToString();
            string region_id = data1.Split('$')[1].ToString();
            string from_dt = data1.Split('$')[2].ToString();
            string to_dt = data1.Split('$')[3].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_Reverify_list data = new get_Reverify_list();
                List<Reverify_list> Cust_data = new List<Reverify_list>();

                string inputString = region_id + '$' + from_dt + '$' + to_dt;

                try
                {
                    dt = lb.proc_kyc_pan_reverification(3, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            Cust_data.Add(new Reverify_list()
                            {
                                cust_id = dr[0].ToString(),
                                cust_ids = dr[1].ToString(),

                            });
                        }

                        data.Cust_data = Cust_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class Cust_kyc
        {
            public string kyc_photo { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_kyc_reverify(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Cust_kyc data = new Cust_kyc();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileName;
                string newData;


                try
                {
                    dt = lb.proc_kyc_pan_reverification(4, cust_id);

                    if (dt.Rows.Count != 0)
                    {
                        string image1 = dt.Rows[0][0].ToString();

                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][0];

                                byte[] tiffjpgByte = justfuncJpegBytes(s);
                                DocFileName = cust_id + "-KYC.jpg";
                                if (DownloadFile2(DocFileName, tiffjpgByte))
                                {
                                    data.status = "111";
                                    data.result = "Success";
                                    data.kyc_photo = DocFileName;

                                }
                                else
                                {
                                    data.status = "222";
                                    data.result = "Failed";
                                }
                            }
                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }


                    }
                    else
                    {
                        data.status = "333";
                        data.result = "No Image found!";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;
                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }
            }
            else
            {
                data.result = "Session Expired";
                data.status = "333";
                Context.Response.Write(js.Serialize(data));

            }
        }

        public class Cust_dtls
        {
            public string cust_id { get; set; }
            public string cust_name { get; set; }
            public string address { get; set; }
            public string date_of_birth { get; set; }
            public string identity_dtls { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Cust_dtls_reverify(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Cust_dtls data = new Cust_dtls();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('$')[0].ToString();
            string cust_id = data1.Split('$')[1].ToString();
            string btn_id = data1.Split('$')[2].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                string inputString = cust_id + '$' + btn_id;


                try
                {
                    dt = lb.proc_kyc_pan_reverification(5, inputString);

                    if (dt.Rows.Count > 0)

                    {

                        data.cust_id = dt.Rows[0][0].ToString();
                        data.cust_name = dt.Rows[0][1].ToString();
                        data.address = dt.Rows[0][2].ToString();
                        data.date_of_birth = dt.Rows[0][3].ToString();
                        data.identity_dtls = dt.Rows[0][4].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "777";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Appr_Rej_kyc_Reverification(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('$')[0].ToString();
            string cust_id = data1.Split('$')[1].ToString();
            string QONE = data1.Split('$')[2].ToString();
            string QTWO = data1.Split('$')[3].ToString();
            string QTHREE = data1.Split('$')[4].ToString();
            string QFOUR = data1.Split('$')[5].ToString();
            string QFIVE = data1.Split('$')[6].ToString();
            string QSIX = data1.Split('$')[7].ToString();
            string QSVN = data1.Split('$')[8].ToString();
            string QEIGHT = data1.Split('$')[9].ToString();
            string QNINE = data1.Split('$')[10].ToString();
            string QTEN = data1.Split('$')[11].ToString();
            string QELEVEN = data1.Split('$')[12].ToString();
            string STATUS = data1.Split('$')[13].ToString();
            string VERIFY_BY = data1.Split('$')[14].ToString();
            string remark = data1.Split('$')[15].ToString();
            string cust_name = data1.Split('$')[16].ToString();
            string dob = data1.Split('$')[17].ToString();


            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = cust_id + '$' + QONE + '$' + QTWO + '$' + QTHREE + '$' + QFOUR + '$' + QFIVE + '$' + QSIX + '$' + QSVN + '$' + QEIGHT + '$' + QNINE + '$' + QTEN + '$' + QELEVEN + '$' + STATUS + '$' + VERIFY_BY + '$' + remark + '$' + cust_name + '$' + dob;

                try
                {
                    dt = lb.proc_kyc_pan_reverification(6, inputString);

                    if (dt.Rows[0][0].ToString() == "Successfully Approved !!")
                    {

                        resultModel.status = "111";
                        resultModel.result = "Approved Successfully";

                    }
                    else if (dt.Rows[0][0].ToString() == "Successfully Rejected !!")
                    {

                        resultModel.status = "222";
                        resultModel.result = "Rejected";
                    }
                    else
                    {

                        resultModel.status = "333";
                        resultModel.result = "Already Requested !!";
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Pan_verification(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('$')[0].ToString();
            string cust_id = data1.Split('$')[1].ToString();
            string QONE = data1.Split('$')[2].ToString();
            string QTWO = data1.Split('$')[3].ToString();
            string QTHREE = data1.Split('$')[4].ToString();
            string STATUS = data1.Split('$')[5].ToString();
            string VERIFY_BY = data1.Split('$')[6].ToString();
            string remark = data1.Split('$')[7].ToString();
            string cust_name = data1.Split('$')[8].ToString();
            string dob = data1.Split('$')[9].ToString();


            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = cust_id + '$' + QONE + '$' + QTWO + '$' + QTHREE + '$' + STATUS + '$' + VERIFY_BY + '$' + remark + '$' + cust_name + '$' + dob;

                try
                {
                    dt = lb.proc_kyc_pan_reverification(7, inputString);

                    if (dt.Rows[0][0].ToString() == "Successfully Approved !!")
                    {

                        resultModel.status = "111";
                        resultModel.result = "Approved Successfully";

                    }
                    else if (dt.Rows[0][0].ToString() == "Successfully Rejected !!")
                    {

                        resultModel.status = "222";
                        resultModel.result = "Rejected";
                    }
                    else
                    {

                        resultModel.status = "333";
                        resultModel.result = "Something went wrong !!";
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        public class Cust_pan
        {
            public string pan_photo { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_pan_reverify(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Cust_pan data = new Cust_pan();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileName;
                string newData;


                try
                {
                    dt = lb.proc_kyc_pan_reverification(8, cust_id);

                    if (dt.Rows.Count != 0)
                    {
                        string image1 = dt.Rows[0][0].ToString();

                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][0];

                                byte[] tiffjpgByte = justfuncJpegBytes(s);
                                DocFileName = cust_id + "-Pan.jpg";
                                if (DownloadFile2(DocFileName, tiffjpgByte))
                                {
                                    data.status = "111";
                                    data.result = "Success";
                                    data.pan_photo = DocFileName;

                                }
                                else
                                {
                                    data.status = "222";
                                    data.result = "Failed";
                                }
                            }
                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }


                    }
                    else
                    {
                        data.status = "333";
                        data.result = "No Image found!";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;
                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }
            }
            else
            {
                data.result = "Session Expired";
                data.status = "333";
                Context.Response.Write(js.Serialize(data));

            }
        }


        public class get_pan_list
        {

            public List<pan_list> pan_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class pan_list
        {
            public string cust_id { get; set; }
            public string cust_ids { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Pan_Cust_List(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('$')[0].ToString();
            string region_id = data1.Split('$')[1].ToString();
            string from_dt = data1.Split('$')[2].ToString();
            string to_dt = data1.Split('$')[3].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_pan_list data = new get_pan_list();
                List<pan_list> pan_data = new List<pan_list>();

                string inputString = region_id + '$' + from_dt + '$' + to_dt;

                try
                {
                    dt = lb.proc_kyc_pan_reverification(9, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            pan_data.Add(new pan_list()
                            {
                                cust_id = dr[0].ToString(),
                                cust_ids = dr[1].ToString(),

                            });
                        }

                        data.pan_data = pan_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        //-----------Girish---119528-CRF for KYC checklist reverification in ESS App-------------------------------end------------//

        //-------Simi ---119610 -Marketing Activity Modification for MHF in ESS App -----Start--------------------------------------------

        public class get_branchList_dtls
        {

            public List<branchList_dtls> get_branch_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class branchList_dtls
        {

            public string id { get; set; }
            public string name { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_branchListForMA(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string flag = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_branchList_dtls data = new get_branchList_dtls();
                List<branchList_dtls> get_branch_data = new List<branchList_dtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(118, flag);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_branch_data.Add(new branchList_dtls()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data.get_branch_data = get_branch_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {
                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;
                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        public class get_report_dtls
        {

            public List<reportList_dtls> get_report_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class reportList_dtls
        {

            public string id { get; set; }
            public string name { get; set; }
            public string po_subject { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_reportListForMA(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string flag = data1.Split('~')[1].ToString();
            string startDate = data1.Split('~')[2].ToString();
            string endDate = data1.Split('~')[3].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_report_dtls data = new get_report_dtls();
                List<reportList_dtls> get_report_data = new List<reportList_dtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(119, flag + "~" + startDate + "~" + endDate);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_report_data.Add(new reportList_dtls()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                                po_subject = dr[2].ToString(),
                            });
                        }

                        data.get_report_data = get_report_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {
                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;
                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class MarketingDetails
        {
            public string id { get; set; }
            public string enter_date { get; set; }
            public string emp_code { get; set; }
            public string image_id { get; set; }
            public string MAstatus { get; set; }
            public string br_id { get; set; }
            public string br_name { get; set; }
            public string apprv_dt { get; set; }
            public string approved_by { get; set; }

        }

        public class get_MarketingReport_dtls
        {

            public List<MarketingDetails> get_report_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_MarketingDetails(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            get_MarketingReport_dtls data = new get_MarketingReport_dtls();
            List<MarketingDetails> get_report_data = new List<MarketingDetails>();


            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string flag = data1.Split('~')[1].ToString();
            string id = data1.Split('~')[2].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    dt = lb.proc_mobapp_ngl(120, flag + "~" + id);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_report_data.Add(new MarketingDetails()
                            {
                                id = dr[0].ToString(),
                                enter_date = dr[1].ToString(),
                                emp_code = dr[2].ToString(),
                                image_id = dr[3].ToString(),
                                MAstatus = dr[4].ToString(),
                                br_id = dr[5].ToString(),
                                br_name = dr[6].ToString(),
                                apprv_dt = dr[7].ToString(),
                                approved_by = dr[8].ToString(),
                            });
                        }

                        data.get_report_data = get_report_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {
                        data.status = "222";
                        data.result = "No data found";
                    }



                }

                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;
                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        public class get_MarketingImages
        {
            public string image { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_MarketingActivityImage(string p_data)
        {
            js.MaxJsonLength = Int32.MaxValue;
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataSet dS = new DataSet();

            get_MarketingImages images = new get_MarketingImages();
            byte[] s;

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string flag = data1.Split('~')[1].ToString();
            string id = data1.Split('~')[2].ToString();

            try
            {
                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_mobapp_ngl(121, flag + "~" + id);


                    if (dt.Rows.Count > 0)
                    {
                        s = (byte[])dt.Rows[0][1];

                        string str = Convert.ToBase64String(s);

                        if (!str.Equals(null))
                        {
                            images.image = str;
                            images.status = "111";
                            images.result = "Success!";
                        }
                        else
                        {
                            images.status = "110";
                            images.result = "Success!";
                        }
                    }

                    else
                    {
                        images.status = "222";
                        images.result = "No Images Found";
                    }

                }
                else
                {
                    images.status = "333";
                    images.result = "Session Expired";
                }


            }
            catch (Exception ex)
            {
                images.result = "Exception : " + ex.Message;
                images.status = "666";
            }

            Context.Response.Write(js.Serialize(images));

        }






        //-----------Simi ---119610 -Marketing Activity Modification for MHF in ESS App -----End--------------------------------------------


        //-----------Girish---119709-CRF for Lead management system in ESS App-------------------------------start ------------//



        public class get_scheme_list
        {

            public List<scheme_list> scheme_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class scheme_list
        {
            public string scheme_name { get; set; }
            public string scheme_name1 { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Spl_Scheme_List(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_scheme_list data = new get_scheme_list();
                List<scheme_list> scheme_data = new List<scheme_list>();

                try
                {
                    dt = lb.spl_proc_LEADCONFIRMATION("FillScheme", "", "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            scheme_data.Add(new scheme_list()
                            {
                                scheme_name = dr[0].ToString(),
                                scheme_name1 = dr[1].ToString(),

                            });
                        }

                        data.scheme_data = scheme_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        public class get_Doc_list
        {

            public List<Doc_list> doc_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class Doc_list
        {
            public string description { get; set; }
            public string description1 { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Doc_name_List(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string lead_id = data1.Split('^')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_Doc_list data = new get_Doc_list();
                List<Doc_list> doc_data = new List<Doc_list>();

                try
                {
                    dt = lb.spl_proc_LEADCONFIRMATION("DocnameDrop", lead_id, "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            doc_data.Add(new Doc_list()
                            {
                                description = dr[0].ToString(),
                                description1 = dr[1].ToString(),

                            });
                        }

                        data.doc_data = doc_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        public class get_confrm_list
        {

            public List<confrm_list> confrm_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class confrm_list
        {
            public string branchname { get; set; }
            public string customername { get; set; }
            public string requiredamount { get; set; }
            public string customerprofile { get; set; }
            public string leaddate { get; set; }
            public string sourcename { get; set; }
            public string contactnumber { get; set; }
            public string usageofloan { get; set; }
            public string lead_id { get; set; }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_SplLeadList_confirmation(string p_data, string flag)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string from_dt = data1.Split('^')[1].ToString();
            string to_dt = data1.Split('^')[2].ToString();
            string employeecode = data1.Split('^')[3].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_confrm_list data = new get_confrm_list();
                List<confrm_list> confrm_data = new List<confrm_list>();

                string inputString = from_dt + '^' + to_dt;
                try
                {
                    if (flag == "1")
                    {
                        dt = lb.spl_proc_LEADCONFIRMATION("getdata", inputString, employeecode);

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                confrm_data.Add(new confrm_list()
                                {
                                    branchname = dr[0].ToString(),
                                    customername = dr[1].ToString(),
                                    requiredamount = dr[2].ToString(),
                                    customerprofile = dr[3].ToString(),
                                    leaddate = dr[4].ToString(),
                                    sourcename = dr[5].ToString(),
                                    contactnumber = dr[6].ToString(),
                                    usageofloan = dr[7].ToString(),
                                    lead_id = dr[8].ToString(),

                                });
                            }

                            data.confrm_data = confrm_data;
                            data.status = "111";
                            data.result = "Success";
                        }
                        else
                        {

                            data.status = "222";
                            data.result = "No data found";
                        }
                    }
                    else if (flag == "2")
                    {
                        dt = lb.spl_proc_LEADCONFIRMATION("getdata1", inputString, employeecode);

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                confrm_data.Add(new confrm_list()
                                {
                                    branchname = dr[0].ToString(),
                                    customername = dr[1].ToString(),
                                    requiredamount = dr[2].ToString(),
                                    customerprofile = dr[3].ToString(),
                                    leaddate = dr[4].ToString(),
                                    sourcename = dr[5].ToString(),
                                    contactnumber = dr[6].ToString(),
                                    usageofloan = dr[7].ToString(),
                                    lead_id = dr[8].ToString(),

                                });
                            }

                            data.confrm_data = confrm_data;
                            data.status = "111";
                            data.result = "Success";
                        }
                        else
                        {

                            data.status = "222";
                            data.result = "No data found";
                        }

                    }
                    else if (flag == "3")
                    {
                        dt = lb.proc_mobapp_ngl(-122, employeecode);

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                confrm_data.Add(new confrm_list()
                                {
                                    branchname = dr[0].ToString(),
                                    customername = dr[1].ToString(),
                                    requiredamount = dr[2].ToString(),
                                    customerprofile = dr[3].ToString(),
                                    leaddate = dr[4].ToString(),
                                    sourcename = dr[5].ToString(),
                                    contactnumber = dr[6].ToString(),
                                    usageofloan = dr[7].ToString(),
                                    lead_id = dr[8].ToString(),

                                });
                            }

                            data.confrm_data = confrm_data;
                            data.status = "111";
                            data.result = "Success";
                        }
                        else
                        {

                            data.status = "222";
                            data.result = "No data found";
                        }

                    }
                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }
        public class fill_dtls
        {
            public string cust_dtls { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Spl_Fill_dtls(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            fill_dtls data = new fill_dtls();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string lead_id = data1.Split('^')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();


                try
                {
                    dt = lb.spl_proc_LEADCONFIRMATION("FILLDETAILS", lead_id, "");

                    if (dt.Rows.Count > 0)

                    {

                        data.cust_dtls = dt.Rows[0][0].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "777";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void SPL_Lead_verify(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string branchname = data1.Split('^')[1].ToString();
            string customername = data1.Split('^')[2].ToString();
            string requiredamount = data1.Split('^')[3].ToString();
            string contactnumber = data1.Split('^')[4].ToString();
            string employeecode = data1.Split('^')[5].ToString();
            string reason = data1.Split('^')[6].ToString();
            string emailid = data1.Split('^')[7].ToString();
            string status = data1.Split('^')[8].ToString();


            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = branchname + '^' + customername + '^' + requiredamount + '^' + contactnumber + '^' + employeecode + '^' + reason + '^' + emailid + '^' + status;

                try
                {
                    dt = lb.spl_proc_LEADCONFIRMATION("LEADVERIFY", inputString, "");

                    if (dt.Rows[0][0].ToString() == "Lead Confirmed Complete the followup!!!")
                    {

                        resultModel.status = "111";
                        resultModel.result = "Lead Confirmed Complete the followup!!!";

                    }
                    else if (dt.Rows[0][0].ToString() == "Lead Rejected!!!")
                    {

                        resultModel.status = "222";
                        resultModel.result = "Lead Rejected!!!";
                    }
                    else
                    {

                        resultModel.status = "333";
                        resultModel.result = "Something went wrong !!";
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void SPL_Lead_confirmation(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string scheme = data1.Split('^')[1].ToString();
            string customerincome = data1.Split('^')[2].ToString();
            string aadhar = data1.Split('^')[3].ToString();
            string otherkyc = data1.Split('^')[4].ToString();
            string pan = data1.Split('^')[5].ToString();
            string remark1 = data1.Split('^')[6].ToString();
            string lead_id = data1.Split('^')[7].ToString();

            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = scheme + '^' + customerincome + '^' + aadhar + '^' + otherkyc + '^' + pan + '^' + remark1;
                try
                {
                    dt = lb.spl_proc_LEADCONFIRMATION("LEADCONFIRM", lead_id, inputString);

                    if (dt.Rows[0][0].ToString() == "111")
                    {

                        resultModel.status = "111";
                        resultModel.result = "Lead Confirmed Successfully!!!";

                    }

                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Please Upload All documents to Confirm !!";
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void SPL_Lead_ReConfirmation(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string lead_id = data1.Split('^')[1].ToString();
            string remark1 = data1.Split('^')[2].ToString();


            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";

                try
                {
                    dt = lb.spl_proc_LEADCONFIRMATION("LEADRECONFIRM", lead_id, remark1);

                    if (dt.Rows[0][0].ToString() == "LEAD RECONFIRMED!!!")
                    {

                        resultModel.status = "111";
                        resultModel.result = "LEAD RECONFIRMED!!!";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Lead Not confirmed!!!";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void SPL_Lead_ReReject(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string lead_id = data1.Split('^')[1].ToString();
            string reason = data1.Split('^')[2].ToString();


            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";

                try
                {
                    dt = lb.spl_proc_LEADCONFIRMATION("LEADREREJECT", lead_id, reason);

                    if (dt.Rows[0][0].ToString() == "LEAD REJECTED!!!")
                    {

                        resultModel.status = "222";
                        resultModel.result = "LEAD REJECTED!!!";

                    }
                    else
                    {

                        resultModel.status = "333";
                        resultModel.result = "Failed";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        public class get_return_list
        {

            public List<return_list> return_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class return_list
        {
            public string lead_id { get; set; }
            public string lead_id1 { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Retuned_LeadList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string employeecode = data1.Split('^')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_return_list data = new get_return_list();
                List<return_list> return_data = new List<return_list>();

                try
                {
                    dt = lb.spl_proc_LEADCONFIRMATION("ReturnLeadId", employeecode, "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            return_data.Add(new return_list()
                            {
                                lead_id = dr[0].ToString(),
                                lead_id1 = dr[1].ToString(),

                            });
                        }

                        data.return_data = return_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        //---------branch credit head----BCH------------ //

        public class get_bch_list
        {

            public List<bch_list> bch_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class bch_list
        {
            public string lead_id { get; set; }
            public string lead_id1 { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Spl_LeadList_Bch(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string branchid = data1.Split('^')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_return_list data = new get_return_list();
                List<return_list> return_data = new List<return_list>();

                try
                {
                    dt = lb.spl_proc_LEADCONFIRMATION("FillLeadId", branchid, "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            return_data.Add(new return_list()
                            {
                                lead_id = dr[0].ToString(),
                                lead_id1 = dr[1].ToString(),

                            });
                        }

                        data.return_data = return_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Spl_Fill_dtls_Bch(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            fill_dtls data = new fill_dtls();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string lead_id = data1.Split('^')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();


                try
                {
                    dt = lb.spl_proc_LEADCONFIRMATION("FILLDETAILSBCH", lead_id, "");

                    if (dt.Rows.Count > 0)

                    {

                        data.cust_dtls = dt.Rows[0][0].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "777";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void SPL_Lead_Approve_Bch(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string bureau_score = data1.Split('^')[1].ToString();
            string sanctioned_amount = data1.Split('^')[2].ToString();
            string credit_history = data1.Split('^')[3].ToString();
            string bch_approveby = data1.Split('^')[4].ToString();
            string lead_id = data1.Split('^')[5].ToString();


            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";

                string inputString = bureau_score + '^' + sanctioned_amount + '^' + credit_history + '^' + bch_approveby;

                try
                {
                    dt = lb.spl_proc_LEADCONFIRMATION("LEADAPPROVE", lead_id, inputString);

                    if (dt.Rows[0][0].ToString() == "LEAD successfully Approved")
                    {

                        resultModel.status = "111";
                        resultModel.result = "LEAD successfully Approved";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Failed";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void SPL_Lead_Reject_Bch(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string lead_id = data1.Split('^')[1].ToString();
            string remark2 = data1.Split('^')[2].ToString();
            string bch_approveby = data1.Split('^')[3].ToString();


            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";

                string inputString = remark2 + '^' + bch_approveby;

                try
                {
                    dt = lb.spl_proc_LEADCONFIRMATION("LEADREJECT", lead_id, inputString);

                    if (dt.Rows[0][0].ToString() == "LEAD RETURNED")
                    {

                        resultModel.status = "111";
                        resultModel.result = "LEAD RETURNED";

                    }
                    else if (dt.Rows[0][0].ToString() == "LEAD REJECTED")
                    {

                        resultModel.status = "222";
                        resultModel.result = "LEAD REJECTED";
                    }
                    else
                    {

                        resultModel.status = "333";
                        resultModel.result = "Something went wrong !!";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class get_bch_doc
        {

            public List<bch_doc> bch_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class bch_doc
        {
            public string sl_no { get; set; }
            public string docname { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Spl_DocList_Bch(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string lead_id = data1.Split('^')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_bch_doc data = new get_bch_doc();
                List<bch_doc> bch_data = new List<bch_doc>();

                try
                {
                    dt = lb.spl_proc_LEADCONFIRMATION("DOCVIEWBCH", lead_id, "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            bch_data.Add(new bch_doc()
                            {
                                sl_no = dr[0].ToString(),
                                docname = dr[1].ToString(),

                            });
                        }

                        data.bch_data = bch_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        public class Doc_dtls
        {
            public string document { get; set; }
            public string doc_dtls { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }




        public class work_doc_data
        {
            public string status { get; set; }
            public string result { get; set; }
            public string extn { get; set; }
            public string image { get; set; }
        }

        [WebMethod]
        public void get_SPL_docs_bch(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            //Context.Response.ContentType = "application/ms-excel";
            work_doc_data resultModel = new work_doc_data();
            string data1 = Decryptrel(data);
            string sessionId = data1.Split('~')[0].ToString();
            string sl_no = data1.Split('~')[1].ToString();
            string extn, stringDocument, stringImage, filename;
            byte[] byteDocument, byteImage;

            string DocFileName = "", ImageName;

            //string inputString = task_id + '~' + work_id;

            try
            {

                dt = lb.proc_mobapp_ngl(122, sl_no);
                filename = dt.Rows[0][1].ToString();
                extn = dt.Rows[0][2].ToString();


                if (dt.Rows.Count > 0)
                {
                    //byteDocument = (byte[])dt.Rows[0][1];
                    //stringDocument = Convert.ToBase64String(byteDocument);

                    byteImage = (byte[])dt.Rows[0][0];
                    stringImage = Convert.ToBase64String(byteImage);
                    //ImageName = sl_no + "img.pdf";
                    ImageName = filename;




                    if (extn == "pdf")
                    {

                        DocFileName = sl_no + "document.pdf";

                    }
                    else if (extn == "txt")
                    {

                        DocFileName = sl_no + "document.txt";
                    }
                    else
                    {

                        DocFileName = sl_no + "document.xlsx";
                    }



                    if (!string.IsNullOrEmpty(stringImage))
                    {
                        if (DownloadFile2(ImageName, byteImage))
                        {
                            resultModel.image = ImageName;
                            resultModel.extn = extn;
                        }
                    }


                    resultModel.status = "111";
                    resultModel.result = "Success";
                }
                else
                {
                    resultModel.status = "222";
                    resultModel.result = "No Image found!";
                }
            }
            catch (Exception e)
            {
                resultModel.status = "666";
                resultModel.result = "Exception";
                throw e;

            }
            Context.Response.Write(js.Serialize(resultModel));

        }


        public class get_lead_rpt
        {

            public List<lead_rpt> rpt_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class lead_rpt
        {
            public string leaddate { get; set; }
            public string lead_id { get; set; }
            public string branchid { get; set; }
            public string branchname { get; set; }
            public string employeecode { get; set; }
            public string employeenmae { get; set; }
            public string emppost { get; set; }
            public string customername { get; set; }
            public string contactnumber { get; set; }
            public string emailid { get; set; }
            public string requiredamount { get; set; }
            public string sanctioned_amount { get; set; }
            public string customerprofile { get; set; }
            public string usageofloan { get; set; }
            public string bch_approveby { get; set; }
            public string status { get; set; }
            public string reason { get; set; }
            public string remark2 { get; set; }
            public string sourcename { get; set; }
            public string remarks { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_SplLead_Mis_Report(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string emp_code = data1.Split('^')[1].ToString();
            string from_dt = data1.Split('^')[2].ToString();
            string to_dt = data1.Split('^')[3].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_lead_rpt data = new get_lead_rpt();
                List<lead_rpt> rpt_data = new List<lead_rpt>();

                string inputString = from_dt + '^' + to_dt;

                try
                {
                    dt = lb.spl_proc_GETLEADREPORT("getdata", emp_code, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            rpt_data.Add(new lead_rpt()
                            {
                                leaddate = dr[0].ToString(),
                                lead_id = dr[1].ToString(),
                                branchid = dr[2].ToString(),
                                branchname = dr[3].ToString(),
                                employeecode = dr[4].ToString(),
                                employeenmae = dr[5].ToString(),
                                emppost = dr[6].ToString(),
                                customername = dr[7].ToString(),
                                contactnumber = dr[8].ToString(),
                                emailid = dr[9].ToString(),
                                requiredamount = dr[10].ToString(),
                                sanctioned_amount = dr[11].ToString(),
                                customerprofile = dr[12].ToString(),
                                usageofloan = dr[13].ToString(),
                                bch_approveby = dr[14].ToString(),
                                status = dr[15].ToString(),
                                reason = dr[16].ToString(),
                                remark2 = dr[17].ToString(),
                                sourcename = dr[18].ToString(),
                                remarks = dr[19].ToString(),

                            });
                        }

                        data.rpt_data = rpt_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void SPL_Lead_DocUpload(string p_data, string document)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string docname = data1.Split('^')[1].ToString();
            string filename = data1.Split('^')[2].ToString();
            string extn = data1.Split('^')[3].ToString();
            string user_id = data1.Split('^')[4].ToString();
            string lead_id = data1.Split('^')[5].ToString();




            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = docname + '^' + filename + '^' + extn + '^' + user_id + '^' + lead_id;
                try
                {

                    result = lb.proc_lmslos_docupload("SPLLEADCONFIRMATION", inputString);

                    String pt1 = lb.DocumentUpload_ssif(result, document);

                    if (pt1 == "111")
                    {
                        resultModel.status = "111";
                        resultModel.result = "Document uploaded !!!";

                    }


                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "failed to upload !!";
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }
        //-----------Girish---119709-CRF for Lead management system in ESS App-------------------------------end ------------//

        ///-----------Girish ---119906--Adding Leave report & Punching Report view in ess------------------start-----------///
        public class Get_indv_punchrpt
        {
            public List<Getpunchrpt_dtl> getpunchdtls { get; set; }

            public string status { get; set; }
            public string result { get; set; }
            public string Fin_year { get; set; }
        }

        public class Getpunchrpt_dtl
        {

            public string day { get; set; }
            public string morning_time { get; set; }
            public string evening_time { get; set; }
            public string remarks { get; set; }
            public string ALERT { get; set; }




        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_emp_punch_report(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_indv_punchrpt details = new Get_indv_punchrpt();
            List<Getpunchrpt_dtl> getpunchdtls = new List<Getpunchrpt_dtl>();
            //DateTime dateTime = DateTime.UtcNow.Date;
            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_mobapp_ngl(127, emp_code);



                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getpunchdtls.Add(new Getpunchrpt_dtl()
                            {

                                day = dr[0].ToString(),
                                morning_time = dr[1].ToString(),
                                evening_time = dr[2].ToString(),
                                remarks = dr[3].ToString(),
                                ALERT = dr[4].ToString(),


                            });
                        }
                        details.getpunchdtls = getpunchdtls;
                        dt1 = lb.proc_mobapp_ngl(129, "");
                        details.status = "111";
                        details.result = "Success";
                        details.Fin_year = dt1.Rows[0][0].ToString();
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }

        public class Get_emp_leaverpt
        {
            public List<Getleaverpt_dtl> getleavedtls { get; set; }

            public string status { get; set; }
            public string result { get; set; }
            public string Fin_year { get; set; }
        }

        public class Getleaverpt_dtl
        {

            public string sl_no { get; set; }
            public string from_date { get; set; }
            public string to_date { get; set; }
            public string leave_days { get; set; }
            public string leave_type { get; set; }
            public string leave_reason { get; set; }


        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_emp_leave_report(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_emp_leaverpt details = new Get_emp_leaverpt();
            List<Getleaverpt_dtl> getleavedtls = new List<Getleaverpt_dtl>();
            //DateTime dateTime = DateTime.UtcNow.Date;
            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_mobapp_ngl(128, emp_code);



                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getleavedtls.Add(new Getleaverpt_dtl()
                            {

                                sl_no = dr[0].ToString(),
                                from_date = dr[1].ToString(),
                                to_date = dr[2].ToString(),
                                leave_days = dr[3].ToString(),
                                leave_type = dr[4].ToString(),
                                leave_reason = dr[5].ToString(),


                            });
                        }
                        details.getleavedtls = getleavedtls;
                        dt1 = lb.proc_mobapp_ngl(129, "");
                        details.status = "111";
                        details.result = "Success";
                        details.Fin_year = dt1.Rows[0][0].ToString();
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }



        ///-----------Girish ---119906--Adding Leave report & Punching Report view in ess------------------end-----------///

        //-----------Girish ---119937--CRF for OVD images or type modification IDs validation pending cases skipping to RM/FZM code.------start-----//


        public class get_nca_ah
        {

            public List<nca_ah> nca_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class nca_ah
        {
            public string cust_dtls { get; set; }
            public string cust_id { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Nca_CustList_AH_RM_FZM(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();
            string BRANCH_ID = data1.Split('~')[2].ToString();
            string flag = data1.Split('~')[3].ToString();

            get_nca_ah data = new get_nca_ah();
            List<nca_ah> nca_data = new List<nca_ah>();

            string inputString = emp_code + '~' + BRANCH_ID + '~' + flag;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();


                try
                {

                    if (flag == "1")
                    {

                        dt = lb.proc_mobapp_ngl(130, inputString);

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                nca_data.Add(new nca_ah()
                                {
                                    cust_dtls = dr[0].ToString(),
                                    cust_id = dr[1].ToString(),

                                });
                            }

                            data.nca_data = nca_data;
                            data.status = "111";
                            data.result = "Success";
                        }
                        else
                        {

                            data.status = "222";
                            data.result = "No data found";
                        }
                    }
                    else if (flag == "2")
                    {
                        dt = lb.proc_mobapp_ngl(131, inputString);

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                nca_data.Add(new nca_ah()
                                {
                                    cust_dtls = dr[0].ToString(),
                                    cust_id = dr[1].ToString(),

                                });
                            }

                            data.nca_data = nca_data;
                            data.status = "111";
                            data.result = "Success";
                        }
                        else
                        {

                            data.status = "222";
                            data.result = "No data found";
                        }

                    }
                    else if (flag == "3")
                    {
                        dt = lb.proc_mobapp_ngl(132, inputString);

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                nca_data.Add(new nca_ah()
                                {
                                    cust_dtls = dr[0].ToString(),
                                    cust_id = dr[1].ToString(),

                                });
                            }

                            data.nca_data = nca_data;
                            data.status = "111";
                            data.result = "Success";
                        }
                        else
                        {

                            data.status = "222";
                            data.result = "No data found";
                        }

                    }
                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {

                data.status = "777";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }
        }


        public class getcust_dtls
        {

            public List<cust_dtls> nca_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class cust_dtls
        {
            public string cust_id { get; set; }
            public string identity_id { get; set; }
            public string id_number { get; set; }
            public string identity_name { get; set; }
            public string flag { get; set; }
            public string modikyc { get; set; }
            public string housename { get; set; }
            public string locality { get; set; }
            public string pincode { get; set; }
            public string street { get; set; }
            public string phone { get; set; }
            public string mobileno { get; set; }
            public string occupation { get; set; }
            public string modiPhoto { get; set; }
            public string cust_name { get; set; }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_CustDtls_recommend(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            getcust_dtls data = new getcust_dtls();
            List<cust_dtls> nca_data = new List<cust_dtls>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string custid = data1.Split('~')[1].ToString();
            //string chtype = data1.Split('~')[2].ToString();
            //string lupdate = data1.Split('~')[3].ToString();
            string a = data1.Split('~')[2].ToString();
            int chtype = int.Parse(a);
            string dte = data1.Split('~')[3].ToString();
            DateTime lupdate = DateTime.Parse(dte);



            //string inputString = custid + '~' + chtype + '~' + lupdate;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();


                try
                {
                    dt = lb.PLP_Customer_SELECT(custid, chtype, lupdate, "RECOMMEND", "", "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            nca_data.Add(new cust_dtls()
                            {
                                cust_id = dt.Rows[0][0].ToString(),
                                identity_id = dt.Rows[0][1].ToString(),
                                id_number = dt.Rows[0][2].ToString(),
                                identity_name = dt.Rows[0][3].ToString(),
                                flag = dt.Rows[0][4].ToString(),
                                modikyc = dt.Rows[0][5].ToString(),
                                housename = dt.Rows[0][6].ToString(),
                                locality = dt.Rows[0][7].ToString(),
                                pincode = dt.Rows[0][8].ToString(),
                                street = dt.Rows[0][9].ToString(),
                                phone = dt.Rows[0][10].ToString(),
                                mobileno = dt.Rows[0][11].ToString(),
                                occupation = dt.Rows[0][12].ToString(),
                                modiPhoto = dt.Rows[0][13].ToString(),
                                cust_name = dt.Rows[0][14].ToString(),

                            });
                        }

                        data.nca_data = nca_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {

                data.status = "777";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_CustDtls_Approve(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            getcust_dtls data = new getcust_dtls();
            List<cust_dtls> nca_data = new List<cust_dtls>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string custid = data1.Split('~')[1].ToString();
            //string chtype = data1.Split('~')[2].ToString();
            //string lupdate = data1.Split('~')[3].ToString();
            string a = data1.Split('~')[2].ToString();
            int chtype = int.Parse(a);
            string dte = data1.Split('~')[3].ToString();
            DateTime lupdate = DateTime.Parse(dte);



            //string inputString = custid + '~' + chtype + '~' + lupdate;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();


                try
                {
                    dt = lb.PLP_Customer_SELECT(custid, chtype, lupdate, "APPROVE", "", "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            nca_data.Add(new cust_dtls()
                            {
                                cust_id = dr[0].ToString(),
                                identity_id = dr[1].ToString(),
                                id_number = dr[2].ToString(),
                                identity_name = dr[3].ToString(),
                                flag = dr[4].ToString(),
                                modikyc = dr[5].ToString(),
                                housename = dr[6].ToString(),
                                locality = dr[7].ToString(),
                                pincode = dr[8].ToString(),
                                street = dr[9].ToString(),
                                phone = dr[10].ToString(),
                                mobileno = dr[11].ToString(),
                                occupation = dr[12].ToString(),
                                modiPhoto = dr[13].ToString(),
                                cust_name = dr[14].ToString(),

                            });
                        }

                        data.nca_data = nca_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {

                data.status = "777";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Nca_docs(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel_doc resultModel = new ResultModel_doc();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string custid = data1.Split('~')[1].ToString();
            string type = data1.Split('~')[2].ToString();
            string dte = data1.Split('~')[3].ToString();
            DateTime lupdate = DateTime.Parse(dte);


            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileName;
                string newData;


                try
                {
                    dt = lb.PLP_Customer_SELECT(custid, 0, lupdate, "GETPHOTO", type, "");
                    if (dt.Rows.Count != 0)
                    {

                        string image1 = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {

                            byte[] s;
                            s = (byte[])dt.Rows[0][0];

                            byte[] tiffjpgByte = justfuncJpegBytes(s);
                            DocFileName = custid + "-Cut.jpg";
                            if (DownloadFile2(DocFileName, tiffjpgByte))
                            {
                                resultModel.status = "111";
                                resultModel.result = "Success";
                                resultModel.image = DocFileName;

                            }
                            else
                            {
                                resultModel.status = "222";
                                resultModel.result = "Failed";
                            }

                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "No Image found!";

                        }

                    }
                    else
                    {
                        resultModel.status = "333";
                        resultModel.result = "No Image found!";

                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));

            }
        }




        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Confirm_Reject_Nca(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string custid = data1.Split('~')[1].ToString();
            string apprrej = data1.Split('~')[2].ToString();
            string instatus = data1.Split('~')[3].ToString();
            string userid = data1.Split('~')[4].ToString();
            string rejreason = data1.Split('~')[5].ToString();
            string ch_type = data1.Split('~')[6].ToString();
            string appr_string = data1.Split('~')[7].ToString();
            string dte = data1.Split('~')[8].ToString();
            DateTime lupdate = DateTime.Parse(dte);
            string remark = data1.Split('~')[9].ToString();

            String result = "";

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();

                try
                {
                    result = lb.CustomerDet_updation(custid, apprrej, instatus, userid, rejreason, ch_type, appr_string, lupdate, remark);

                    if (result == "Customer Change Approved.......")
                    {


                        resultModel.status = "111";
                        resultModel.result = result;


                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = result;
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class Get_BrList
        {
            public List<Br_List> getBrList { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class Br_List
        {

            public string branch_id { get; set; }
            public string branch_name { get; set; }


        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_Branch_List(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_BrList details = new Get_BrList();
            List<Br_List> getBrList = new List<Br_List>();
            //DateTime dateTime = DateTime.UtcNow.Date;
            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();
            string Div_id = data1.Split('~')[2].ToString();

            string inputString = emp_code + '~' + Div_id;

            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_mobapp_ngl(133, inputString);


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getBrList.Add(new Br_List()
                            {

                                branch_id = dr[0].ToString(),
                                branch_name = dr[1].ToString(),


                            });
                        }
                        details.getBrList = getBrList;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }





        //-----------Girish ---119937--CRF for OVD images or type modification IDs validation pending cases skipping to RM/FZM code.------end-----//

        //------------------------------ 120006 ----- Fixing amount wise control in doorstep cgl application ------- Start----------------------

        //doorstepexcessamountrequest

        public class getcustomer_doorstep
        {

            public string cust_name { get; set; }
            public string beneficiary_account { get; set; }
            public string ifsc_code { get; set; }
            public string verified_by { get; set; }
            public string address { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }



        [WebMethod]
        public void getcustomerdoorstep_search(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel stack = new ResultModel();
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            getcustomer_doorstep val = new getcustomer_doorstep();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dS = lb.proc_doorstep_exception("", "GetCustomerName", dataArray[1], "");
                    dt = dS.Tables[0];

                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0][0].ToString() != "111" && dt.Rows[0][0].ToString() != "333")
                        {

                            val.cust_name = dt.Rows[0][0].ToString();
                            val.beneficiary_account = dt.Rows[0][1].ToString();
                            val.ifsc_code = dt.Rows[0][2].ToString();
                            val.verified_by = dt.Rows[0][3].ToString();
                            val.address = dt.Rows[0][4].ToString();
                            val.status = "111";
                            val.result = "Success";
                        }
                        else if (dt.Rows[0][0].ToString() == "333")
                        {
                            val.status = "333";
                            val.result = "Customer neft details not found !";

                        }
                        else
                        {
                            val.status = "222";
                            val.result = "Invalid Customer ID or Inactive Customer !";
                        }

                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }

                }
                else
                {
                    val.status = "777";
                    val.result = "Session is expired";
                }

            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }

            Context.Response.Write(js.Serialize(val));
        }


        public class cust_photo
        {
            public string image { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }




        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Doorstep_DocUpload(string data, string document)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            string input = dataArray[1];




            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                try
                {
                    result = lb.proc_hoapp_DocUpload("150", input);

                    String pt1 = lb.DocumentUpload_ssif(result, document);

                    if (pt1 == "111")
                    {
                        resultModel.status = "111";
                        resultModel.result = "Document uploaded !!!";

                    }


                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "failed to upload !!";
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "333";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }






        [WebMethod]
        public void doorstep_request_confirmation(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dS = lb.proc_doorstep_exception("", "ConfirmRequest", dataArray[1], dataArray[2]);
                    dt = dS.Tables[0];
                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0][0].ToString() == "111")
                        {
                            stack.status = dt.Rows[0][0].ToString();
                            stack.result = dt.Rows[0][1].ToString();

                        }
                        else if (dt.Rows[0][0].ToString() == "222")
                        {
                            stack.status = "222";
                            stack.result = "Approval pending in this customer id  !";
                        }
                        else if (dt.Rows[0][0].ToString() == "333")
                        {
                            stack.status = "333";
                            stack.result = "Requisition only allowed when daily transaction excceds 500000!";
                        }
                        else if (dt.Rows[0][0].ToString() == "444")
                        {
                            stack.status = "444";
                            stack.result = "Already a request is in approved status for the same customer,Please complete the transaction first !";
                        }
                        else
                        {
                            stack.status = "222";
                            stack.result = "Invalid Request !";
                        }
                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "Invalid Request !";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "555";
                stack.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(stack));

        }

        public class stack_result
        {

            public string status { get; set; }
            public string result { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void view_custdetails_photo(string data, string flag)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            cust_photo resultModel = new cust_photo();
            stack_result stack = new stack_result();
            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];


            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS, dS1, dS2 = new DataSet();
                DataTable dt, dt1, dt2 = new DataTable();
                string DocFileQuest, DocFileQuest1, DocFileQuest2;
                string DocFilphoto = "";


                try
                {
                    if (flag == "1")
                    {

                        dS = lb.proc_doorstep_exception("", "getcustphoto", dataArray[1], "");
                        dt = dS.Tables[0];
                        if (dt.Rows.Count != 0)
                        {
                            string image = dt.Rows[0][0].ToString();
                            if (dt.Rows.Count > 0)
                            {
                                if ((dt.Rows[0][0].ToString() != "111") && !string.IsNullOrEmpty(image))
                                {
                                    byte[] s;
                                    s = (byte[])dt.Rows[0][0];
                                    DocFileQuest = dataArray[1] + "_photo.jpg";
                                    if (DownloadFile1(DocFileQuest, s))
                                    {
                                        resultModel.status = "111";
                                        resultModel.result = "Success";
                                        resultModel.image = DocFileQuest;
                                    }
                                    else
                                    {
                                        resultModel.status = "222";
                                        resultModel.result = "No Image found!";
                                    }
                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "No Image found!";
                                }

                            }
                            else
                            {
                                resultModel.status = "222";
                                resultModel.result = "No Image found!";

                            }
                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "No data found!";

                        }

                    }
                    else if (flag == "2")
                    {
                        dS1 = lb.proc_doorstep_exception("", "getcustOVD", dataArray[1], "");
                        dt1 = dS1.Tables[0];
                        if (dt1.Rows.Count != 0)
                        {
                            string image1 = dt1.Rows[0][0].ToString();
                            if (dt1.Rows.Count > 0)
                            {
                                if ((dt1.Rows[0][0].ToString() != "111") && !string.IsNullOrEmpty(image1))
                                {
                                    byte[] s1;
                                    s1 = (byte[])dt1.Rows[0][0];
                                    DocFileQuest1 = dataArray[1] + "_photo.jpg";
                                    if (DownloadFile1(DocFileQuest1, s1))
                                    {
                                        resultModel.status = "111";
                                        resultModel.result = "Success";
                                        resultModel.image = DocFileQuest1;
                                    }
                                    else
                                    {
                                        resultModel.status = "222";
                                        resultModel.result = "No Image found!";
                                    }
                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "No Image found!";
                                }
                            }
                            else
                            {
                                resultModel.status = "222";
                                resultModel.result = "No Image found!";
                            }
                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "No data found!";

                        }
                    }

                    else if (flag == "3")
                    {
                        dS2 = lb.proc_doorstep_exception("", "getcustNpassBk", dataArray[1], "");
                        dt2 = dS2.Tables[0];
                        if (dt2.Rows.Count != 0)
                        {
                            string image2 = dt2.Rows[0][0].ToString();
                            if (dt2.Rows.Count > 0)
                            {
                                if ((dt2.Rows[0][0].ToString() != "111") && !string.IsNullOrEmpty(image2))
                                {
                                    byte[] s2;
                                    s2 = (byte[])dt2.Rows[0][0];
                                    DocFileQuest2 = dataArray[1] + "_photo.jpg";
                                    if (DownloadFile1(DocFileQuest2, s2))
                                    {
                                        resultModel.status = "111";
                                        resultModel.result = "Success";
                                        resultModel.image = DocFileQuest2;
                                    }
                                    else
                                    {
                                        resultModel.status = "222";
                                        resultModel.result = "No Image found!";
                                    }
                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "No Image found!";
                                }
                            }
                            else
                            {
                                resultModel.status = "222";
                                resultModel.result = "No Image found!";
                            }
                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "No data found!";

                        }

                    }
                    else
                    {
                        resultModel.status = "222";
                        resultModel.result = "No data found!";

                    }

                }


                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));

            }
        }



        //AH_RM_DSGL_5L_RECOMMENT.aspx


        public class doorstep_request_approver_dtls
        {
            public string seqid { get; set; }
            public string cust_id { get; set; }


        }

        public class get_request_approver_dtls
        {

            public List<doorstep_request_approver_dtls> get_doorstep_app_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_customerIDs(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                get_request_approver_dtls data2 = new get_request_approver_dtls();
                List<doorstep_request_approver_dtls> get_app_data = new List<doorstep_request_approver_dtls>();

                try
                {
                    dS = lb.proc_doorstep_exception("", "AHRMRequestid", "", dataArray[1]);
                    dt = dS.Tables[0];

                    if (dt.Rows.Count > 0)
                    {
                        if ((dt.Rows[0][0].ToString() != "222") && (dt.Rows[0][0].ToString() != "333"))
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                get_app_data.Add(new doorstep_request_approver_dtls()
                                {

                                    seqid = dr[0].ToString(),
                                    cust_id = dr[1].ToString()


                                });
                            }

                            data2.get_doorstep_app_data = get_app_data;
                            data2.status = "111";
                            data2.result = "Success";
                        }
                        else if (dt.Rows[0][0].ToString() == "333")
                        {
                            data2.status = "333";
                            data2.result = "You are not authorised !";
                        }
                        else
                        {
                            data2.status = "222";
                            data2.result = "No Request Pending !";
                        }
                    }
                    else
                    {
                        data2.status = "555";
                        data2.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }




        public class fetchcustdetails_doorstep
        {

            public string cust_name { get; set; }
            public string cust_id { get; set; }
            public string branch_id { get; set; }
            public string branch_name { get; set; }
            public string area_id { get; set; }
            public string area_name { get; set; }
            public string pledge_value { get; set; }
            public string reqt_by { get; set; }
            public string emp_name { get; set; }
            public string post_name { get; set; }
            public string seq_id { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }



        [WebMethod]
        public void fetchcustdetailsdoorstep(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            fetchcustdetails_doorstep val = new fetchcustdetails_doorstep();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dS = lb.proc_doorstep_exception("", "fetchcust", "", dataArray[1]);//cust id--seqid
                    dt = dS.Tables[0];

                    if (dt.Rows.Count > 0)
                    {

                        val.cust_name = dt.Rows[0][0].ToString();
                        val.cust_id = dt.Rows[0][1].ToString();
                        val.branch_id = dt.Rows[0][2].ToString();
                        val.branch_name = dt.Rows[0][3].ToString();
                        val.area_id = dt.Rows[0][4].ToString();
                        val.area_name = dt.Rows[0][5].ToString();
                        val.pledge_value = dt.Rows[0][6].ToString();
                        val.reqt_by = dt.Rows[0][7].ToString();
                        val.emp_name = dt.Rows[0][8].ToString();
                        val.post_name = dt.Rows[0][9].ToString();
                        val.seq_id = dt.Rows[0][10].ToString();
                        val.status = "111";
                        val.result = "Success";


                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }



                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }


            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }


            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }



        [WebMethod]
        public void doorstep_RequestRecommendUpdation(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dS = lb.proc_doorstep_exception("", "RequestRecommendUpdation", dataArray[1], dataArray[2]);
                    dt = dS.Tables[0];
                    if (dt.Rows[0][0].ToString() == "SUCCESSFULLY UPDATED!!")
                    {
                        stack.status = "111";
                        stack.result = "Recommended Successfully";

                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "No data found";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "666";
                stack.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(stack));

        }


        [WebMethod]
        public void doorstep_RequestrejectUpdation(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dS = lb.proc_doorstep_exception("", "RequestReject", dataArray[1], dataArray[2]);
                    dt = dS.Tables[0];
                    if (dt.Rows[0][0].ToString() == "SUCCESSFULLY REJECTED!!")
                    {
                        stack.status = "111";
                        stack.result = "Successfully Rejected";

                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "No data found";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "666";
                stack.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(stack));

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void view_custrequest_approvedocument_photo(string data, string flag)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            cust_photo resultModel = new cust_photo();
            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];


            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS, dS1, dS2, dS3 = new DataSet();
                DataTable dt, dt1, dt2, dt3 = new DataTable();
                string DocFileQuest, DocFileQuest1, DocFileQuest2, DocFileQuest3;
                string DocFilphoto = "";




                try
                {
                    if (flag == "1")
                    {

                        dS = lb.proc_doorstep_exception("", "CustomerPhoto", "", dataArray[1]);
                        dt = dS.Tables[0];
                        if (dt.Rows.Count != 0)
                        {
                            string image = dt.Rows[0][0].ToString();
                            if (dt.Rows.Count > 0)
                            {
                                if ((dt.Rows[0][0].ToString() != "111") && !string.IsNullOrEmpty(image))
                                {
                                    byte[] s;
                                    s = (byte[])dt.Rows[0][0];
                                    DocFileQuest = dataArray[1] + "_photo.jpg";
                                    if (DownloadFile1(DocFileQuest, s))
                                    {
                                        resultModel.status = "111";
                                        resultModel.result = "Success";
                                        resultModel.image = DocFileQuest;
                                    }
                                    else
                                    {
                                        resultModel.status = "222";
                                        resultModel.result = "Failed";
                                    }
                                }
                                else
                                {

                                    resultModel.status = "222";
                                    resultModel.result = "No Image found!";
                                }
                            }
                            else
                            {
                                resultModel.status = "222";
                                resultModel.result = "No data found!";

                            }
                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "No data found!";

                        }

                    }
                    else if (flag == "2")
                    {
                        dS1 = lb.proc_doorstep_exception("", "CustomerOVD", "", dataArray[1]);
                        dt1 = dS1.Tables[0];
                        if (dt1.Rows.Count != 0)
                        {
                            string image1 = dt1.Rows[0][0].ToString();
                            if (dt1.Rows.Count > 0)
                            {
                                if ((dt1.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                                {
                                    byte[] s1;
                                    s1 = (byte[])dt1.Rows[0][0];
                                    DocFileQuest1 = dataArray[1] + "_photo.jpg";
                                    if (DownloadFile1(DocFileQuest1, s1))
                                    {
                                        resultModel.status = "111";
                                        resultModel.result = "Success";
                                        resultModel.image = DocFileQuest1;
                                    }
                                    else
                                    {
                                        resultModel.status = "222";
                                        resultModel.result = "Failed";
                                    }
                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "No Image found!";
                                }
                            }
                            else
                            {
                                resultModel.status = "222";
                                resultModel.result = "No Image found!";
                            }
                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "No data found!";

                        }
                    }

                    else if (flag == "3")
                    {
                        dS2 = lb.proc_doorstep_exception("", "CustomerNeft", "", dataArray[1]);
                        dt2 = dS2.Tables[0];
                        if (dt2.Rows.Count != 0)
                        {
                            string image2 = dt2.Rows[0][0].ToString();
                            if (dt2.Rows.Count > 0)
                            {

                                if ((dt2.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image2))
                                {
                                    byte[] s2;
                                    s2 = (byte[])dt2.Rows[0][0];
                                    DocFileQuest2 = dataArray[1] + "_photo.jpg";
                                    if (DownloadFile1(DocFileQuest2, s2))
                                    {
                                        resultModel.status = "111";
                                        resultModel.result = "Success";
                                        resultModel.image = DocFileQuest2;
                                    }
                                    else
                                    {
                                        resultModel.status = "222";
                                        resultModel.result = "Failed";
                                    }
                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "No Image found!";
                                }
                            }
                            else
                            {
                                resultModel.status = "222";
                                resultModel.result = "No Image found!";
                            }
                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "No data found!";

                        }

                    }

                    else if (flag == "4")
                    {
                        dS3 = lb.proc_doorstep_exception("", "GoldOrnaments", "", dataArray[1]);
                        dt3 = dS3.Tables[0];
                        if (dt3.Rows.Count != 0)
                        {
                            string image3 = dt3.Rows[0][0].ToString();
                            if (dt3.Rows.Count > 0)
                            {
                                if ((dt3.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image3))
                                {
                                    byte[] s3;
                                    s3 = (byte[])dt3.Rows[0][0];
                                    DocFileQuest3 = dataArray[1] + "_photo.jpg";
                                    if (DownloadFile1(DocFileQuest3, s3))
                                    {
                                        resultModel.status = "111";
                                        resultModel.result = "Success";
                                        resultModel.image = DocFileQuest3;
                                    }
                                    else
                                    {
                                        resultModel.status = "222";
                                        resultModel.result = "Failed";
                                    }
                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "No Image found!";
                                }
                            }
                            else
                            {
                                resultModel.status = "222";
                                resultModel.result = "No Image found!";
                            }
                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "No data found!";

                        }

                    }


                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "No data found!";
                    }
                }


                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));

            }
        }


        //Saleshead approve5

        public class get_request_dtls
        {

            public List<doorstep_request_dtls> get_doorstep_req_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class doorstep_request_dtls
        {
            public string seqid { get; set; }
            public string details { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_requests(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                get_request_dtls data2 = new get_request_dtls();
                List<doorstep_request_dtls> get_req_data = new List<doorstep_request_dtls>();

                try
                {
                    dS = lb.proc_doorstep_exception("", "GetRequests", dataArray[1], "");
                    dt = dS.Tables[0];

                    if (dt.Rows.Count > 0)
                    {
                        if ((dt.Rows[0][0].ToString() != "111") && (dt.Rows[0][0].ToString() != "222") && (dt.Rows[0][0].ToString() != "333"))

                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                get_req_data.Add(new doorstep_request_dtls()
                                {

                                    seqid = dr[0].ToString(),
                                    details = dr[1].ToString()


                                });
                            }

                            data2.get_doorstep_req_data = get_req_data;
                            data2.status = "111";
                            data2.result = "Success";
                        }
                        else if (dt.Rows[0][0].ToString() == "333")
                        {
                            data2.status = "333";
                            data2.result = "You are not authorised !";
                        }
                        else
                        {
                            data2.status = "222";
                            data2.result = "No Request Pending !";
                        }
                    }
                    else
                    {
                        data2.status = "555";
                        data2.result = "No data found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }



        public class getrequestdetails_doorstep
        {

            public string branch_id { get; set; }
            public string branch_name { get; set; }
            public string cust_id { get; set; }
            public string name { get; set; }
            public string pledge_weight { get; set; }
            public string pledge_value { get; set; }
            public string area_name { get; set; }
            public string reg_name { get; set; }
            public string reqt_by { get; set; }
            public string emp_name_postname { get; set; }
            public string recommend_by { get; set; }
            public string rm_empname_postname { get; set; }
            public string ifsc_code { get; set; }
            public string beneficiary_account { get; set; }
            public string saleshead_approve_by { get; set; }
            public string sh_empname_postname { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }


        [WebMethod]
        public void getrequestdetailsdoorstep(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            getrequestdetails_doorstep val = new getrequestdetails_doorstep();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dS = lb.proc_doorstep_exception("", "GetRequestDetails", dataArray[1], "");
                    dt = dS.Tables[0];

                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0][0].ToString() != "111")
                        {
                            val.branch_id = dt.Rows[0][0].ToString();
                            val.branch_name = dt.Rows[0][1].ToString();
                            val.cust_id = dt.Rows[0][2].ToString();
                            val.name = dt.Rows[0][3].ToString();
                            val.pledge_weight = dt.Rows[0][4].ToString();
                            val.pledge_value = dt.Rows[0][5].ToString();
                            val.area_name = dt.Rows[0][6].ToString();
                            val.reg_name = dt.Rows[0][7].ToString();
                            val.reqt_by = dt.Rows[0][8].ToString();
                            val.emp_name_postname = dt.Rows[0][9].ToString();
                            val.recommend_by = dt.Rows[0][10].ToString();
                            val.rm_empname_postname = dt.Rows[0][11].ToString();
                            val.ifsc_code = dt.Rows[0][12].ToString();
                            val.beneficiary_account = dt.Rows[0][13].ToString();
                            val.saleshead_approve_by = dt.Rows[0][14].ToString();
                            val.sh_empname_postname = dt.Rows[0][15].ToString();
                            val.status = "111";
                            val.result = "Success";

                        }
                        else
                        {
                            val.status = "222";
                            val.result = "No Data found";
                        }

                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }

                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }


            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }


            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }


        [WebMethod]
        public void doorstep_approve_request_saleshead(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dS = lb.proc_doorstep_exception("", "ApproveRequest", dataArray[1], dataArray[2]);
                    dt = dS.Tables[0];
                    if (dt.Rows[0][0].ToString() == "222")
                    {
                        stack.status = "111";
                        stack.result = "Updated Successfully";

                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "No data found";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "666";
                stack.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(stack));

        }
        //------------------------------ 120006 ----- Fixing amount wise control in doorstep cgl application ------- End----------------------

        //-----------Girish ---120154--CRF For Including 'Sales Officer Target Vs Achievement' in ESS App..------Start-----------------------//
        public class Get_emp_allowrpt
        {
            public List<Getallowrpt_dtl> getallodtls { get; set; }

            public string status { get; set; }
            public string result { get; set; }
            public string emp_count { get; set; }
            public string total_loan_count { get; set; }
            public string total_achieved { get; set; }

        }

        public class Getallowrpt_dtl
        {

            public string emp_code { get; set; }
            public string emp_name { get; set; }
            public string join_dt_dept { get; set; }
            public string exp_dept { get; set; }
            public string exp_months { get; set; }
            public string target { get; set; }
            public string loan_count { get; set; }
            public string achieved { get; set; }
            public string achieved_perc { get; set; }
            public string allowance { get; set; }
            public string incentive { get; set; }



        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_emp_allow_report(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1, dt2 = new DataTable();

            Get_emp_allowrpt details = new Get_emp_allowrpt();
            List<Getallowrpt_dtl> getallodtls = new List<Getallowrpt_dtl>();
            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string branch_id = data1.Split('~')[1].ToString();
            string frm_dt = data1.Split('~')[2].ToString();
            string to_dt = data1.Split('~')[3].ToString();

            string inputString = branch_id + '~' + frm_dt + '~' + to_dt;

            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_mobapp_ngl(135, inputString);


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getallodtls.Add(new Getallowrpt_dtl()
                            {

                                emp_code = dr[0].ToString(),
                                emp_name = dr[1].ToString(),
                                join_dt_dept = dr[2].ToString(),
                                exp_dept = dr[3].ToString(),
                                exp_months = dr[4].ToString(),
                                target = dr[5].ToString(),
                                loan_count = dr[6].ToString(),
                                achieved = dr[7].ToString(),
                                achieved_perc = dr[8].ToString(),
                                allowance = dr[9].ToString(),
                                incentive = dr[10].ToString(),



                            });
                        }
                        details.getallodtls = getallodtls;
                        dt1 = lb.proc_mobapp_ngl(-135, inputString);
                        details.emp_count = dt1.Rows[0][0].ToString();
                        details.total_loan_count = dt1.Rows[0][1].ToString();
                        details.total_achieved = dt1.Rows[0][2].ToString();
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }


        public class Get_ngl_brList
        {
            public List<Getngl_Brdtl> Getngl_data { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class Getngl_Brdtl
        {

            public string branch_details { get; set; }
            public string branch_id { get; set; }
            public string branch_name { get; set; }
            public string state_id { get; set; }
            public string state_name { get; set; }
            public string region_id { get; set; }

        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_SPL_BrList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1, dt2 = new DataTable();

            Get_ngl_brList details = new Get_ngl_brList();
            List<Getngl_Brdtl> Getngl_data = new List<Getngl_Brdtl>();
            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_mobapp_ngl(136, "");


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            Getngl_data.Add(new Getngl_Brdtl()
                            {

                                branch_details = dr[0].ToString(),
                                branch_id = dr[1].ToString(),
                                branch_name = dr[2].ToString(),
                                state_id = dr[3].ToString(),
                                state_name = dr[4].ToString(),
                                region_id = dr[5].ToString(),


                            });
                        }
                        details.Getngl_data = Getngl_data;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }

        //-----------Girish ---120154--CRF For Including 'Sales Officer Target Vs Achievement' in ESS App.------end-----------------------//

        //------------------------------ 120387-Other branch customer loan confirmation in DSGL---------------------------------------------------

        public class get_customer_dtls
        {

            public List<customer_list_dtls> get_cust_list_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class customer_list_dtls
        {
            public string branch_id { get; set; }
            public string other_branch { get; set; }
            public string cust_id { get; set; }
            public string cust_name { get; set; }
            public string quot_no { get; set; }
            public string quot_dt { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_otherbranch_customer_list(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                get_customer_dtls data2 = new get_customer_dtls();
                List<customer_list_dtls> get_cust_data = new List<customer_list_dtls>();

                try
                {
                    dt = lb.proc_mobapp_auctioncall_surplus(42, dataArray[1]);

                    if (dt.Rows.Count != 0)
                    {
                        if (dt.Rows[0][0].ToString() == "111")

                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                get_cust_data.Add(new customer_list_dtls()
                                {

                                    branch_id = dr[1].ToString(),
                                    other_branch = dr[2].ToString(),
                                    cust_id = dr[3].ToString(),
                                    cust_name = dr[4].ToString(),
                                    quot_no = dr[5].ToString(),
                                    quot_dt = dr[6].ToString()


                                });
                            }

                            data2.get_cust_list_data = get_cust_data;
                            data2.status = dt.Rows[0][0].ToString();
                            data2.result = "Success";
                        }
                        else
                        {
                            data2.status = dt.Rows[0][0].ToString();
                            data2.result = dt.Rows[0][1].ToString();
                        }
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        public class getcustomerdetails_doorstep
        {

            public string branch_id { get; set; }
            public string quot_no { get; set; }
            public string quot_dt { get; set; }
            public string cust_id { get; set; }
            public string cust_name { get; set; }
            public string pledge_val { get; set; }
            public string act_weight { get; set; }
            public string net_weight { get; set; }
            public string stone_weight { get; set; }
            public string other_branch { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }



        [WebMethod]
        public void getcustomerdetailsdoorstep(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            getcustomerdetails_doorstep val = new getcustomerdetails_doorstep();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_mobapp_auctioncall_surplus(43, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0][0].ToString() == "111")
                        {
                            val.branch_id = dt.Rows[0][1].ToString();
                            val.quot_no = dt.Rows[0][2].ToString();
                            val.quot_dt = dt.Rows[0][3].ToString();
                            val.cust_id = dt.Rows[0][4].ToString();
                            val.cust_name = dt.Rows[0][5].ToString();
                            val.pledge_val = dt.Rows[0][6].ToString();
                            val.act_weight = dt.Rows[0][7].ToString();
                            val.net_weight = dt.Rows[0][8].ToString();
                            val.stone_weight = dt.Rows[0][9].ToString();
                            val.other_branch = dt.Rows[0][10].ToString();

                            val.status = "111";
                            val.result = "Success";

                        }
                        else
                        {
                            val.status = "222";
                            val.result = "No Data found";
                        }

                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }



                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }


            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }


            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }


        public class view_result
        {

            public string status { get; set; }
            public string result { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void view_item_photo(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            cust_photo resultModel = new cust_photo();
            view_result stack = new view_result();
            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];


            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS, dS1, dS2 = new DataSet();
                DataTable dt, dt1, dt2 = new DataTable();
                string DocFileQuest;
                string DocFilphoto = "";


                try
                {


                    dt = lb.proc_mobapp_auctioncall_surplus(44, dataArray[1]);

                    if (dt.Rows.Count != 0)
                    {
                        string image = dt.Rows[0][1].ToString();
                        if (dt.Rows.Count > 0)
                        {
                            if ((dt.Rows[0][0].ToString() == "111") && !string.IsNullOrEmpty(image))
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][1];
                                DocFileQuest = dataArray[1] + "_photo.jpg";
                                if (DownloadFile1(DocFileQuest, s))
                                {
                                    resultModel.status = "111";
                                    resultModel.result = "Success";
                                    resultModel.image = DocFileQuest;
                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "No Image found!";
                                }
                            }
                            else
                            {
                                resultModel.status = "222";
                                resultModel.result = "No Image found!";
                            }

                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "No Image found!";

                        }
                    }
                    else
                    {
                        resultModel.status = "222";
                        resultModel.result = "No data found!";

                    }

                }


                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));

            }
        }


        [WebMethod]
        public void doorstep_Otherbranch_Approve(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dt = lb.proc_mobapp_auctioncall_surplus(45, dataArray[1]);//quotno~approvercode~remark
                    if (dt.Rows[0][0].ToString() == "Successfully Approved!!")
                    {
                        stack.status = "111";
                        stack.result = "Approved Successfully";

                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "No data found";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "666";
                stack.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(stack));

        }


        [WebMethod]
        public void doorstep_Otherbranch_Reject(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dt = lb.proc_mobapp_auctioncall_surplus(46, dataArray[1]);//quotno~approvercode~remark

                    if (dt.Rows[0][0].ToString() == "Successfully Rejected!!")
                    {
                        stack.status = "111";
                        stack.result = "Your Request is Rejected";

                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "No data found";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "666";
                stack.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(stack));

        }




        //------------------------------ 120387-Other branch customer loan confirmation in DSGL--------------------------------



        //----------CRF for Modification to CRF for changes in the Legal Recovery Calling module and home visit- Employee debit balance-----Girish--------120567--------start-----//

        //--Resigned staff call verify HO----////

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_call_verify_FzmList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_recover_br data = new get_recover_br();
                List<recover_br_list> recover_br_data = new List<recover_br_list>();


                try
                {
                    dt = lb.proc_mobapp_ngl(137, emp_code);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            recover_br_data.Add(new recover_br_list()
                            {
                                fzm_id = dr[0].ToString(),
                                fzm = dr[1].ToString(),


                            });
                        }

                        data.recover_br_data = recover_br_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }




        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_call_verify_RegList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string fzm_id = data1.Split('~')[1].ToString();
            //string fzm_id = data1.Split('~')[2].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_recover_br data = new get_recover_br();
                List<recover_br_list> recover_br_data = new List<recover_br_list>();

                try
                {
                    dt = lb.proc_mobapp_ngl(138, fzm_id);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            recover_br_data.Add(new recover_br_list()
                            {
                                reg_id = dr[0].ToString(),
                                reg_name = dr[1].ToString(),


                            });
                        }

                        data.recover_br_data = recover_br_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_call_verify_AreaList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string reg_id = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_recover_br data = new get_recover_br();
                List<recover_br_list> recover_br_data = new List<recover_br_list>();


                try
                {
                    dt = lb.proc_mobapp_ngl(139, reg_id);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            recover_br_data.Add(new recover_br_list()
                            {
                                area_id = dr[0].ToString(),
                                area_name = dr[1].ToString(),


                            });
                        }

                        data.recover_br_data = recover_br_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        //public class get_recover_verify
        //{

        //    public List<recover_br_list> recover_br_data { get; set; }
        //    public string status { get; set; }
        //    public string result { get; set; }

        //}

        //public class recover_verify_list
        //{

        //    public string branch_id { get; set; }
        //    public string branch_name { get; set; }
        //    public string area_id { get; set; }
        //    public string area_name { get; set; }
        //    public string reg_id { get; set; }
        //    public string reg_name { get; set; }
        //    public string fzm_id { get; set; }
        //    public string fzm { get; set; }


        //}


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_call_verify_BrList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string area_id = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_recover_br data = new get_recover_br();
                List<recover_br_list> recover_br_data = new List<recover_br_list>();


                try
                {
                    dt = lb.proc_mobapp_ngl(140, area_id);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            recover_br_data.Add(new recover_br_list()
                            {
                                branch_id = dr[0].ToString(),
                                branch_name = dr[1].ToString(),


                            });
                        }

                        data.recover_br_data = recover_br_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class get_recover_verify_emp
        {

            public List<recover_emp_list> recover_emp_data { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class recover_verify_emp_list
        {

            public string cust_id { get; set; }
            public string cust_id1 { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_call_verify_Emp_List(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string branch_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_recover_emp data = new get_recover_emp();
                List<recover_emp_list> recover_emp_data = new List<recover_emp_list>();


                try
                {
                    dt = lb.proc_mobapp_ngl(141, branch_id);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            recover_emp_data.Add(new recover_emp_list()
                            {
                                cust_id = dr[0].ToString(),
                                cust_id1 = dr[1].ToString(),

                            });
                        }

                        data.recover_emp_data = recover_emp_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_call_verify_EmpDtls(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                recover_emp_dtls data = new recover_emp_dtls();
                List<recover_emp_dtls> recover_emp_data = new List<recover_emp_dtls>();



                try
                {
                    dt = lb.proc_mobapp_ngl(144, emp_code);

                    if (dt.Rows.Count > 0)

                    {

                        data.emp_name = dt.Rows[0][0].ToString();
                        data.res_phone = dt.Rows[0][1].ToString();
                        data.cont_phone = dt.Rows[0][2].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_call_verify_amnt(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                recover_emp_dtls data = new recover_emp_dtls();
                List<recover_emp_dtls> recover_emp_data = new List<recover_emp_dtls>();

                //string inputString = from_dt + '~' + to_dt + '~' + state_id;


                try
                {
                    dt = lb.proc_mobapp_ngl(142, emp_code);

                    if (dt.Rows.Count > 0)

                    {

                        data.amount = dt.Rows[0][0].ToString();

                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_call_verify_EmpAdress(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                recover_emp_dtls data = new recover_emp_dtls();
                List<recover_emp_dtls> recover_emp_data = new List<recover_emp_dtls>();

                //string inputString = from_dt + '~' + to_dt + '~' + state_id;


                try
                {
                    dt = lb.proc_mobapp_ngl(143, emp_code);

                    if (dt.Rows.Count > 0)

                    {

                        data.father_name = dt.Rows[0][0].ToString();
                        data.perm_add1 = dt.Rows[0][1].ToString();
                        data.landmark = dt.Rows[0][2].ToString();
                        data.post_office = dt.Rows[0][3].ToString();
                        data.district_name = dt.Rows[0][4].ToString();
                        data.state_name = dt.Rows[0][5].ToString();
                        data.pin_code = dt.Rows[0][6].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        public class emp_div_dtls_recover
        {

            public string branch_id { get; set; }
            public string branchname { get; set; }
            public string zones { get; set; }
            public string regionname { get; set; }
            public string areaname { get; set; }
            public string discont_dt { get; set; }
            public string resign_br_name { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_call_verify_Emp_Div(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1, dt2 = new DataTable();
                emp_div_dtls_recover data = new emp_div_dtls_recover();
                List<emp_div_dtls_recover> recover_emp_data = new List<emp_div_dtls_recover>();


                try
                {
                    dt = lb.proc_mobapp_ngl(145, emp_code);
                    dt1 = lb.proc_mobapp_ngl(146, emp_code);
                    dt2 = lb.proc_mobapp_ngl(151, emp_code);

                    if (dt.Rows.Count > 0)

                    {

                        data.branch_id = dt.Rows[0][0].ToString();
                        data.branchname = dt.Rows[0][1].ToString();
                        data.zones = dt.Rows[0][2].ToString();
                        data.regionname = dt.Rows[0][3].ToString();
                        data.areaname = dt.Rows[0][4].ToString();
                        data.discont_dt = dt1.Rows[0][0].ToString();
                        data.resign_br_name = dt2.Rows[0][0].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        public class Resign_photo
        {
            public string Emp_home_photo { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Resign_home_photo(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Resign_photo data = new Resign_photo();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileName;
                string newData;


                try
                {
                    dt = lb.proc_mobapp_ngl(147, emp_code);

                    if (dt.Rows.Count != 0)
                    {
                        string image1 = dt.Rows[0][0].ToString();

                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][0];

                                byte[] tiffjpgByte = justfuncJpegBytes(s);
                                DocFileName = emp_code + "-Visit.jpg";
                                if (DownloadFile2(DocFileName, tiffjpgByte))
                                {
                                    data.status = "111";
                                    data.result = "Success";
                                    data.Emp_home_photo = DocFileName;

                                }
                                else
                                {
                                    data.status = "222";
                                    data.result = "Failed";
                                }
                            }
                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }


                    }
                    else
                    {
                        data.status = "333";
                        data.result = "No Image found!";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;
                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }
            }
            else
            {
                data.result = "Session Expired";
                data.status = "333";
                Context.Response.Write(js.Serialize(data));

            }
        }

        public class Resign_home_format
        {
            public string status { get; set; }
            public string result { get; set; }
            public string document { get; set; }
            public string document_name { get; set; }

        }

        [WebMethod]
        public void Get_Resign_home_format(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Resign_home_format data = new Resign_home_format();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileName;
                string newData;


                try
                {
                    dt = lb.proc_mobapp_ngl(148, emp_code);

                    if (dt.Rows.Count != 0)
                    {
                        string image1 = dt.Rows[0][0].ToString();

                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][0];

                                byte[] tiffjpgByte = justfuncJpegBytes(s);
                                DocFileName = emp_code + "-format.jpg";
                                if (DownloadFile2(DocFileName, tiffjpgByte))
                                {
                                    data.status = "111";
                                    data.result = "Success";
                                    data.document = DocFileName;
                                    data.document_name = dt.Rows[0][1].ToString();

                                }
                                else
                                {
                                    data.status = "222";
                                    data.result = "Failed";
                                }
                            }
                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }


                    }
                    else
                    {
                        data.status = "333";
                        data.result = "No Image found!";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;
                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }
            }
            else
            {
                data.result = "Session Expired";
                data.status = "333";
                Context.Response.Write(js.Serialize(data));

            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Verify_Rejct_Homevisit(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string employee_code = data1.Split('~')[1].ToString();
            string APPROVED_BY = data1.Split('~')[2].ToString();
            string APPROVED_REMARKS = data1.Split('~')[3].ToString();
            string resign_branch_id = data1.Split('~')[4].ToString();
            string branch_id = data1.Split('~')[5].ToString();
            string fzm = data1.Split('~')[6].ToString();
            string flag = data1.Split('~')[7].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                string inputString = employee_code + '~' + APPROVED_BY + '~' + APPROVED_REMARKS + '~' + resign_branch_id + '~' + branch_id + '~' + fzm;

                try
                {
                    if (flag == "1")
                    {
                        dt = lb.proc_mobapp_ngl(149, inputString);

                        if (dt.Rows[0][0].ToString() == "111")
                        {


                            resultModel.status = "111";
                            resultModel.result = "Verified Successfully";

                        }
                    }
                    else if (flag == "2")
                    {
                        dt = lb.proc_mobapp_ngl(150, inputString);

                        if (dt.Rows[0][0].ToString() == "222")
                        {


                            resultModel.status = "222";
                            resultModel.result = "Rejected Successfully";

                        }
                    }
                    else
                    {
                        resultModel.status = "333";
                        resultModel.result = "Failed to verify!";

                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }
        //---Resigned staff home visit assign HO--modifications--//

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_visit_brFzmList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_recover_br data = new get_recover_br();
                List<recover_br_list> recover_br_data = new List<recover_br_list>();


                try
                {
                    dt = lb.proc_mobapp_ngl(155, emp_code);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            recover_br_data.Add(new recover_br_list()
                            {
                                fzm_id = dr[0].ToString(),
                                fzm = dr[1].ToString(),


                            });
                        }

                        data.recover_br_data = recover_br_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_visit_brRegList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string fzm_id = data1.Split('~')[1].ToString();
            //string fzm_id = data1.Split('~')[2].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_recover_br data = new get_recover_br();
                List<recover_br_list> recover_br_data = new List<recover_br_list>();

                try
                {
                    dt = lb.proc_mobapp_ngl(156, fzm_id);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            recover_br_data.Add(new recover_br_list()
                            {
                                reg_id = dr[0].ToString(),
                                reg_name = dr[1].ToString(),


                            });
                        }

                        data.recover_br_data = recover_br_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_visit_brAreaList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string reg_id = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_recover_br data = new get_recover_br();
                List<recover_br_list> recover_br_data = new List<recover_br_list>();


                try
                {
                    dt = lb.proc_mobapp_ngl(157, reg_id);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            recover_br_data.Add(new recover_br_list()
                            {
                                area_id = dr[0].ToString(),
                                area_name = dr[1].ToString(),


                            });
                        }

                        data.recover_br_data = recover_br_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }





        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_visit_BrList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string area_id = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_recover_br data = new get_recover_br();
                List<recover_br_list> recover_br_data = new List<recover_br_list>();


                try
                {
                    dt = lb.proc_mobapp_ngl(158, area_id);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            recover_br_data.Add(new recover_br_list()
                            {
                                branch_id = dr[0].ToString(),
                                branch_name = dr[1].ToString(),


                            });
                        }

                        data.recover_br_data = recover_br_data;
                        data.status = "111";
                        data.result = "Success";
                    }

                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        public class emp_br_dtls
        {

            public string branchname { get; set; }
            public string branch_id { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_emp_resign_Brid(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1, dt2 = new DataTable();
                emp_br_dtls data = new emp_br_dtls();
                //List<emp_br_dtls> br_emp_data = new List<emp_br_dtls>();


                try
                {

                    dt = lb.proc_mobapp_ngl(151, emp_code);

                    if (dt.Rows.Count > 0)

                    {

                        data.branchname = dt.Rows[0][0].ToString();
                        data.branch_id = dt.Rows[0][1].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }



        //----------CRF for Modification to CRF for changes in the Legal Recovery Calling module and home visit- Employee debit balance-----Girish--------120567--------end-----//




        //------------------------------ 120589-OGL Lead calling spl--------------------------------

        public class get_oglsplcustomer_list_dtls
        {

            public List<oglsplcustomer_list_dtls> get_cust_oglspllist_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class oglsplcustomer_list_dtls
        {
            public string col_cust_id { get; set; }
            public string cust_name { get; set; }
            public string Scheme { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_oglsplleadcalling_customerlist(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                get_oglsplcustomer_list_dtls data2 = new get_oglsplcustomer_list_dtls();
                List<oglsplcustomer_list_dtls> get_cust_data = new List<oglsplcustomer_list_dtls>();

                try
                {
                    dt = lb.proc_mobapp_auctioncall_surplus(47, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_cust_data.Add(new oglsplcustomer_list_dtls()
                            {

                                col_cust_id = dr[0].ToString(),
                                cust_name = dr[1].ToString(),
                                Scheme = dr[2].ToString()



                            });
                        }

                        data2.get_cust_oglspllist_data = get_cust_data;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        public class getcustomerdetails_oglsplleadcalling
        {

            public string col_cust_id { get; set; }
            public string cust_name { get; set; }
            public string branch_id { get; set; }

            public string phone2 { get; set; }
            public string req_amount { get; set; }
            public string pin_code { get; set; }
            public string district_name { get; set; }
            public string state_name { get; set; }
            public string col_tra_dt { get; set; }
            public string Scheme { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }



        [WebMethod]
        public void getcustomerdetailsoglsplleadcalling(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            getcustomerdetails_oglsplleadcalling val = new getcustomerdetails_oglsplleadcalling();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_mobapp_auctioncall_surplus(48, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        val.col_cust_id = dt.Rows[0][0].ToString();
                        val.cust_name = dt.Rows[0][1].ToString();
                        val.branch_id = dt.Rows[0][2].ToString();
                        val.phone2 = dt.Rows[0][3].ToString();
                        val.req_amount = dt.Rows[0][4].ToString();
                        val.pin_code = dt.Rows[0][5].ToString();
                        val.district_name = dt.Rows[0][6].ToString();
                        val.state_name = dt.Rows[0][7].ToString();
                        val.col_tra_dt = dt.Rows[0][8].ToString();
                        val.Scheme = dt.Rows[0][9].ToString();


                        val.status = "111";
                        val.result = "Success";


                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }



                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }


            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }


            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }



        [WebMethod]
        public void ogl_leadcallingspl_submit(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dt = lb.proc_mobapp_auctioncall_surplus(49, dataArray[1]);
                    if (dt.Rows[0][0].ToString() == "111")
                    {
                        stack.status = dt.Rows[0][0].ToString();
                        stack.result = dt.Rows[0][1].ToString();

                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "No data found";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "666";
                stack.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(stack));

        }


        //------------------------------ 120589-OGL Lead calling spl--------------------------------


        //----------120666-CRF For modification in Branch wise 'Sales Officer Target Vs Achievement' in ESS App.-----Girish--------120666--------start-----//


        public class Get_SPL_List
        {
            public List<SPL_List> getSplList { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class SPL_List
        {
            public string branch_details { get; set; }
            public string branch_id { get; set; }
            public string branch_name { get; set; }
            public string region_id { get; set; }


        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_SPLSO_RegList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_SPL_List details = new Get_SPL_List();
            List<SPL_List> getSplList = new List<SPL_List>();
            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            //string inputString = emp_code + '~' + Div_id;

            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_mobapp_ngl(153, emp_code);


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getSplList.Add(new SPL_List()
                            {

                                region_id = dr[0].ToString(),



                            });
                        }
                        details.getSplList = getSplList;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_SPLSO_BrList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_SPL_List details = new Get_SPL_List();
            List<SPL_List> getSplList = new List<SPL_List>();
            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();
            string region_id = data1.Split('~')[2].ToString();

            string inputString = emp_code + '~' + region_id;

            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_mobapp_ngl(154, inputString);


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getSplList.Add(new SPL_List()
                            {

                                branch_details = dr[0].ToString(),
                                branch_id = dr[1].ToString(),
                                branch_name = dr[2].ToString(),

                            });
                        }
                        details.getSplList = getSplList;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }




        //----------120666-CRF For Branch wise 'Sales Officer Target Vs Achievement' in ESS App.-----Girish--------120666--------end-----//


        // ---------- 120836 : Modifications for enhanced control in inter branch cash transfer -PART 2 ----- Aswathy -------- Start

        public class emp_delay_list_dtls
        {

            public List<emp_list_dtls> emp_del_list_dtls { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class emp_list_dtls
        {
            public string branch_id { get; set; }
            public string req_id { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_delay_list(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                emp_delay_list_dtls data2 = new emp_delay_list_dtls();
                List<emp_list_dtls> get_delayemp_data = new List<emp_list_dtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(160, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_delayemp_data.Add(new emp_list_dtls()
                            {

                                branch_id = dr[0].ToString(),
                                req_id = dr[1].ToString(),
                            });
                        }

                        data2.emp_del_list_dtls = get_delayemp_data;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class get_delay_data
        {
            public string from_branch { get; set; }
            public string to_branch { get; set; }
            public string emp_code { get; set; }
            public string km { get; set; }
            public string emp_name { get; set; }
            public string request_dt { get; set; }
            public string amount { get; set; }
            public string tranport_mode { get; set; }

            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void get_delay_dtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            get_delay_data val = new get_delay_data();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_mobapp_ngl(161, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        val.from_branch = dt.Rows[0][0].ToString();
                        val.to_branch = dt.Rows[0][1].ToString();
                        val.emp_code = dt.Rows[0][2].ToString();
                        val.km = dt.Rows[0][3].ToString();
                        val.emp_name = dt.Rows[0][4].ToString();
                        val.request_dt = dt.Rows[0][5].ToString();
                        val.amount = dt.Rows[0][6].ToString();
                        val.tranport_mode = dt.Rows[0][7].ToString();

                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        [WebMethod]
        public void update_delay_reason(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dt = lb.proc_mobapp_ngl(162, dataArray[1]);

                    if (dt.Rows[0][0].ToString() == "111")
                    {
                        stack.status = "111";
                        stack.result = "DELAY REASON UPDATED SUCCESSFULLY";

                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "Something went wrong";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "666";
                stack.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(stack));

        }

        // ---------- 120836 : Modifications for enhanced control in inter branch cash transfer -PART 2 ----- Aswathy -------- End
        //-------------------------------120871----Customer Services Cell Complaint in ESS Application----Start-------------
        public class get_list
        {

            public List<list> get_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class list
        {
            public string id { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_List(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(p_data);
            string[] dataArray = decryptedIData.Split('$');



            if (isSessionValidess(dataArray[0]) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_list data = new get_list();
                List<list> get_list_data = new List<list>();

                try
                {
                    dt = lb.callToProcDoorCallCenter("", "Ticket", dataArray[1], "");


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_list_data.Add(new list()
                            {
                                id = dr[0].ToString(),

                            });
                        }

                        data.get_data = get_list_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class get_search
        {

            public string branch_id { get; set; }
            public string BRANCH_NAME { get; set; }
            public string reg_name { get; set; }
            public string area_name { get; set; }
            public string call_type { get; set; }
            public string registration_date { get; set; }
            public string enterd_by { get; set; }
            public string complaint_id { get; set; }
            public string product { get; set; }
            public string existng_cust_no { get; set; }
            public string source { get; set; }
            public string dispositionname { get; set; }
            public string subdispositionname { get; set; }
            public string exis_cust_mob { get; set; }
            public string details_of_complaint { get; set; }
            public string ho_rmk { get; set; }
            public string bh_remark { get; set; }
            public string ah_remark { get; set; }
            public string rm_remark { get; set; }
            public string fzm_remark { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }



        [WebMethod]
        public void getsearch(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            get_search val = new get_search();

            try
            {
                string decryptedIData = Decryptrel(p_data);
                string[] dataArray = decryptedIData.Split('$');



                if (isSessionValidess(dataArray[0]) == "1")


                {
                    dt = lb.callToProcDoorCallCenter("", "Relatedpartydata", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        val.branch_id = dt.Rows[0][0].ToString();
                        val.BRANCH_NAME = dt.Rows[0][1].ToString();
                        val.reg_name = dt.Rows[0][2].ToString();
                        val.area_name = dt.Rows[0][3].ToString();
                        val.call_type = dt.Rows[0][4].ToString();
                        val.registration_date = dt.Rows[0][5].ToString();
                        val.enterd_by = dt.Rows[0][6].ToString();
                        val.complaint_id = dt.Rows[0][7].ToString();
                        val.product = dt.Rows[0][8].ToString();
                        val.existng_cust_no = dt.Rows[0][9].ToString();
                        val.source = dt.Rows[0][10].ToString();
                        val.dispositionname = dt.Rows[0][11].ToString();
                        val.subdispositionname = dt.Rows[0][12].ToString();
                        val.exis_cust_mob = dt.Rows[0][13].ToString();
                        val.details_of_complaint = dt.Rows[0][14].ToString();
                        val.ho_rmk = dt.Rows[0][15].ToString();
                        val.bh_remark = dt.Rows[0][16].ToString();
                        val.ah_remark = dt.Rows[0][17].ToString();
                        val.rm_remark = dt.Rows[0][18].ToString();
                        val.fzm_remark = dt.Rows[0][19].ToString();


                        val.status = "111";
                        val.result = "Success";


                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }



                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }


            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }


            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void csc_call_DocUpload(string data, string document)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            string input = dataArray[1];




            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                try
                {
                    result = lb.proc_purchase_docupload("1001", input);

                    String pt1 = lb.DocumentUpload_ssif(result, document);

                    if (pt1 == "111")
                    {
                        resultModel.status = "111";
                        resultModel.result = "Document uploaded !!!";

                    }


                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "failed to upload !!";
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "333";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }






        [WebMethod]
        public void cell_complaint_confirm(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dt = lb.callToProcDoorCallCenter("", "confirmnew", dataArray[1], "");

                    if (dt.Rows[0][0].ToString() == "111")
                    {
                        stack.status = dt.Rows[0][0].ToString();
                        stack.result = "Successfully Submitted";

                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "No data found";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "666";
                stack.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(stack));

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void view_doc_photo(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            cust_photo resultModel = new cust_photo();
            view_result stack = new view_result();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');

            if (isSessionValidess(dataArray[0]) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileQuest;
                string DocFilphoto = "";


                try
                {


                    dt = lb.callToProcDoorCallCenter("", "vewdoic", dataArray[1], "");

                    if (dt.Rows.Count != 0)
                    {
                        string doc = dt.Rows[0][0].ToString();
                        if (dt.Rows.Count > 0)
                        {
                            if (!string.IsNullOrEmpty(doc))
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][0];
                                DocFileQuest = dataArray[1] + "_doc.pdf";
                                if (DownloadFile1(DocFileQuest, s))
                                {
                                    resultModel.status = "111";
                                    resultModel.result = "Success";
                                    resultModel.image = DocFileQuest;
                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "No Image found!";
                                }
                            }
                            else
                            {
                                resultModel.status = "222";
                                resultModel.result = "No Image found!";
                            }

                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "No Image found!";

                        }
                    }
                    else
                    {
                        resultModel.status = "222";
                        resultModel.result = "No data found!";

                    }

                }


                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));

            }
        }

        public class get_access
        {
            public string flag { get; set; }
            public string status { get; set; }
            public string result { get; set; }


        }

        [WebMethod]
        public void getstatus(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            get_access val = new get_access();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dt = lb.callToProcDoorCallCenter("", "sts3", dataArray[1], "");



                    if (dt.Rows.Count > 0 && dt.Rows[0][0].ToString() == "111" || dt.Rows[0][0].ToString() == "222" || dt.Rows[0][0].ToString() == "333" || dt.Rows[0][0].ToString() == "444")
                    {
                        val.flag = dt.Rows[0][0].ToString();
                        val.status = "111";
                        val.result = "Success";
                    }

                    else
                    {
                        val.flag = dt.Rows[0][0].ToString();
                        val.status = "222";
                        val.result = "No Data found";
                    }





                }
                else
                {
                    val.status = "555";
                    val.result = "Session is expired";
                }


            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }


            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }


        [WebMethod]
        public void deleteDownloadFile(string fname)
        {
            System.IO.File.Delete(Server.MapPath("~/images/" + fname));
        }


        [WebMethod]
        public void cell_complaint_exit(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string[] del = dataArray[1].Split('^');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dt = lb.callToProcDoorCallCenter("", "exit", dataArray[1], "");

                    if (dt.Rows[0][0].ToString() == "111")
                    {


                        stack.status = dt.Rows[0][0].ToString();
                        stack.result = "Rejected successfully";
                        deleteDownloadFile(del[0] + "_doc.pdf");


                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "No data found";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "666";
                stack.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(stack));

        }



        public class get_formaccess
        {

            public string data { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }



        [WebMethod]
        public void getformaccess(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            get_formaccess val = new get_formaccess();

            try
            {
                string decryptedIData = Decryptrel(p_data);
                string[] dataArray = decryptedIData.Split('$');



                if (isSessionValidess(dataArray[0]) == "1")


                {
                    dt = lb.callToProcDoorCallCenter("", "access", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        val.data = dt.Rows[0][0].ToString();
                        val.status = "111";
                        val.result = "Success";


                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }



                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }


            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }


            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }



        //-------------------------------120871----Customer Services Cell Complaint in ESS Application-----End------------

        //-------------------------------121064----CRF for BA Mobile Application Customer Complaint Modification ----- Start------------

        public class BA_resultmodel
        {
            public string DOC_ID { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void ba_create_complaint(string data, string document)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();

            BA_resultmodel stack = new BA_resultmodel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dt = lb.proc_mobapp_ngl(163, dataArray[1]);

                    if (dt.Rows[0][0].ToString() == "111")
                    {
                        stack.DOC_ID = dt.Rows[0][2].ToString();
                        string dt1 = lb.DocumentUpload_BA_complaint(stack.DOC_ID, document);

                        if (dt1 == "111")
                        {
                            stack.status = "111";
                            stack.result = "COMPLAINT CREATED";
                        }
                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "NO DATA FOUND";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "666";
                stack.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(stack));

        }

        public class ba_complaints
        {

            public List<ba_complaints_list> ba_complints_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class ba_complaints_list
        {
            public string complaint_id { get; set; }
            public string subject { get; set; }
            public string created_by { get; set; }
            public string created_date { get; set; }
            public string status_id { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_ba_complints_list(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                ba_complaints data2 = new ba_complaints();
                List<ba_complaints_list> get_complaints = new List<ba_complaints_list>();

                try
                {
                    dt = lb.proc_mobapp_ngl(164, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_complaints.Add(new ba_complaints_list()
                            {
                                complaint_id = dr[0].ToString(),
                                subject = dr[1].ToString(),
                                created_by = dr[2].ToString(),
                                created_date = dr[3].ToString(),
                                status_id = dr[4].ToString(),
                            });
                        }

                        data2.ba_complints_list = get_complaints;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }



        //-------------------------------121064----CRF for BA Mobile Application Customer Complaint Modification ----- End------------

        //-------------------------------- 121386 - Pledge receival pending report ---------------------- Start -------

        public class pledge_list_data
        {

            public List<pledge_list_dtls> pledge_list_dtls { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class pledge_list_dtls
        {
            public string CUST_ID { get; set; }
            public string PLEDGE_NO { get; set; }
            public string BRANCH_ID { get; set; }

            public string BRANCH_NAME { get; set; }

            public string REG_NAME { get; set; }

            public string AREA_NAME { get; set; }

            public string ZONAL_NAME { get; set; }
            public string TRA_DT { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void pledgeReceival_pending_data(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];
            // inputData = sessionId:empCode~firstTime^lastTime

            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                pledge_list_data data2 = new pledge_list_data();
                List<pledge_list_dtls> get_pledge_list_dtls = new List<pledge_list_dtls>();

                try
                {
                    dt = lb.PROC_COMMON_SELECT("dsgl_pldg_receival_pndng", "getdata", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_pledge_list_dtls.Add(new pledge_list_dtls()
                            {

                                CUST_ID = dr[0].ToString(),
                                PLEDGE_NO = dr[1].ToString(),
                                BRANCH_ID = dr[2].ToString(),
                                BRANCH_NAME = dr[3].ToString(),
                                AREA_NAME = dr[4].ToString(),
                                REG_NAME = dr[5].ToString(),
                                ZONAL_NAME = dr[6].ToString(),
                                TRA_DT = dr[7].ToString(),

                            });
                        }

                        data2.pledge_list_dtls = get_pledge_list_dtls;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        //-------------------------------- 121386 - Pledge receival pending report ---------------------- End -------

        //-------------------------------- 121401 -  Phase out policy sales employee report in ESS application ---------------------- Start ------- 

        public class phase_out_rpt_dtls
        {

            public List<phase_out_rpt_list> phse_out_rpt_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class phase_out_rpt_list
        {
            public string emp_code { get; set; }
            public string emp_name { get; set; }
            public string post_name { get; set; }
            public string Branch_id { get; set; }
            public string state_name { get; set; }
            public string reg_name { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void getphase_out_rpt(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                phase_out_rpt_dtls data2 = new phase_out_rpt_dtls();
                List<phase_out_rpt_list> get_report = new List<phase_out_rpt_list>();

                try
                {
                    dt = lb.proc_mobapp_ngl(163, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_report.Add(new phase_out_rpt_list()
                            {
                                emp_code = dr[0].ToString(),
                                emp_name = dr[1].ToString(),
                                post_name = dr[2].ToString(),
                                Branch_id = dr[3].ToString(),
                                state_name = dr[4].ToString(),
                                reg_name = dr[5].ToString(),
                            });
                        }

                        data2.phse_out_rpt_list = get_report;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class loan_amnt_resultmodel
        {
            public string loan_amount { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void phase_out_ln_amnt(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            loan_amnt_resultmodel val = new loan_amnt_resultmodel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_mobapp_ngl(164, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        val.loan_amount = dt.Rows[0][0].ToString();

                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        //-------------------------------- 121401 -  Phase out policy sales employee report in ESS application ---------------------- End ------- 

        //----------Girish ---122013---CRF For Work alert report in Mobile application.-----Girish--------122013--------start-----//

        public class Emp_dtls_alert
        {
            public string emp_code { get; set; }
            public string emp_name { get; set; }
            public string branch_id { get; set; }
            public string BRANCH_NAME { get; set; }
            public string designation { get; set; }
            public string dep_name { get; set; }
            public string post_name { get; set; }



            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_dtls_workalert(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Emp_dtls_alert data = new Emp_dtls_alert();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    dt = lb.proc_mobapp_ngl(165, emp_code);

                    if (dt.Rows.Count > 0)

                    {

                        data.emp_code = dt.Rows[0][0].ToString();
                        data.emp_name = dt.Rows[0][1].ToString();
                        data.branch_id = dt.Rows[0][2].ToString();
                        data.BRANCH_NAME = dt.Rows[0][3].ToString();
                        data.designation = dt.Rows[0][4].ToString();
                        data.dep_name = dt.Rows[0][5].ToString();
                        data.post_name = dt.Rows[0][6].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "555";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }

        public class Get_Alert_List
        {
            public List<Alert_List> getAlertList { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class Alert_List
        {
            public string block_id { get; set; }
            public string block_reason { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_WorkAlert_dtls(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_Alert_List details = new Get_Alert_List();
            List<Alert_List> getAlertList = new List<Alert_List>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string priority = data1.Split('~')[1].ToString();
            string emp_code = data1.Split('~')[2].ToString();

            string inputString = priority + '~' + emp_code;

            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_mobapp_ngl(166, inputString);


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getAlertList.Add(new Alert_List()
                            {

                                block_id = dr[0].ToString(),
                                block_reason = dr[1].ToString(),

                            });
                        }
                        details.getAlertList = getAlertList;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No Work Alert Today";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }
        public class work_data
        {
            public string block_count { get; set; }
            public string exit_block { get; set; }
            public string work_alert { get; set; }
            public string promise_loan_count { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_workalert_count(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                work_data data = new work_data();
                // inputString = branch_id;

                try
                {
                    dt = lb.proc_mobapp_sales(245, emp_code);

                    if (dt.Rows.Count > 0)
                    {

                        data.block_count = dt.Rows[0][0].ToString();
                        data.exit_block = dt.Rows[0][1].ToString();
                        data.work_alert = dt.Rows[0][2].ToString();
                        data.promise_loan_count = dt.Rows[0][3].ToString();

                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {
                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }

            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        //----------Girish ---122013---CRF For Work alert report in Mobile application.-----Girish--------122013--------end-----//


        //----------121942 - Sticker Stock Usage and Automation from Store department ----------------------Start-----//
        public class sticker_dtls
        {

            public List<sticker_dtls_list> sticker_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class sticker_dtls_list
        {
            public string id { get; set; }
            public string name { get; set; }
            public string balance_count { get; set; }
            public string usage_count { get; set; }
            public string opening_count { get; set; }
            public string listType { get; set; }
            public string bundle_count { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void sticker_stock_rpt(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                sticker_dtls data2 = new sticker_dtls();
                List<sticker_dtls_list> get_report = new List<sticker_dtls_list>();

                try
                {
                    dt = lb.proc_mobapp_ngl(167, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_report.Add(new sticker_dtls_list()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                                balance_count = dr[2].ToString(),
                                usage_count = dr[3].ToString(),
                                opening_count = dr[4].ToString(),
                                listType = dr[5].ToString(),
                                bundle_count = dr[6].ToString(),
                            });
                        }

                        data2.sticker_dtls_list = get_report;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        //----------121942 - Sticker Stock Usage and Automation from Store department -----------------------End-----//


        //----------Girish ---122549---CRF for Additional verification in Customer on boarding Maker and Checker.-----Girish------start----//


        public class Get_cust_List
        {
            public List<Cust_List> getCustList { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class Cust_List
        {
            public string cust_id { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Onboard_CustList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_cust_List data = new Get_cust_List();
            List<Cust_List> getCustList = new List<Cust_List>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();
            string branch_id = data1.Split('~')[2].ToString();

            string inputString = emp_code + '~' + branch_id;

            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_customer_maker_checker("", "1", inputString, "");


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getCustList.Add(new Cust_List()
                            {

                                cust_id = dr[0].ToString(),

                            });
                        }
                        data.getCustList = getCustList;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {
                        data.status = "222";
                        data.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "You are not authorized";
                }
            }
            else
            {
                data.result = "Session Expired";
                data.status = "555";
            }
            Context.Response.Write(js.Serialize(data));

        }


        public class Cust_data
        {
            public string cust_id { get; set; }
            public string cust_name { get; set; }
            public string fat_hus { get; set; }
            public string house_name { get; set; }
            public string locality { get; set; }
            public string post_office { get; set; }
            public string pin_code { get; set; }
            public string Phone2 { get; set; }
            public string Phone1 { get; set; }
            public string district_name { get; set; }
            public string state_name { get; set; }
            public string country_name { get; set; }
            public string identity_name { get; set; }
            public string id_number { get; set; }
            public string mother_name { get; set; }
            public string prename { get; set; }
            public string language_name { get; set; }
            public string occupation_name { get; set; }
            public string date_of_birth { get; set; }
            public string cust_status { get; set; }
            public string email_id { get; set; }
            public string GENDER { get; set; }
            public string emp_code { get; set; }
            public string religion { get; set; }
            public string caste_name { get; set; }
            public string cust_category { get; set; }
            public string cust_type { get; set; }
            public string pep_description { get; set; }
            public string citizenship { get; set; }
            public string nationality { get; set; }
            public string resident { get; set; }
            public string marital_status { get; set; }
            public string pre_name { get; set; }
            public string Educational_qualification { get; set; }
            public string monthly_income { get; set; }
            public string issue_dt { get; set; }
            public string exp_dt { get; set; }
            public string issue_plce { get; set; }
            public string type_name { get; set; }
            public string media_name { get; set; }
            public string alt_house_name { get; set; }
            public string alt_locality { get; set; }
            public string alt_pin_code { get; set; }
            public string alt_district { get; set; }
            public string alt_state { get; set; }
            public string facebookID { get; set; }
            public string addressProofBilldate { get; set; }
            public string addressProofType { get; set; }
            public string businessCategory { get; set; }
            public string businessSubCategory { get; set; }
            public string CKYCNumber { get; set; }
            public string AnnualIncomeStatus { get; set; }
            public string pan { get; set; }
            public string refname { get; set; }
            public string reltype { get; set; }
            public string mob { get; set; }
            public string alt_post_office { get; set; }
            public string branch_id { get; set; }
            public string created_date { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Onboard_CustDetails(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                Cust_data data = new Cust_data();

                try
                {
                    dt = lb.proc_customer_maker_checker("", "2", cust_id, "");

                    if (dt.Rows.Count > 0)
                    {

                        data.cust_id = dt.Rows[0][0].ToString();
                        data.cust_name = dt.Rows[0][1].ToString();
                        data.fat_hus = dt.Rows[0][2].ToString();
                        data.house_name = dt.Rows[0][3].ToString();
                        data.locality = dt.Rows[0][4].ToString();
                        data.post_office = dt.Rows[0][5].ToString();
                        data.pin_code = dt.Rows[0][6].ToString();
                        data.Phone2 = dt.Rows[0][7].ToString();
                        data.Phone1 = dt.Rows[0][8].ToString();
                        data.district_name = dt.Rows[0][9].ToString();
                        data.state_name = dt.Rows[0][10].ToString();
                        data.country_name = dt.Rows[0][11].ToString();
                        data.identity_name = dt.Rows[0][12].ToString();
                        data.id_number = dt.Rows[0][13].ToString();
                        data.mother_name = dt.Rows[0][14].ToString();
                        data.prename = dt.Rows[0][15].ToString();
                        data.language_name = dt.Rows[0][16].ToString();
                        data.occupation_name = dt.Rows[0][17].ToString();
                        data.date_of_birth = dt.Rows[0][18].ToString();
                        data.cust_status = dt.Rows[0][19].ToString();
                        data.email_id = dt.Rows[0][20].ToString();
                        data.GENDER = dt.Rows[0][21].ToString();
                        data.emp_code = dt.Rows[0][22].ToString();
                        data.religion = dt.Rows[0][23].ToString();
                        data.caste_name = dt.Rows[0][24].ToString();
                        data.cust_category = dt.Rows[0][25].ToString();
                        data.cust_type = dt.Rows[0][26].ToString();
                        data.pep_description = dt.Rows[0][27].ToString();
                        data.citizenship = dt.Rows[0][28].ToString();
                        data.nationality = dt.Rows[0][29].ToString();
                        data.resident = dt.Rows[0][30].ToString();
                        data.marital_status = dt.Rows[0][31].ToString();
                        data.pre_name = dt.Rows[0][32].ToString();
                        data.Educational_qualification = dt.Rows[0][33].ToString();
                        data.monthly_income = dt.Rows[0][34].ToString();
                        data.issue_dt = dt.Rows[0][35].ToString();
                        data.exp_dt = dt.Rows[0][36].ToString();
                        data.issue_plce = dt.Rows[0][37].ToString();
                        data.type_name = dt.Rows[0][38].ToString();
                        data.media_name = dt.Rows[0][39].ToString();
                        data.alt_house_name = dt.Rows[0][40].ToString();
                        data.alt_locality = dt.Rows[0][41].ToString();
                        data.alt_pin_code = dt.Rows[0][42].ToString();
                        data.alt_district = dt.Rows[0][43].ToString();
                        data.alt_state = dt.Rows[0][44].ToString();
                        data.facebookID = dt.Rows[0][45].ToString();
                        data.addressProofBilldate = dt.Rows[0][46].ToString();
                        data.addressProofType = dt.Rows[0][47].ToString();
                        data.businessCategory = dt.Rows[0][48].ToString();
                        data.businessSubCategory = dt.Rows[0][49].ToString();
                        data.CKYCNumber = dt.Rows[0][50].ToString();
                        data.AnnualIncomeStatus = dt.Rows[0][51].ToString();
                        data.pan = dt.Rows[0][52].ToString();
                        data.refname = dt.Rows[0][53].ToString();
                        data.reltype = dt.Rows[0][54].ToString();
                        data.mob = dt.Rows[0][55].ToString();
                        data.alt_post_office = dt.Rows[0][56].ToString();
                        data.branch_id = dt.Rows[0][57].ToString();
                        data.created_date = dt.Rows[0][58].ToString();

                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {
                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }

            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void OnboardCust_MakerChecker_Confirm(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();
            string verified_emp_code = data1.Split('~')[2].ToString();
            string remarks = data1.Split('~')[3].ToString();

            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = cust_id + '~' + verified_emp_code + '~' + remarks;
                try
                {
                    dt = lb.proc_customer_maker_checker("", "3", inputString, "");

                    if (dt.Rows[0][0].ToString() == "Approved Successfully!!")
                    {

                        resultModel.status = "111";
                        resultModel.result = "Approved Successfully!!";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Please Upload Signed KYC through UPLOAD CERTIFIED KYC Tab in CGL Module!!";
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void OnboardCust_MakerChecker_Reject(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();
            string verified_emp_code = data1.Split('~')[2].ToString();
            string remarks = data1.Split('~')[3].ToString();
            string btn_id = data1.Split('~')[4].ToString();

            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = cust_id + '~' + verified_emp_code + '~' + remarks + '~' + btn_id;
                try
                {
                    dt = lb.proc_customer_maker_checker("", "4", inputString, "");

                    if (dt.Rows[0][0].ToString() == "Successfully Rejected !!")
                    {

                        resultModel.status = "111";
                        resultModel.result = "Successfully Rejected !!";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Error!!";
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }



        public class Doc_data
        {
            public string kyc_photo { get; set; }
            public string pledge_photo { get; set; }
            public string pan_copy { get; set; }
            public string addr_attach { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void OnboardCust_DocumentList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1, dt2, dt3 = new DataTable();
                Doc_data data = new Doc_data();

                try
                {
                    dt = lb.proc_customer_maker_checker("", "5", cust_id, "");
                    dt1 = lb.proc_customer_maker_checker("", "6", cust_id, "");
                    dt2 = lb.proc_customer_maker_checker("", "7", cust_id, "");
                    dt3 = lb.proc_customer_maker_checker("", "8", cust_id, "");

                    if ((dt.Rows.Count > 0) || (dt1.Rows.Count > 0) || (dt2.Rows.Count > 0) || (dt3.Rows.Count > 0))

                    {

                        data.kyc_photo = dt.Rows[0][1].ToString();
                        data.pledge_photo = dt1.Rows[0][1].ToString();
                        data.pan_copy = dt2.Rows[0][1].ToString();
                        data.addr_attach = dt3.Rows[0][1].ToString();

                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {
                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "111";
                    data.result = "Success";

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }

            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_OnboardCust_Docs(string p_data, string flag)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            //work_doc_data1 resultModel = new work_doc_data1();
            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();
            string extn, stringDocument, stringImage, filename;
            byte[] byteDocument, byteImage;

            string DocFileName = "", ImageName;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1, dt2, dt3 = new DataTable();
                Doc_data data = new Doc_data(); data = new Doc_data();

                try
                {
                    if (flag == "1")
                    {


                        dt = lb.proc_customer_maker_checker("", "5", cust_id, "");
                        if (dt.Rows.Count != 0)
                        {
                            string image1 = dt.Rows[0][0].ToString();
                            if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                            {
                                dt = lb.proc_customer_maker_checker("", "5", cust_id, "");
                                byteImage = (byte[])dt.Rows[0][0];
                                stringImage = Convert.ToBase64String(byteImage);
                                ImageName = cust_id;
                                extn = GetFileExtensionFromBytes(byteImage);

                                if (extn == ".tif" || extn == ".unknown")
                                {
                                    DocFileName = cust_id + extn;
                                    byteImage = ConvertToJpg(byteImage);
                                    extn = GetFileExtensionFromBytes(byteImage);
                                }


                                if (DownloadFile2(ImageName + "_kyc" + extn, byteImage))
                                {
                                    data.kyc_photo = ImageName + "_kyc" + extn;
                                    //data.extn = extn;
                                }

                                data.status = "111";
                                data.result = "Success";
                            }

                            else
                            {
                                data.status = "333";
                                data.result = "No Image found!";

                            }
                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }


                    else if (flag == "2")
                    {
                        dt1 = lb.proc_customer_maker_checker("", "6", cust_id, "");
                        if (dt1.Rows.Count != 0)
                        {

                            string image1 = dt1.Rows[0][0].ToString();
                            if ((dt1.Rows.Count > 0) && (dt1.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                            {
                                byteImage = (byte[])dt1.Rows[0][0];
                                stringImage = Convert.ToBase64String(byteImage);
                                ImageName = cust_id;
                                extn = GetFileExtensionFromBytes(byteImage);

                                if (extn == ".tif" || extn == ".unknown")
                                {
                                    DocFileName = cust_id + extn;
                                    byteImage = ConvertToJpg(byteImage);
                                    extn = GetFileExtensionFromBytes(byteImage);
                                }


                                if (DownloadFile2(ImageName + "_pledge" + extn, byteImage))
                                {
                                    data.pledge_photo = ImageName + "_pledge" + extn;
                                    //data.extn = extn;
                                }

                                data.status = "111";
                                data.result = "Success";
                            }

                            else
                            {
                                data.status = "333";
                                data.result = "No Image found!";

                            }
                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                    else if (flag == "3")
                    {
                        dt2 = lb.proc_customer_maker_checker("", "7", cust_id, "");
                        if (dt2.Rows.Count != 0)
                        {

                            string image1 = dt2.Rows[0][0].ToString();
                            if ((dt2.Rows.Count > 0) && (dt2.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                            {
                                byteImage = (byte[])dt2.Rows[0][0];
                                stringImage = Convert.ToBase64String(byteImage);
                                ImageName = cust_id;
                                extn = GetFileExtensionFromBytes(byteImage);

                                if (extn == ".tif" || extn == ".unknown")
                                {
                                    DocFileName = cust_id + extn;
                                    byteImage = ConvertToJpg(byteImage);
                                    extn = GetFileExtensionFromBytes(byteImage);
                                }


                                if (DownloadFile2(ImageName + "_pan" + extn, byteImage))
                                {
                                    data.pan_copy = ImageName + "_pan" + extn;
                                    //data.extn = extn;
                                }



                                data.status = "111";
                                data.result = "Success";
                            }

                            else
                            {
                                data.status = "333";
                                data.result = "No Image found!";

                            }
                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                    else if (flag == "4")
                    {
                        dt3 = lb.proc_customer_maker_checker("", "8", cust_id, "");
                        if (dt3.Rows.Count != 0)
                        {

                            string image1 = dt3.Rows[0][0].ToString();
                            if ((dt3.Rows.Count > 0) && (dt3.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                            {
                                byteImage = (byte[])dt3.Rows[0][0];
                                stringImage = Convert.ToBase64String(byteImage);
                                ImageName = cust_id;
                                extn = GetFileExtensionFromBytes(byteImage);

                                if (extn == ".tif" || extn == ".unknown")
                                {
                                    DocFileName = cust_id + extn;
                                    byteImage = ConvertToJpg(byteImage);
                                    extn = GetFileExtensionFromBytes(byteImage);
                                }


                                if (DownloadFile2(ImageName + "_address" + extn, byteImage))
                                {
                                    data.addr_attach = ImageName + "_address" + extn;
                                    //data.extn = extn;
                                }



                                data.status = "111";
                                data.result = "Success";
                            }

                            else
                            {
                                data.status = "333";
                                data.result = "No Image found!";

                            }
                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }




        //----------Girish ---122549---CRF for Additional verification in Customer on boarding Maker and Checker.-----Girish------end----//


        //----------Girish ---122849---CRF for Proposal for OTP Controls in Pledge Settlement.-----Girish------Start----//

        public class Get_pledge_List_otp
        {
            public List<otp_pledge_List> getPledgeList { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class otp_pledge_List
        {
            public string pledge_no { get; set; }
            public string doc_id { get; set; }



        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_PledgeList_OTP_NotSend(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_pledge_List_otp details = new Get_pledge_List_otp();
            List<otp_pledge_List> getPledgeList = new List<otp_pledge_List>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();


            // string inputString = priority + '~' + emp_code;

            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_settlement_without_otp("", "load_pledge", emp_code, "");


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getPledgeList.Add(new otp_pledge_List()
                            {

                                pledge_no = dr[0].ToString(),
                                doc_id = dr[1].ToString(),



                            });
                        }
                        details.getPledgeList = getPledgeList;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }




        public class Cust_data_dtls
        {
            public string cust_id { get; set; }
            public string due_dt { get; set; }
            public string pledge_val { get; set; }
            public string act_weight { get; set; }
            public string net_weight { get; set; }
            public string scheme_nm { get; set; }
            public string cust_name { get; set; }
            public string fath_house_name { get; set; }
            public string locality { get; set; }
            public string tra_dt { get; set; }
            public string branch_name { get; set; }
            public string branch_id { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_cust_details_otp(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string pledge_no = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                Cust_data_dtls data = new Cust_data_dtls();
                // inputString = branch_id;

                try
                {
                    dt = lb.proc_settlement_without_otp("", "pledge_dtls", pledge_no, "");

                    if (dt.Rows.Count > 0)
                    {
                        data.cust_id = dt.Rows[0][0].ToString();
                        data.due_dt = dt.Rows[0][1].ToString();
                        data.pledge_val = dt.Rows[0][2].ToString();
                        data.act_weight = dt.Rows[0][3].ToString();
                        data.net_weight = dt.Rows[0][4].ToString();
                        data.scheme_nm = dt.Rows[0][5].ToString();
                        data.cust_name = dt.Rows[0][6].ToString();
                        data.fath_house_name = dt.Rows[0][7].ToString();
                        data.locality = dt.Rows[0][8].ToString();
                        data.tra_dt = dt.Rows[0][9].ToString();
                        data.branch_name = dt.Rows[0][10].ToString();
                        data.branch_id = dt.Rows[0][11].ToString();

                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {
                        data.status = "222";
                        data.result = "No data found";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }

            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Recomm_Apprv_OTP_NotSend(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string doc_id = data1.Split('~')[1].ToString();
            string remarks = data1.Split('~')[2].ToString();
            string emp_code = data1.Split('~')[3].ToString();
            string flag = data1.Split('~')[4].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                string inputString = doc_id + '~' + remarks + '~' + emp_code;

                try
                {

                    if (flag == "1")
                    {
                        dt = lb.proc_settlement_without_otp("", "Approve_request", inputString, "");

                        if (dt.Rows[0][0].ToString() == "111")
                        {


                            resultModel.status = "111";
                            resultModel.result = "Confirmed Successfully";

                        }
                        else
                        {

                            resultModel.status = "222";
                            resultModel.result = "Not Confirmed";
                        }
                    }

                    else if (flag == "2")
                    {
                        dt = lb.proc_settlement_without_otp("", "Reject_request", inputString, "");

                        if (dt.Rows[0][0].ToString() == "111")
                        {


                            resultModel.status = "222";
                            resultModel.result = "Rejected Successfully";

                        }
                        else
                        {

                            resultModel.status = "333";
                            resultModel.result = "error found";
                        }

                    }
                    else
                    {
                        resultModel.status = "444";
                        resultModel.result = "error";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }



        //----------Girish ---122849---CRF for Proposal for OTP Controls in Pledge Settlement.-----Girish------end----//


        //-----------Girish ---122950--FMR 1 Document Upload in ESS.------start-----//

        public class Get_frad_list
        {
            public List<fraud_list> fraud_data { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class fraud_list
        {
            public string fraud_id { get; set; }
            public string fraud_dtls { get; set; }



        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_fraud_list(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_frad_list data = new Get_frad_list();
            List<fraud_list> fraud_data = new List<fraud_list>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.COMP_QRY_SELECT("load_fraud_list", emp_code, "", "", "");


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            fraud_data.Add(new fraud_list()
                            {

                                fraud_id = dr[0].ToString(),
                                fraud_dtls = dr[1].ToString(),


                            });
                        }
                        data.fraud_data = fraud_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {
                        data.status = "222";
                        data.result = "No data";
                    }
                }
                catch (Exception ex)
                {
                    data.status = "666";
                    data.result = "Sorry..Unable to process";
                }
            }
            else
            {
                data.result = "Session Expired";
                data.status = "555";
            }
            Context.Response.Write(js.Serialize(data));

        }


        public class fraud_dtl
        {
            public string branch_name { get; set; }
            public string fraud_type { get; set; }
            public string zone_name { get; set; }
            public string amount { get; set; }
            public string irregularity { get; set; }
            public string detected_date { get; set; }
            public string fraud_dtls { get; set; }



            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_fraud_dtls(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            fraud_dtl data = new fraud_dtl();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string fraud_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    dt = lb.COMP_QRY_SELECT("Get_fraud_details", fraud_id, "", "", "");

                    if (dt.Rows.Count > 0)

                    {

                        data.branch_name = dt.Rows[0][0].ToString();
                        data.fraud_type = dt.Rows[0][1].ToString();
                        data.zone_name = dt.Rows[0][2].ToString();
                        data.amount = dt.Rows[0][3].ToString();
                        data.irregularity = dt.Rows[0][4].ToString();
                        data.detected_date = dt.Rows[0][5].ToString();
                        data.fraud_dtls = dt.Rows[0][6].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "555";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Upload_F11_docs(string p_data, string Document)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            fraud_dtl data = new fraud_dtl();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('µ')[0].ToString();
            string fraud_id = data1.Split('µ')[1].ToString();
            string file_no = data1.Split('µ')[2].ToString();
            string file_name = data1.Split('µ')[4].ToString();
            string uploaded_by = data1.Split('µ')[5].ToString();

            string inputString = fraud_id + 'µ' + file_no + 'µ' + "" + 'µ' + file_name + 'µ' + uploaded_by;

            if (isSessionValid(sessionId) == "1")
            {
                String result = "";

                try
                {
                    byte[] imgsrc = Convert.FromBase64String(Document);
                    //result = lb.proc_Pwa_DocUpload("19", inputString, imgsrc);

                    dt = lb.proc_mobapp_ngl(180, inputString);

                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                    {

                        String pt = lb.DocumentUpload(dt.Rows[0][1].ToString(), Document);
                        if (pt == "111")
                        {
                            resultModel.status = "111";
                            resultModel.result = "Confirmed Successfully!!!";

                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "Something went wrong!!";
                        }

                    }
                    else
                    {
                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }
                }
                catch (Exception ex)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "555";
            }

            Context.Response.Write(js.Serialize(resultModel));

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Submit_F11_data(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            fraud_dtl data = new fraud_dtl();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('µ')[0].ToString();
            string fraud_id = data1.Split('µ')[1].ToString();
            string uploaded_by = data1.Split('µ')[2].ToString();

            string inputString = fraud_id + 'µ' + uploaded_by;

            if (isSessionValid(sessionId) == "1")
            {
                String result = "";

                try
                {

                    dt = lb.proc_mobapp_ngl(181, inputString);

                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                    {

                        resultModel.status = "111";
                        resultModel.result = "Submitted Successfully!!!";

                    }
                    else
                    {
                        resultModel.status = "222";
                        resultModel.result = "Error found!!!";
                    }
                }
                catch (Exception ex)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "555";
            }

            Context.Response.Write(js.Serialize(resultModel));

        }

        public class Get_F11Doc_List
        {
            public List<F11Doc_List> getF11DocList { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class F11Doc_List
        {
            public string sl_no { get; set; }
            public string file_name { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_F11_UploadDocs(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_F11Doc_List details = new Get_F11Doc_List();
            List<F11Doc_List> getF11DocList = new List<F11Doc_List>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string fraud_id = data1.Split('~')[1].ToString();
            string uploaded_by = data1.Split('~')[2].ToString();

            string inputString = fraud_id + '~' + uploaded_by;

            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_mobapp_ngl(173, inputString);


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getF11DocList.Add(new F11Doc_List()
                            {

                                sl_no = dr[0].ToString(),
                                file_name = dr[1].ToString(),

                            });
                        }
                        details.getF11DocList = getF11DocList;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No Image Found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Delete_F11_Docs(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string sl_no = data1.Split('~')[1].ToString();
            string fraud_id = data1.Split('~')[2].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                string inputString = sl_no + '~' + fraud_id;

                try
                {
                    dt = lb.proc_mobapp_ngl(174, inputString);

                    if (dt.Rows[0][0].ToString() == "111")
                    {


                        resultModel.status = "111";
                        resultModel.result = "Deleted Successfully";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Not Deleted";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        //-----------Girish ---122950--FMR 1 Document Upload in ESS.------end-----//

        // --------122961----- approval of implementing NEFT/KYC/Mobile Number verification  ------ Start


        public class dtls
        {

            public List<lists> dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class lists
        {
            public string id { get; set; }
            public string name { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void getBranch_listfor_approval(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                dtls data2 = new dtls();
                List<lists> get_list = new List<lists>();

                try
                {
                    dt = lb.proc_mobapp_ngl(175, dataArray[1]);

                    if (dt.Rows.Count > 0 && dt.Rows[0][0].ToString() != "0000")
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_list.Add(new lists()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.dtls_list = get_list;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "Nothing Pending For Approval";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void getCustomer_listfor_approval(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                dtls data2 = new dtls();
                List<lists> get_list = new List<lists>();

                try
                {
                    dt = lb.proc_mobapp_ngl(176, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_list.Add(new lists()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.dtls_list = get_list;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "Nothing Pending For Approval";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        public class Customer_dtls_resultmodel
        {
            public string cust_id { get; set; }
            public string cust_name { get; set; }
            public string beneficiary_account { get; set; }
            public string ifsc_code { get; set; }
            public string beneficiary_branch { get; set; }
            public string account_name { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void Get_customer_dtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            Customer_dtls_resultmodel val = new Customer_dtls_resultmodel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_mobapp_ngl(177, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        val.cust_id = dt.Rows[0][0].ToString();
                        val.cust_name = dt.Rows[0][1].ToString();
                        val.beneficiary_account = dt.Rows[0][2].ToString();
                        val.ifsc_code = dt.Rows[0][3].ToString();
                        val.beneficiary_branch = dt.Rows[0][4].ToString();
                        val.account_name = dt.Rows[0][5].ToString();

                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void view_document(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel_doc resultModel = new ResultModel_doc();

            string data1 = Decryptrel(data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();

            string inputstring = cust_id;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileName;
                string newData;


                try
                {
                    dt = lb.proc_mobapp_ngl(178, cust_id);
                    if (dt.Rows.Count != 0)
                    {

                        string image1 = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][0];

                                byte[] tiffjpgByte = justfuncJpegBytes(s);
                                DocFileName = cust_id + "-.jpg";
                                if (DownloadFile2(DocFileName, tiffjpgByte))
                                {
                                    resultModel.status = "111";
                                    resultModel.result = "Success";
                                    resultModel.image = DocFileName;

                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "Failed";
                                }
                            }
                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "No Image found!";

                        }

                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));

            }
        }

        [WebMethod]
        public void confirm_or_reject_neft(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dt = lb.proc_mobapp_ngl(179, dataArray[1]);

                    if (dt.Rows[0][0].ToString() == "111")
                    {
                        stack.status = "111";
                        stack.result = dt.Rows[0][1].ToString();

                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "Something went wrong";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "666";
                stack.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(stack));

        }
        // --------122961----- approval of implementing NEFT/KYC/Mobile Number verification  ------ End

        //-----------Girish ---1223092--Collection employee calling and visiting update in ESS.------start-----//

        public class Get_Cust_List
        {
            public List<Cust_List_call> getCustList { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class Cust_List_call
        {
            public string cust_id { get; set; }
            public string loan_id { get; set; }

            public string emi_dt { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_CustList_collection(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_Cust_List details = new Get_Cust_List();
            List<Cust_List_call> getCustList = new List<Cust_List_call>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string menu_id = data1.Split('~')[1].ToString();
            string employee_code = data1.Split('~')[2].ToString();

            string inputString = menu_id + '~' + employee_code;

            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_mobapp_ngl(182, inputString);


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getCustList.Add(new Cust_List_call()
                            {

                                cust_id = dr[0].ToString(),
                                loan_id = dr[1].ToString(),
                                emi_dt = dr[2].ToString()

                            });
                        }
                        details.getCustList = getCustList;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No Data Found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }




        public class Cust_dtl
        {
            public string cust_name { get; set; }
            public string loan_id { get; set; }
            public string loan_amount { get; set; }
            public string cust_id { get; set; }
            public string emi_amount { get; set; }
            public string emi_dt { get; set; }
            public string overdue_amount { get; set; }

            public string loan_outstanding { get; set; }
            public string last_collection_dt { get; set; }
            public string Foreclosure_amt { get; set; }
            public string LagDaysofDelinquecy { get; set; }
            public string previous_remark { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_CustLoanDtls_collection(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Cust_dtl data = new Cust_dtl();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string loan_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    dt = lb.proc_mobapp_ngl(183, loan_id);

                    if (dt.Rows.Count > 0)

                    {

                        data.cust_name = dt.Rows[0][0].ToString();
                        data.loan_id = dt.Rows[0][1].ToString();
                        data.loan_amount = dt.Rows[0][2].ToString();
                        data.cust_id = dt.Rows[0][3].ToString();
                        data.emi_amount = dt.Rows[0][4].ToString();
                        data.emi_dt = dt.Rows[0][5].ToString();
                        data.overdue_amount = dt.Rows[0][6].ToString();
                        data.loan_outstanding = dt.Rows[0][7].ToString();
                        data.last_collection_dt = dt.Rows[0][8].ToString();
                        data.Foreclosure_amt = dt.Rows[0][9].ToString();
                        data.LagDaysofDelinquecy = dt.Rows[0][10].ToString();
                        data.previous_remark = dt.Rows[0][11].ToString();

                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "555";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }



        public class Cust_appdtl
        {
            public string applicant_name { get; set; }
            public string current_address { get; set; }
            public string Permanent_address { get; set; }
            public string Shop_Address { get; set; }
            public string phone { get; set; }
            public string mobile { get; set; }

            public string change_ph_no { get; set; }
            public string change_address { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Cust_ApplDtls_collection(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Cust_appdtl data = new Cust_appdtl();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string loan_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    dt = lb.proc_mobapp_ngl(184, loan_id);

                    if (dt.Rows.Count > 0)

                    {

                        data.applicant_name = dt.Rows[0][0].ToString();
                        data.current_address = dt.Rows[0][1].ToString();
                        data.Permanent_address = dt.Rows[0][2].ToString();
                        data.Shop_Address = dt.Rows[0][3].ToString();
                        data.phone = dt.Rows[0][4].ToString();
                        data.mobile = dt.Rows[0][5].ToString();
                        data.change_ph_no = dt.Rows[0][6].ToString();
                        data.change_address = dt.Rows[0][7].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "555";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }



        public class Get_Cust_Coappdtl
        {
            public List<Cust_Coappdtl> getCoapplList { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class Cust_Coappdtl
        {
            public string co_applicant_name { get; set; }
            public string current_address { get; set; }
            public string Permanent_address { get; set; }
            public string Shop_Address { get; set; }
            public string phone { get; set; }
            public string mobile { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Cust_CoApplDtls_collection(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_Cust_Coappdtl details = new Get_Cust_Coappdtl();
            List<Cust_Coappdtl> getCoapplList = new List<Cust_Coappdtl>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string loan_id = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_mobapp_ngl(185, loan_id);


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getCoapplList.Add(new Cust_Coappdtl()
                            {

                                co_applicant_name = dr[0].ToString(),
                                current_address = dr[1].ToString(),
                                Permanent_address = dr[2].ToString(),
                                Shop_Address = dr[3].ToString(),
                                phone = dr[4].ToString(),
                                mobile = dr[5].ToString(),

                            });
                        }
                        details.getCoapplList = getCoapplList;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No Data Found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }


        //-----------Girish ---1223092--Collection employee calling and visiting update in ESS.------end-----//


        //-----------Girish ---123369--CRF for Pay u manual entry approval in ESS application.------start-----//
        public class Get_schme_List
        {
            public List<schme_List> schme_data { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class schme_List
        {
            public string scheme_id { get; set; }
            public string scheme_name { get; set; }
            public string DEPARTMENT_ID { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_SchemeList_payU(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_schme_List details = new Get_schme_List();
            List<schme_List> schme_data = new List<schme_List>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string EMP_CODE = data1.Split('~')[1].ToString();

            // string inputString = menu_id + '~' + employee_code;

            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_new_application("SCHEME", EMP_CODE, "", "");


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            schme_data.Add(new schme_List()
                            {

                                scheme_id = dr[0].ToString(),
                                scheme_name = dr[1].ToString(),
                                DEPARTMENT_ID = dr[2].ToString(),

                            });
                        }
                        details.schme_data = schme_data;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No Data Found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }



        public class Get_Tran_dtl
        {
            public List<Tran_dtl> tran_data { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class Tran_dtl
        {
            public string tra_id { get; set; }
            public string loan_dtls { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_TranDtls_payU(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_Tran_dtl details = new Get_Tran_dtl();
            List<Tran_dtl> tran_data = new List<Tran_dtl>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string scheme_id = data1.Split('~')[1].ToString();
            string emp_id = data1.Split('~')[2].ToString();

            // string inputString = menu_id + '~' + employee_code;

            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_new_application("PAYU_COLLECTION", scheme_id, emp_id, "");

                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "000"))
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            tran_data.Add(new Tran_dtl()
                            {

                                tra_id = dr[0].ToString(),
                                loan_dtls = dr[1].ToString(),


                            });
                        }
                        details.tran_data = tran_data;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No Data Found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }



        public class Loan_dtl
        {
            public string loan_amount { get; set; }
            public string loan_dt { get; set; }
            public string int_rate { get; set; }
            public string maturity_date { get; set; }
            public string emi { get; set; }
            public string inst_paid { get; set; }
            public string name { get; set; }
            public string branch_id { get; set; }
            public string tra_dt { get; set; }
            public string loan_amt { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_LoanDtls_payU(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Loan_dtl data = new Loan_dtl();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string loan_id = data1.Split('~')[1].ToString();
            string tra_id = data1.Split('~')[2].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    dt = lb.proc_new_application("GETLOAN", loan_id, tra_id, "");

                    if (dt.Rows.Count > 0)

                    {

                        data.loan_amount = dt.Rows[0][0].ToString();
                        data.loan_dt = dt.Rows[0][1].ToString();
                        data.int_rate = dt.Rows[0][2].ToString();
                        data.maturity_date = dt.Rows[0][3].ToString();
                        data.emi = dt.Rows[0][4].ToString();
                        data.inst_paid = dt.Rows[0][5].ToString();
                        data.name = dt.Rows[0][6].ToString();
                        data.branch_id = dt.Rows[0][7].ToString();
                        data.tra_dt = dt.Rows[0][8].ToString();
                        data.loan_amt = dt.Rows[0][9].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "555";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }

        public class Get_apprv_List
        {
            public List<apprv_List> apprv_data { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class apprv_List
        {
            public string tra_id { get; set; }
            public string loan_no { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_LoanListApprov_payU(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_apprv_List details = new Get_apprv_List();
            List<apprv_List> apprv_data = new List<apprv_List>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string scheme_id = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_new_application("PAYU_COLLECTION_CONFIRM", scheme_id, "", "");


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            apprv_data.Add(new apprv_List()
                            {

                                tra_id = dr[0].ToString(),
                                loan_no = dr[1].ToString(),

                            });
                        }
                        details.apprv_data = apprv_data;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No Data Found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }

        public class Loan_dtl_aprv
        {
            public string loan_amount { get; set; }
            public string loan_dt { get; set; }
            public string int_rate { get; set; }
            public string maturity_date { get; set; }
            public string emi_amnt { get; set; }
            public string pay_amt { get; set; }
            public string cust_name { get; set; }
            public string branch_id { get; set; }
            public string value_dt { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_LoanDtlsApprov_payU(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Loan_dtl_aprv data = new Loan_dtl_aprv();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string loan_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    dt = lb.proc_new_application("PAYU_COLLECTION_ENTRY", loan_id, "", "");

                    if (dt.Rows.Count > 0)

                    {

                        data.loan_amount = dt.Rows[0][0].ToString();
                        data.loan_dt = dt.Rows[0][1].ToString();
                        data.int_rate = dt.Rows[0][2].ToString();
                        data.maturity_date = dt.Rows[0][3].ToString();
                        data.emi_amnt = dt.Rows[0][4].ToString();
                        data.pay_amt = dt.Rows[0][5].ToString();
                        data.cust_name = dt.Rows[0][6].ToString();
                        data.branch_id = dt.Rows[0][7].ToString();
                        data.value_dt = dt.Rows[0][8].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "555";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Submit_PayU_Entry(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string LOAN_NO = data1.Split('~')[1].ToString();
            string LOAN_AMT = data1.Split('~')[2].ToString();
            string PAY_AMT = data1.Split('~')[3].ToString();
            string CUST_NAME = data1.Split('~')[4].ToString();
            string INTEREST = data1.Split('~')[5].ToString();
            string LOAN_DATE = data1.Split('~')[6].ToString();
            string MATUR_DATE = data1.Split('~')[7].ToString();
            string EMI_AMT = data1.Split('~')[8].ToString();
            string MAKER = data1.Split('~')[9].ToString();
            string BRANCH = data1.Split('~')[10].ToString();
            string TRA_ID = data1.Split('~')[11].ToString();
            string value_dt = data1.Split('~')[12].ToString();
            string scheme_id = data1.Split('~')[13].ToString();



            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = LOAN_NO + '~' + LOAN_AMT + '~' + PAY_AMT + '~' + CUST_NAME + '~' + INTEREST + '~' + LOAN_DATE + '~' + MATUR_DATE + '~' + EMI_AMT + '~' + MAKER + '~' + BRANCH + '~' + TRA_ID + '~' + value_dt + '~' + scheme_id;

                try
                {
                    dt = lb.proc_nloan_confirm_lead("PAYU_ENTRY", inputString);

                    if (dt.Rows[0][0].ToString() == "Success")
                    {


                        resultModel.status = "111";
                        resultModel.result = "Submitted Successfully";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "failed";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Approve_PayU_Entry(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('µ')[0].ToString();
            string tra_id = data1.Split('µ')[1].ToString();
            string usr_id = data1.Split('µ')[2].ToString();
            string loan_id = data1.Split('µ')[4].ToString();
            string val_date = data1.Split('µ')[5].ToString();
            string collect_amt = data1.Split('µ')[6].ToString();
            string btn_id = data1.Split('µ')[7].ToString();



            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = tra_id + 'µ' + usr_id + 'µ' + "" + 'µ' + loan_id + 'µ' + val_date;

                try
                {
                    if (btn_id == "1")
                    {
                        dt = lb.PROC_PLOAN_PAYU("", "", collect_amt, inputString);

                        if (dt.Rows[0][0].ToString() == "updated")
                        {


                            resultModel.status = "111";
                            resultModel.result = "Approved Successfully";

                        }
                    }
                    else if (btn_id == "2")
                    {
                        dt = lb.proc_nloan_confirm_lead("REJECT", loan_id);

                        if (dt.Rows[0][0].ToString() == "Success")
                        {


                            resultModel.status = "111";
                            resultModel.result = "Rejected Successfully";

                        }
                    }

                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "failed";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }



        //-----------Girish ---123369--CRF for Pay u manual entry approval in ESS application.------end-----//


        //----123236---------Changing the approval process for modifying the customer details after the completion of customer on boarding through Hyper Verge and Juksiyo modules.


        public class zone_dtls
        {

            public List<get_zone_dtls> zone_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class get_zone_dtls
        {
            public string zoneid { get; set; }
            public string zonename { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Getzone_dtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                zone_dtls data2 = new zone_dtls();
                List<get_zone_dtls> get_dtls = new List<get_zone_dtls>();

                try
                {
                    dt = lb.PROC_CUST_HOAPPS("", "A", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new get_zone_dtls()
                            {
                                zoneid = dr[0].ToString(),
                                zonename = dr[1].ToString(),

                            });
                        }

                        data2.zone_dtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        public class Branch_dtls
        {

            public List<get_branch_dtls> branch_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class get_branch_dtls
        {
            public string branchid { get; set; }
            public string branchname { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Getbranch_dtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                Branch_dtls data2 = new Branch_dtls();
                List<get_branch_dtls> get_dtls = new List<get_branch_dtls>();

                try
                {
                    dt = lb.PROC_CUST_HOAPPS("", "C", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new get_branch_dtls()
                            {
                                branchid = dr[0].ToString(),
                                branchname = dr[1].ToString(),

                            });
                        }

                        data2.branch_dtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        public class Cust_dtls1
        {

            public List<get_Cust_dtls> Cust_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class get_Cust_dtls
        {
            public string cutsid { get; set; }
            public string custname { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void GetCust_dtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                Cust_dtls1 data2 = new Cust_dtls1();
                List<get_Cust_dtls> get_dtls = new List<get_Cust_dtls>();

                try
                {
                    dt = lb.PROC_CUST_HOAPPS("", "N", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new get_Cust_dtls()
                            {
                                cutsid = dr[0].ToString(),
                                custname = dr[1].ToString(),

                            });
                        }

                        data2.Cust_dtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        public class hypervrgCustomer_list
        {

            public List<hypervrgCustomer_dtls> Cust_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class hypervrgCustomer_dtls
        {
            public string Reqbr { get; set; }

            public string Reqby { get; set; }
            public string Reqdt { get; set; }
            public string Recrmk { get; set; }
            public string Recby { get; set; }
            public string Recdt { get; set; }
            public string kycty { get; set; }
            public string kycno { get; set; }
            public string cunm { get; set; }
            public string honm { get; set; }
            public string strt { get; set; }
            public string pnsl { get; set; }
            public string ph { get; set; }
            public string mo { get; set; }
            public string oc { get; set; }
            public string cuph { get; set; }
            public string kyph { get; set; }
            public string dob { get; set; }
            public string iod { get; set; }
            public string eod { get; set; }
            public string gen { get; set; }
            public string resi { get; set; }
            public string fnm { get; set; }
            public string mnm { get; set; }
            public string oidno { get; set; }
            public string oidnm { get; set; }
            public string ohunm { get; set; }
            public string oluc { get; set; }
            public string opin { get; set; }
            public string ost { get; set; }
            public string omo { get; set; }
            public string oph { get; set; }
            public string ooc { get; set; }
            public string ocnm { get; set; }
            public string odob { get; set; }
            public string oiod { get; set; }
            public string oeod { get; set; }
            public string ogen { get; set; }
            public string oresi { get; set; }
            public string ofnm { get; set; }
            public string omnm { get; set; }
            public string rec2 { get; set; }
            public string rec2rmk { get; set; }
            public string rec2dt { get; set; }
            public string rec3 { get; set; }
            public string rec3rmk { get; set; }
            public string rec3dt { get; set; }
            public string rec4 { get; set; }
            public string rec4rmk { get; set; }
            public string rec4dt { get; set; }
            public string cusphoto { get; set; }
            public string kycphoto { get; set; }
            public string nluc { get; set; }

        }

        [WebMethod]
        public void Get_HyperVrgcustomer_dtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {

                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                hypervrgCustomer_list data2 = new hypervrgCustomer_list();
                List<hypervrgCustomer_dtls> get_dtls = new List<hypervrgCustomer_dtls>();

                try
                {


                    dt = lb.PROC_CUST_HOAPPS("", "E", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new hypervrgCustomer_dtls()
                            {
                                Reqbr = dr["A"].ToString(),
                                Reqby = dr["B"].ToString(),
                                Reqdt = dr["C"].ToString(),
                                Recby = dr["D"].ToString(),
                                Recdt = dr["E"].ToString(),
                                Recrmk = dr["F"].ToString(),
                                kycty = dr["G"].ToString(),
                                kycno = dr["H"].ToString(),
                                cunm = dr["I"].ToString(),
                                honm = dr["J"].ToString(),
                                pnsl = dr["K"].ToString(),
                                strt = dr["L"].ToString(),
                                ph = dr["M"].ToString(),
                                mo = dr["N"].ToString(),
                                oc = dr["O"].ToString(),
                                cuph = dr["P"].ToString(),
                                kyph = dr["Q"].ToString(),
                                dob = dr["R"].ToString(),
                                iod = dr["S"].ToString(),
                                eod = dr["T"].ToString(),
                                gen = dr["U"].ToString(),
                                resi = dr["V"].ToString(),
                                fnm = dr["W"].ToString(),
                                mnm = dr["X"].ToString(),
                                oidno = dr["A1"].ToString(),
                                oidnm = dr["A2"].ToString(),
                                ohunm = dr["A3"].ToString(),
                                oluc = dr["A4"].ToString(),
                                opin = dr["A5"].ToString(),
                                ost = dr["A6"].ToString(),
                                omo = dr["A7"].ToString(),
                                oph = dr["A8"].ToString(),
                                ooc = dr["A9"].ToString(),
                                ocnm = dr["A10"].ToString(),
                                odob = dr["A11"].ToString(),
                                omnm = dr["A12"].ToString(),
                                oiod = dr["A13"].ToString(),
                                oeod = dr["A14"].ToString(),
                                ogen = dr["A15"].ToString(),
                                ofnm = dr["A16"].ToString(),
                                oresi = dr["A17"].ToString(),
                                rec2 = dr["A18"].ToString(),
                                rec2rmk = dr["A19"].ToString(),
                                rec2dt = dr["A20"].ToString(),
                                rec3 = dr["A21"].ToString(),
                                rec3rmk = dr["A22"].ToString(),
                                rec3dt = dr["A23"].ToString(),
                                rec4 = dr["A24"].ToString(),
                                rec4rmk = dr["A25"].ToString(),
                                rec4dt = dr["A26"].ToString(),
                                cusphoto = dr["A27"].ToString(),
                                kycphoto = dr["A28"].ToString(),
                                nluc = dr["A29"].ToString()

                            });
                        }

                        data2.Cust_dtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        [WebMethod]
        public void HyperVrg_Recommend(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];
                string[] dataArray1 = dataArray[1].Split('~');
                string flag = dataArray1[0];



                if (isSessionValidess(dataArray[0]) == "1")
                {

                    if (flag == "0")
                    {
                        dt = lb.PROC_CUST_HOAPPS("", "O", dataArray1[1], "");

                        if (dt.Rows[0][0].ToString() == "116")
                        {
                            stack.status = "111";
                            stack.result = "Recommended";

                        }
                        else
                        {
                            stack.status = dt.Rows[0][0].ToString();
                            stack.result = "Something went wrong";
                        }
                    }
                    else if (flag == "1")
                    {
                        dt = lb.PROC_CUST_HOAPPS("", "K", dataArray1[1], "");

                        if (dt.Rows[0][0].ToString() == "111")
                        {
                            stack.status = "111";
                            stack.result = "Rejected";

                        }
                        else
                        {
                            stack.status = dt.Rows[0][0].ToString();
                            stack.result = "Something went wrong";
                        }
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "666";
                stack.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(stack));

        }

        public class ResultModel_doc1
        {
            public string status { get; set; }
            public string result { get; set; }
            public string image { get; set; }
            public string extension { get; set; }

        }

        [WebMethod]
        public void viewkyc_document(string flag, string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel_doc1 resultModel = new ResultModel_doc1();

            byte[] dataFile = new byte[0];
            string data1 = Decryptrel(data);
            string[] dataArray = data1.Split('$');


            string inputstring = dataArray[1];
            string[] dataArray1 = dataArray[1].Split('^');
            string cust_id = dataArray1[0];

            if (isSessionValid(dataArray[0]) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileName;
                string extension;

                try
                {
                    dt = lb.PROC_CUST_HOAPPS("", flag, inputstring, "");
                    if (dt.Rows.Count != 0)
                    {

                        string image1 = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][0];
                                dataFile = (byte[])dt.Rows[0][0];
                                extension = GetFileExtensionFromBytes(dataFile);

                                if (extension == ".tif" || extension == ".unknown")
                                {
                                    dataFile = ConvertToJpg(dataFile);
                                    extension = GetFileExtensionFromBytes(dataFile);
                                }

                                byte[] tiffjpgByte = justfuncJpegBytes(s);
                                DocFileName = cust_id + extension;
                                if (DownloadFile2(DocFileName, tiffjpgByte))
                                {
                                    resultModel.status = "111";
                                    resultModel.result = "Success";
                                    resultModel.image = DocFileName;
                                    resultModel.extension = GetFileExtensionFromBytes(dataFile);

                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "Failed";
                                }
                            }
                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "No Image found!";

                        }

                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    resultModel.status = "222";
                    resultModel.result = "No Image found!";
                    Context.Response.Write(js.Serialize(resultModel));
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));

            }
        }

        static string GetFileExtensionFromBytes(byte[] bytes)
        {
            if (bytes.Length < 4)
                throw new ArgumentException("Byte array should contain at least 4 bytes.");


            if (IsJpeg(bytes))
                return ".jpg";
            else if (IsPng(bytes))
                return ".png";
            else if (IsGif(bytes))
                return ".gif";
            else if (IsPdf(bytes))
                return ".pdf";
            else if (IsTiff(bytes))
                return ".tif";
            // Add more formats as needed


            return ".unknown"; // If the format is not recognized

        }
        static bool IsJpeg(byte[] bytes)
        {
            // JPEG files start with the following bytes: FF D8 FF
            return bytes[0] == 0xFF && bytes[1] == 0xD8 && bytes[2] == 0xFF;
        }


        static bool IsPng(byte[] bytes)
        {
            // PNG files start with the following bytes: 89 50 4E 47 0D 0A 1A 0A
            return bytes[0] == 0x89 && bytes[1] == 0x50 && bytes[2] == 0x4E && bytes[3] == 0x47;
        }


        static bool IsGif(byte[] bytes)
        {
            // GIF files start with the following bytes: 47 49 46 38
            return bytes[0] == 0x47 && bytes[1] == 0x49 && bytes[2] == 0x46 && bytes[3] == 0x38;
        }


        static bool IsPdf(byte[] bytes)
        {
            // PDF files start with the following bytes: 25 50 44 46 (hexadecimal) => %PDF (ASCII)
            return bytes[0] == 0x25 && bytes[1] == 0x50 && bytes[2] == 0x44 && bytes[3] == 0x46;
        }


        static bool IsTiff(byte[] bytes)
        {
            // TIFF files start with the following bytes: 49 49 2A 00 (Intel) or 4D 4D 00 2A (Motorola)
            return bytes[0] == 0x49 && bytes[1] == 0x49 && bytes[2] == 0x2A && bytes[3] == 0x00;
        }

        public static byte[] ConvertToJpg(byte[] bytes)
        {
            using (var ms = new MemoryStream(bytes))
            {
                var image = new Bitmap(ms);
                var ms2 = new MemoryStream();
                image.Save(ms2, ImageFormat.Jpeg);
                return ms2.ToArray();
            }
        }


        public class region_dtls
        {

            public List<get_region_dtls> region_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class get_region_dtls
        {
            public string regionid { get; set; }
            public string region_name { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Getregion_dtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                region_dtls data2 = new region_dtls();
                List<get_region_dtls> get_dtls = new List<get_region_dtls>();

                try
                {
                    dt = lb.PROC_CUST_HOAPPS("", "B", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new get_region_dtls()
                            {
                                regionid = dr[0].ToString(),
                                region_name = dr[1].ToString(),

                            });
                        }

                        data2.region_dtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        // ------------------123236---------CRF for changing the approval process for modifying the customer details after the completion of customer on boarding through Hyper Verge and Juksiyo modules.


        //---------Girish------123517--Proposal for shift wise attendance in KYC department----start-------//

        public class Get_shift_List
        {
            public List<shift_List> shift_data { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class shift_List
        {
            public string shift_id { get; set; }
            public string shift_timings { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Emp_Shift_List(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_shift_List details = new Get_shift_List();
            List<shift_List> shift_data = new List<shift_List>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_mobapp_ngl(190, sessionId);


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            shift_data.Add(new shift_List()
                            {

                                shift_id = dr[0].ToString(),
                                shift_timings = dr[1].ToString(),

                            });
                        }
                        details.shift_data = shift_data;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No Data Found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }

        public class Get_emp_List
        {
            public List<emp_List> emp_data { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class emp_List
        {
            public string emp_code { get; set; }
            public string emp_name { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_EmpList_shift(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_emp_List details = new Get_emp_List();
            List<emp_List> emp_data = new List<emp_List>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_mobapp_ngl(188, emp_code);


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            emp_data.Add(new emp_List()
                            {

                                emp_code = dr[0].ToString(),
                                emp_name = dr[1].ToString(),

                            });
                        }
                        details.emp_data = emp_data;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No Data Found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }


        public class Emp_dtl_shift
        {
            public string emp_dtls { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_EmpDtls_shift(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Emp_dtl_shift data = new Emp_dtl_shift();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    dt = lb.proc_mobapp_ngl(189, emp_code);

                    if (dt.Rows.Count > 0)

                    {
                        data.emp_dtls = dt.Rows[0][0].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "555";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Confirm_Emp_Shift_Request(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string EmpID = data1.Split('~')[1].ToString();
            string ShID = data1.Split('~')[2].ToString();
            string Dept = data1.Split('~')[3].ToString();
            string userId = data1.Split('~')[4].ToString();


            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";

                string inputString = EmpID + '~' + ShID + '~' + Dept + '~' + userId;

                try
                {
                    result = lb.hrm_Shift_Change_head(EmpID, ShID, Dept, userId);

                    if (result == "SUCESSFULLY UPDATED TO CHANGE SHIFT")
                    {


                        resultModel.status = "111";
                        resultModel.result = "SUCESSFULLY UPDATED TO CHANGE SHIFT";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = result;
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        //---------Girish------123517--Proposal for shift wise attendance in KYC department----end-------//

        //---------Aswathy------123410--DSGL Related Activities Non completion exit Block and Regularization Process Report----start-------//

        public class Drpdwn_dtls
        {

            public List<get_Drpdwn_dtls> drpdwn_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class get_Drpdwn_dtls
        {
            public string Activity { get; set; }
            public string Activity_id { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Activity_dtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                Drpdwn_dtls data2 = new Drpdwn_dtls();
                List<get_Drpdwn_dtls> get_dtls = new List<get_Drpdwn_dtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(191, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new get_Drpdwn_dtls()
                            {
                                Activity = dr[0].ToString(),
                                Activity_id = dr[1].ToString(),
                            });
                        }

                        data2.drpdwn_dtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        public class count_dtls
        {

            public List<get_counts_dtls> Count { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class get_counts_dtls
        {
            public string Block_count { get; set; }
            public string Post_name { get; set; }
            public string POst_id { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Block_count(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                count_dtls data2 = new count_dtls();
                List<get_counts_dtls> get_dtls = new List<get_counts_dtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(192, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new get_counts_dtls()
                            {
                                Block_count = dr[0].ToString(),
                                POst_id = dr[1].ToString(),
                                Post_name = dr[2].ToString(),
                            });
                        }

                        data2.Count = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class Block_emp_dtls
        {

            public List<get_block_emp_dtls> dtls { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class get_block_emp_dtls
        {
            public string emp_code { get; set; }
            public string emp_name { get; set; }
            public string branch_id { get; set; }
            public string post_name { get; set; }
            public string block_dt { get; set; }
            public string block_reason { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Block_emp_Dtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                Block_emp_dtls data2 = new Block_emp_dtls();
                List<get_block_emp_dtls> get_dtls = new List<get_block_emp_dtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(193, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new get_block_emp_dtls()
                            {
                                emp_code = dr[0].ToString(),
                                emp_name = dr[1].ToString(),
                                branch_id = dr[2].ToString(),
                                post_name = dr[3].ToString(),
                                block_dt = dr[4].ToString(),
                                block_reason = dr[5].ToString(),
                            });
                        }

                        data2.dtls = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        //---------Aswathy------123410--DSGL Related Activities Non completion exit Block and Regularization Process Report----end-------//



        // --------------Vismaya PS----123555---MAMONEY Lead generation module in ESS App-----start---

        [WebMethod]
        public void mamoney_lead_generation(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dt = lb.proc_mobapp_ngl(194, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0][0].ToString() == "111")
                        {
                            stack.status = dt.Rows[0][0].ToString();
                            stack.result = dt.Rows[0][1].ToString();

                        }

                        else
                        {
                            stack.status = "222";
                            stack.result = "Invalid Request !";
                        }
                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "Invalid Request !";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "555";
                Context.Response.Write(js.Serialize(stack));

            }


            Context.Response.Write(js.Serialize(stack));

        }

        public class post_office_dtls
        {

            public List<post_office_list> postoffice_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class post_office_list
        {
            public string post_office { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void get_post_office(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                post_office_dtls data2 = new post_office_dtls();
                List<post_office_list> get_report = new List<post_office_list>();

                try
                {
                    dt = lb.proc_mobapp_ngl(200, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_report.Add(new post_office_list()
                            {
                                post_office = dr[0].ToString(),
                            });
                        }

                        data2.postoffice_dtls_list = get_report;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }



        // --------------Vismaya PS----123555---MAMONEY Lead generation module in ESS App-----end---


        //---------------Aswathy------123784----Required Certified KYC option in MAFIL ESS Mobile App-----Start---


        public class Cust_name
        {
            public string cust_name { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_CustomerName(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Cust_name data = new Cust_name();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('$')[0].ToString();
            string Cust_id = data1.Split('$')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    dt = lb.proc_mobapp_ngl(201, Cust_id);

                    if (dt.Rows.Count > 0)

                    {

                        data.cust_name = dt.Rows[0][0].ToString();

                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "Invalid Customer ID";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }

            else
            {
                data.status = "555";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void update_kyc_doc(string p_data, string image)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(p_data);
            string[] dataArray = decryptedIData.Split('$');
            string[] dataArray1 = dataArray[1].Split('^');
            string flag = dataArray1[0];
            string input = dataArray1[1];
            string sessionId = dataArray[0];


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();

                try
                {
                    if (flag == "1")
                    {

                        dt = lb.Update_kyc_photo(202, input, image);

                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                        {
                            resultModel.status = dt.Rows[0][0].ToString();
                            resultModel.result = dt.Rows[0][1].ToString();

                        }
                        else
                        {
                            resultModel.status = dt.Rows[0][0].ToString();
                            resultModel.result = dt.Rows[0][1].ToString();
                        }
                    }
                    else if (flag == "2")
                    {
                        dt = lb.Update_kyc_photo(203, input, image);

                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                        {
                            resultModel.status = dt.Rows[0][0].ToString();
                            resultModel.result = dt.Rows[0][1].ToString();

                        }
                        else
                        {
                            resultModel.status = dt.Rows[0][0].ToString();
                            resultModel.result = dt.Rows[0][1].ToString();
                        }
                    }
                    else if (flag == "3")
                    {
                        dt = lb.Update_kyc_photo(204, input, image);

                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                        {
                            resultModel.status = dt.Rows[0][0].ToString();
                            resultModel.result = dt.Rows[0][1].ToString();

                        }
                        else
                        {
                            resultModel.status = dt.Rows[0][0].ToString();
                            resultModel.result = dt.Rows[0][1].ToString();
                        }
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }
            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        public void view_kyc_document(int flag, string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel_doc1 resultModel = new ResultModel_doc1();

            byte[] dataFile = new byte[0];
            string data1 = Decryptrel(data);
            string[] dataArray = data1.Split('$');


            string inputstring = dataArray[1];

            if (isSessionValid(dataArray[0]) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileName;
                string extension;

                try
                {
                    dt = lb.proc_mobapp_ngl(flag, inputstring);
                    if (dt.Rows.Count != 0)
                    {

                        string image1 = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][0];
                                dataFile = (byte[])dt.Rows[0][0];
                                extension = GetFileExtensionFromBytes(dataFile);

                                if (extension == ".tif" || extension == ".unknown")
                                {
                                    dataFile = ConvertToJpg(dataFile);
                                    extension = GetFileExtensionFromBytes(dataFile);
                                }

                                //byte[] tiffjpgByte = justfuncJpegBytes(s);
                                DocFileName = inputstring + extension;
                                if (DownloadFile2(DocFileName, s))
                                {
                                    resultModel.status = "111";
                                    resultModel.result = "Success";
                                    resultModel.image = DocFileName;
                                    resultModel.extension = GetFileExtensionFromBytes(dataFile);

                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "Failed";
                                }
                            }
                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "No Image found!";

                        }

                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));

            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void delete_img(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(p_data);
            string[] dataArray = decryptedIData.Split('$');
            string input = dataArray[1];
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {

                DataSet ds = new DataSet();
                DataTable dt = new DataTable();

                try

                {

                    dt = lb.proc_mobapp_ngl(208, input);

                    if (dt.Rows.Count > 0)

                    {
                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }

                    else

                    {
                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }
                }

                catch (Exception e)

                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")

                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

                else

                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }

            else

            {

                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));

            }

        }


        public class Cust_type_list
        {

            public List<cust_type_dtls> Cust_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }

        public class cust_type_dtls
        {
            public string Type_id { get; set; }
            public string Cust_type { get; set; }
        }

        [WebMethod]
        public void Get_Custype(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                Cust_type_list data2 = new Cust_type_list();
                List<cust_type_dtls> get_dtls = new List<cust_type_dtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(212, data);

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new cust_type_dtls()
                            {
                                Type_id = dr[0].ToString(),
                                Cust_type = dr[1].ToString(),
                            });
                        }

                        data2.Cust_dtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        //---------------Aswathy------123784----Required Certified KYC option in MAFIL ESS Mobile App-----End---

        //--------Girish------123805---------Credit monitor daily activity NGL in ESS App.---------Start-----------//

        public class cm_attend_dtls
        {
            public string branch_id { get; set; }
            public string branch_name { get; set; }
            public string attend_date { get; set; }
            public string reason { get; set; }



            public string status { get; set; }
            public string result { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_CM_Attendance_dtls(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            cm_attend_dtls data = new cm_attend_dtls();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string attend_id = data1.Split('~')[1].ToString();
            string emp_code = data1.Split('~')[2].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                string result = "";


                string inputString = attend_id + '~' + emp_code;

                try
                {
                    dt = lb.proc_mobapp_ngl(195, inputString);


                    if (dt.Rows[0][0].ToString() != "-222")

                    {

                        data.branch_id = dt.Rows[0][0].ToString();
                        data.branch_name = dt.Rows[0][1].ToString();
                        data.attend_date = dt.Rows[0][2].ToString();
                        data.reason = dt.Rows[0][3].ToString();

                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = dt.Rows[0][1].ToString();

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "777";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }
        }

        public class state_datas
        {
            public string STATE_ID { get; set; }
            public string STATE_NAME { get; set; }

        }



        public class state_dataDetail
        {
            public List<state_datas> getstateDetail { get; set; }
            public string status { get; set; }
            public string result { get; set; }



        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_state_list(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            state_dataDetail details = new state_dataDetail();
            List<state_datas> getstateDetail = new List<state_datas>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                //string inputString = attend_id + '~' + emp_code;

                try
                {
                    dt = lb.proc_mobapp_ngl(196, sessionId);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getstateDetail.Add(new state_datas()
                            {
                                STATE_ID = dr["STATE_ID"].ToString(),
                                STATE_NAME = dr["STATE_NAME"].ToString(),

                            });
                        }



                        details.getstateDetail = getstateDetail;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }

        public class Districtdatas
        {
            public string DISTRICT_ID { get; set; }
            public string DISTRICT_NAME { get; set; }

        }

        public class Districtdatadetail
        {
            public List<Districtdatas> getdistDetails { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_district_list(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Districtdatadetail details = new Districtdatadetail();
            List<Districtdatas> getdistDetails = new List<Districtdatas>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string STATE_ID = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {

                    dt = lb.proc_mobapp_ngl(197, STATE_ID);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getdistDetails.Add(new Districtdatas()
                            {
                                DISTRICT_ID = dr["DISTRICT_ID"].ToString(),
                                DISTRICT_NAME = dr["DISTRICT_NAME"].ToString(),

                            });
                        }

                        details.getdistDetails = getdistDetails;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }


        public class pincode_data
        {
            public string pin_code { get; set; }
            public string post_office { get; set; }

        }

        public class pincode_dtls
        {
            public List<pincode_data> getpinDetails { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_pincode_list(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            pincode_dtls details = new pincode_dtls();
            List<pincode_data> getpinDetails = new List<pincode_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string district_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {

                    dt = lb.proc_mobapp_ngl(198, district_id);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getpinDetails.Add(new pincode_data()
                            {
                                pin_code = dr["pin_code"].ToString(),
                                post_office = dr["post_office"].ToString(),

                            });
                        }


                        details.getpinDetails = getpinDetails;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }

        public class cm_loan_data
        {
            public string loan_id { get; set; }

        }

        public class cm_loan_dtls
        {
            public List<cm_loan_data> getloanDetails { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_CM_Loan_list(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            cm_loan_dtls details = new cm_loan_dtls();
            List<cm_loan_data> getloanDetails = new List<cm_loan_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cm_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {

                    dt = lb.proc_mobapp_ngl(209, cm_code);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getloanDetails.Add(new cm_loan_data()
                            {
                                loan_id = dr["loan_id"].ToString(),

                            });
                        }


                        details.getloanDetails = getloanDetails;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Submit_CM_activity(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cm_code = data1.Split('~')[1].ToString();
            string cm_name = data1.Split('~')[2].ToString();
            string loan_id = data1.Split('~')[3].ToString();
            string attend_type = data1.Split('~')[4].ToString();
            string visit_type = data1.Split('~')[5].ToString();
            string visit_date = data1.Split('~')[6].ToString();
            string place = data1.Split('~')[7].ToString();
            string district = data1.Split('~')[8].ToString();
            string state = data1.Split('~')[9].ToString();
            string pin_code = data1.Split('~')[10].ToString();
            string remarks = data1.Split('~')[11].ToString();
            string reason = data1.Split('~')[12].ToString();
            string field_visit_status = data1.Split('~')[13].ToString();

            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = cm_code + '~' + cm_name + '~' + loan_id + '~' + attend_type + '~' + visit_type + '~' + visit_date + '~' + place + '~' + district + '~' + state + '~' + pin_code + '~' + remarks + '~' + reason + '~' + field_visit_status;
                try
                {
                    dt = lb.proc_mobapp_ngl(210, inputString);

                    if (dt.Rows[0][0].ToString() == "111")
                    {

                        resultModel.status = "111";
                        resultModel.result = "Uploaded Successfully!!!";

                    }

                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Cannot be uploaded!!!";
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class cm_act_data
        {
            public string activity_id { get; set; }
            public string cm_code { get; set; }
            public string cm_name { get; set; }
            public string loan_id { get; set; }
            public string attend_status { get; set; }
            public string visit_type { get; set; }
            public string visit_date { get; set; }
            public string place { get; set; }
            public string district { get; set; }
            public string state { get; set; }
            public string pin_code { get; set; }
            public string remarks { get; set; }
            public string reason { get; set; }
            public string update_date { get; set; }
            public string field_visit_status { get; set; }

        }

        public class cm_act_dtls
        {
            public List<cm_act_data> getactDetails { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_CM_Act_Report(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            cm_act_dtls details = new cm_act_dtls();
            List<cm_act_data> getactDetails = new List<cm_act_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cm_code = data1.Split('~')[1].ToString();
            string frm_dt = data1.Split('~')[2].ToString();
            string to_dt = data1.Split('~')[3].ToString();

            string inputString = cm_code + '~' + frm_dt + '~' + to_dt;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {

                    dt = lb.proc_mobapp_ngl(211, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getactDetails.Add(new cm_act_data()
                            {
                                activity_id = dr["activity_id"].ToString(),
                                cm_code = dr["cm_code"].ToString(),
                                cm_name = dr["cm_name"].ToString(),
                                loan_id = dr["loan_id"].ToString(),
                                attend_status = dr["attend_status"].ToString(),
                                visit_type = dr["visit_type"].ToString(),
                                visit_date = dr["visit_date"].ToString(),
                                place = dr["place"].ToString(),
                                district = dr["district"].ToString(),
                                state = dr["state"].ToString(),
                                pin_code = dr["pin_code"].ToString(),
                                remarks = dr["remarks"].ToString(),
                                reason = dr["reason"].ToString(),
                                update_date = dr["update_date"].ToString(),
                                field_visit_status = dr["field_visit_status"].ToString(),


                            });
                        }


                        details.getactDetails = getactDetails;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }


        //--------Girish------123805---------Credit monitor daily activity NGL in ESS App.---------end-----------//

        //--------Girish------123826-------GPA in ESS App.---------Start-----------//

        public class GPA_data
        {
            public string coverage { get; set; }
            public string premium_amount { get; set; }
        }

        public class GPA_dtls
        {
            public List<GPA_data> getgpaDetails { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_GPA_Premium_List(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            GPA_dtls details = new GPA_dtls();
            List<GPA_data> getgpaDetails = new List<GPA_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {

                    dt = lb.callToProcHrmQueries(sessionId, 231);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getgpaDetails.Add(new GPA_data()
                            {
                                coverage = dr["coverage"].ToString(),
                                premium_amount = dr["premium_amount"].ToString(),

                            });
                        }


                        details.getgpaDetails = getgpaDetails;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Submit_GPA_Consent(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string EMP_CODE = data1.Split('~')[1].ToString();
            string CONSENT_STATUS = data1.Split('~')[2].ToString();
            string PRIMIUM_ID = data1.Split('~')[3].ToString();


            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = EMP_CODE + '~' + CONSENT_STATUS + '~' + PRIMIUM_ID;
                try
                {
                    dt = lb.callToProcHrmQueries(inputString, 158);

                    if (dt.Rows[0][0].ToString() == "Consent updated successfully.")
                    {

                        resultModel.status = "111";
                        resultModel.result = "Consent updated successfully.";

                    }

                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = dt.Rows[0][0].ToString();
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        //--------Girish-------123826-------GPA in ESS App.---------end-----------//


        // --------Aswathy------123826---------CRF for introducing GPA and Mediclaim module in ESS Mobile Application---------START-----------

        public class MedClaim_EmpDetails
        {
            public string emp_code { get; set; }
            public string emp_name { get; set; }
            public string designation { get; set; }
            public string Join_date { get; set; }
            public string DOB { get; set; }
            public string Age { get; set; }
            public string Gender { get; set; }
            public string Marital_status { get; set; }

            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void GetMedClaim_EmpDetails(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            MedClaim_EmpDetails val = new MedClaim_EmpDetails();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_mobapp_ngl(213, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        val.emp_code = dt.Rows[0][0].ToString();
                        val.emp_name = dt.Rows[0][1].ToString();
                        val.designation = dt.Rows[0][2].ToString();
                        val.Join_date = dt.Rows[0][3].ToString();
                        val.DOB = dt.Rows[0][4].ToString();
                        val.Age = dt.Rows[0][5].ToString();
                        val.Gender = dt.Rows[0][6].ToString();
                        val.Marital_status = dt.Rows[0][7].ToString();

                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        public class medclaim_memdetails
        {

            public List<memdetails_list> members_list { get; set; }

            public string claimed_status { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }

        public class memdetails_list
        {
            public string MEM_NAME { get; set; }
            public string MEM_DOB { get; set; }
            public string MEM_AGE { get; set; }
            public string MEM_RELATION { get; set; }
            public string MEM_GENDER { get; set; }
            public string MEM_PREMIUM { get; set; }
            public string BRANCH_ID { get; set; }
        }

        [WebMethod]
        public void Get_Medclaim_Memdtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                medclaim_memdetails data2 = new medclaim_memdetails();
                List<memdetails_list> get_dtls = new List<memdetails_list>();

                try
                {

                    dt1 = lb.proc_mobapp_ngl(214, dataArray[1]);

                    if (dt1.Rows.Count > 0)
                    {
                        if (dt1.Rows[0][0].ToString() == "")
                        {
                            dt = lb.proc_mobapp_ngl(216, dataArray[1]);

                            if (dt.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dt.Rows)
                                {
                                    get_dtls.Add(new memdetails_list()
                                    {
                                        MEM_NAME = dr[0].ToString(),
                                        MEM_DOB = dr[1].ToString(),
                                        MEM_AGE = dr[2].ToString(),
                                        MEM_RELATION = dr[3].ToString(),
                                        MEM_GENDER = dr[4].ToString(),
                                        MEM_PREMIUM = dr[5].ToString(),
                                        BRANCH_ID = dr[6].ToString(),
                                    });
                                }

                                data2.members_list = get_dtls;
                                data2.claimed_status = "Not claimed";
                                data2.status = "111";
                                data2.result = "Success";
                            }
                            else
                            {
                                resultModel.status = "222";
                                resultModel.result = "No data found";
                            }

                        }
                        else //(dt1.Rows[0][0].ToString() != "")
                        {
                            dt = lb.proc_mobapp_ngl(215, dataArray[1]);

                            if (dt.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dt.Rows)
                                {
                                    get_dtls.Add(new memdetails_list()
                                    {
                                        MEM_NAME = dr[0].ToString(),
                                        MEM_DOB = dr[1].ToString(),
                                        MEM_AGE = dr[2].ToString(),
                                        MEM_RELATION = dr[3].ToString(),
                                        MEM_GENDER = dr[4].ToString(),
                                        MEM_PREMIUM = dr[5].ToString(),
                                        BRANCH_ID = dr[6].ToString(),
                                    });
                                }

                                data2.members_list = get_dtls;
                                data2.claimed_status = "claimed";
                                data2.status = "111";
                                data2.result = "Success";
                            }
                            else
                            {
                                resultModel.status = "222";
                                resultModel.result = "No data found";
                            }
                        }
                    }
                    else
                    {
                        data2.claimed_status = "First Time";
                        data2.status = "111";
                        data2.result = "Success";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        [WebMethod]
        public void Add_FamDetails(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel val = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    string p = lb.prc_hrm_add_mediclaim(dataArray[1], dataArray[2]);

                    if (p != "" || p != null)
                    {
                        val.status = "111";
                        val.result = p;
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }

            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }


        public class parmtr_value
        {
            public string param { get; set; }

            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void Get_parmtr_value(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            parmtr_value val = new parmtr_value();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_mobapp_ngl(218, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        val.param = dt.Rows[0][0].ToString();

                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }


        public class access_info
        {
            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void get_info(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            access_info val = new access_info();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_mobapp_ngl(219, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        if (dt.Rows[0][0].ToString() == "111")
                        {
                            val.status = "111";
                            val.result = "Success";
                        }
                        else
                        {
                            val.status = dt.Rows[0][0].ToString();
                            val.result = dt.Rows[0][1].ToString();
                        }
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }


        public class designstion
        {
            public string count { get; set; }
            public string Designation { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void get_designstion(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            designstion val = new designstion();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_mobapp_ngl(220, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        if (dt.Rows[0][0].ToString() != "222")
                        {
                            val.count = dt.Rows[0][0].ToString();
                            val.Designation = dt.Rows[0][1].ToString();
                            val.status = "111";
                            val.result = "Success";
                        }
                        else
                        {
                            val.status = dt.Rows[0][0].ToString();
                            val.result = dt.Rows[0][1].ToString();
                        }
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }


        public class sum_insured_branch
        {

            public List<sum_insured_branch_dtls> sum_insured { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }

        public class sum_insured_branch_dtls
        {
            public string Amount { get; set; }
            public string Sum_insured { get; set; }
        }

        [WebMethod]
        public void Get_suminsured(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                sum_insured_branch data2 = new sum_insured_branch();
                List<sum_insured_branch_dtls> get_dtls = new List<sum_insured_branch_dtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(221, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new sum_insured_branch_dtls()
                            {
                                Amount = dr[0].ToString(),
                                Sum_insured = dr[1].ToString(),
                            });
                        }

                        data2.sum_insured = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class Get_premium_list
        {

            public List<Get_premiumdtls> premium { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }

        public class Get_premiumdtls
        {
            public string Designation { get; set; }
            public string Sum_insured { get; set; }
            public string premium { get; set; }
        }

        [WebMethod]
        public void Get_premium(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                Get_premium_list data2 = new Get_premium_list();
                List<Get_premiumdtls> get_dtls = new List<Get_premiumdtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(222, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new Get_premiumdtls()
                            {
                                Designation = dr[0].ToString(),
                                Sum_insured = dr[1].ToString(),
                                premium = dr[2].ToString(),
                            });
                        }

                        data2.premium = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class Get_Relation_list
        {

            public List<Get_Relationdtls> Relation { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }

        public class Get_Relationdtls
        {
            public string id { get; set; }
            public string Relation { get; set; }
        }

        [WebMethod]
        public void Get_Relation(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                Get_Relation_list data2 = new Get_Relation_list();
                List<Get_Relationdtls> get_dtls = new List<Get_Relationdtls>();

                try
                {
                    dt = lb.proc_mobapp_ngl(223, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new Get_Relationdtls()
                            {
                                id = dr[0].ToString(),
                                Relation = dr[1].ToString(),
                            });
                        }

                        data2.Relation = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class get_trans_status
        {
            public string count { get; set; }

            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void Get_status(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            get_trans_status val = new get_trans_status();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_mobapp_ngl(224, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        val.count = dt.Rows[0][0].ToString();

                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.count = "0";
                        val.status = "111";
                        val.result = "Success";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        // --------Aswathy------123826---------CRF for introducing GPA and Mediclaim module in ESS Mobile Application--------- END -----------

        //--------Girish-------124181-------CRF SPL sales employees tracker in ess.---------start-----------//

        public class forms
        {
            public string form_1 { get; set; }
            public string form_2 { get; set; }
            public string form_3 { get; set; }
            public string form_4 { get; set; }
            public string form_5 { get; set; }
            public string form_6 { get; set; }
            public string form_7 { get; set; }
            public string form_8 { get; set; }
            public string form_9 { get; set; }
            public string form_10 { get; set; }
            public string form_11 { get; set; }
            public string form_12 { get; set; }
            public string form_13 { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Sales_Forms(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            forms data = new forms();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string leadsource_id = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    dt = lb.proc_mobapp_ngl(225, leadsource_id);

                    if (dt.Rows.Count > 0)

                    {

                        data.form_1 = dt.Rows[0][0].ToString();
                        data.form_2 = dt.Rows[0][1].ToString();
                        data.form_3 = dt.Rows[0][2].ToString();
                        data.form_4 = dt.Rows[0][3].ToString();
                        data.form_5 = dt.Rows[0][4].ToString();
                        data.form_6 = dt.Rows[0][5].ToString();
                        data.form_7 = dt.Rows[0][6].ToString();
                        data.form_8 = dt.Rows[0][7].ToString();
                        data.form_9 = dt.Rows[0][8].ToString();
                        data.form_10 = dt.Rows[0][9].ToString();
                        data.form_11 = dt.Rows[0][10].ToString();
                        data.form_12 = dt.Rows[0][11].ToString();
                        data.form_13 = dt.Rows[0][12].ToString();

                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "555";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }

        public class Reg_data
        {
            public string region { get; set; }

        }

        public class Reg_dtls
        {
            public List<Reg_data> get_Regdata { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_SPL_Region_List(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Reg_dtls details = new Reg_dtls();
            List<Reg_data> get_Regdata = new List<Reg_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {

                    dt = lb.proc_mobapp_ngl(226, sessionId);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_Regdata.Add(new Reg_data()
                            {
                                region = dr["region_id"].ToString(),


                            });
                        }


                        details.get_Regdata = get_Regdata;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }

        public class Br_data
        {
            public string branch_id { get; set; }
            public string branch_name { get; set; }
            public string branch_dtls { get; set; }

        }

        public class Br_dtls
        {
            public List<Br_data> get_Brdata { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_SPL_Brnch_List(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Br_dtls details = new Br_dtls();
            List<Br_data> get_Brdata = new List<Br_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {

                    dt = lb.proc_mobapp_ngl(227, sessionId);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_Brdata.Add(new Br_data()
                            {
                                branch_id = dr["branch_id"].ToString(),
                                branch_name = dr["branch_name"].ToString(),
                                branch_dtls = dr["branch_dtls"].ToString(),


                            });
                        }


                        details.get_Brdata = get_Brdata;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }


        public class leadsource_data
        {
            public string leadsource_id { get; set; }
            public string lead_source { get; set; }
            public string description { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_leadsource_List(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            leadsource_data data = new leadsource_data();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string week_id = data1.Split('~')[1].ToString();
            string day_id = data1.Split('~')[2].ToString();

            string inputString = week_id + '~' + day_id;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    dt = lb.proc_mobapp_ngl(228, inputString);

                    if (dt.Rows.Count > 0)

                    {

                        data.leadsource_id = dt.Rows[0][0].ToString();
                        data.lead_source = dt.Rows[0][1].ToString();
                        data.description = dt.Rows[0][2].ToString();

                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "555";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Submit_SPL_Tracker(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string row_1 = data1.Split('~')[1].ToString();
            string row_2 = data1.Split('~')[2].ToString();
            string row_3 = data1.Split('~')[3].ToString();
            string row_4 = data1.Split('~')[4].ToString();
            string row_5 = data1.Split('~')[5].ToString();
            string row_6 = data1.Split('~')[6].ToString();
            string row_8 = data1.Split('~')[7].ToString();
            string row_9 = data1.Split('~')[8].ToString();
            string row_10 = data1.Split('~')[9].ToString();
            string row_11 = data1.Split('~')[10].ToString();
            string row_12 = data1.Split('~')[11].ToString();
            string leadsource_id = data1.Split('~')[12].ToString();
            string lead_id = data1.Split('~')[13].ToString();
            string track_id = data1.Split('~')[14].ToString();
            string emp_code = data1.Split('~')[15].ToString();

            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = row_1 + '~' + row_2 + '~' + row_3 + '~' + row_4 + '~' + row_5 + '~' + row_6 + '~' + row_8 + '~' + row_9 + '~' + row_10 + '~' + row_11 + '~' + row_12 + '~' + leadsource_id + '~' + lead_id + '~' + track_id + '~' + emp_code;
                try
                {
                    dt = lb.proc_mobapp_ngl(234, inputString);

                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                    {


                        resultModel.status = "111";
                        resultModel.result = "Confirmed Successfully!!!";

                    }
                    else
                    {
                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Insert_SPL_Tracker_Docs(string p_data, string document)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string leadsource_id = data1.Split('~')[1].ToString();
            string emp_code = data1.Split('~')[2].ToString();
            string doc_name = data1.Split('~')[3].ToString();

            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = leadsource_id + '~' + emp_code + '~' + doc_name;
                try
                {
                    dt = lb.proc_mobapp_ngl(233, inputString);

                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                    {

                        String pt = lb.DocumentUpload_Spl(dt.Rows[0][1].ToString(), document);
                        if (pt == "111")
                        {
                            resultModel.status = "111";
                            resultModel.result = dt.Rows[0][2].ToString();

                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "Something went wrong!!";
                        }

                    }
                    else
                    {
                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class enter_data
        {
            public string lead_id { get; set; }
            public string leadsource_id { get; set; }
            public string lead_source { get; set; }
            public string row_2 { get; set; }
        }

        public class enter_dtls
        {
            public List<enter_data> get_Enterdata { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_SPL_Enter_LeadList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            enter_dtls details = new enter_dtls();
            List<enter_data> get_Enterdata = new List<enter_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {

                    dt = lb.proc_mobapp_ngl(231, emp_code);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_Enterdata.Add(new enter_data()
                            {

                                lead_id = dr["lead_id"].ToString(),
                                leadsource_id = dr["leadsource_id"].ToString(),
                                lead_source = dr["lead_source"].ToString(),
                                row_2 = dr["row_2"].ToString(),

                            });
                        }


                        details.get_Enterdata = get_Enterdata;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Delete_SPL_Enter_LeadList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string leadsource_id = data1.Split('~')[1].ToString();
            string lead_id = data1.Split('~')[2].ToString();
            string emp_code = data1.Split('~')[3].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                string inputString = leadsource_id + '~' + lead_id + '~' + emp_code;

                try
                {
                    dt = lb.proc_mobapp_ngl(232, inputString);

                    if (dt.Rows[0][0].ToString() == "111")
                    {


                        resultModel.status = "111";
                        resultModel.result = "Deleted Successfully!!!";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Cannot Deleted";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Delete_SPL_LeadDocs(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string doc_id = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                //string inputString = track_id + '~' + lead_id + '~' + doc_id;

                try
                {
                    dt = lb.proc_mobapp_ngl(236, doc_id);

                    if (dt.Rows[0][0].ToString() == "111")
                    {


                        resultModel.status = "111";
                        resultModel.result = "Deleted Successfully!!!";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Cannot Deleted";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        public class doc_data
        {
            public string track_id { get; set; }
            public string lead_id { get; set; }
            public string doc_id { get; set; }
            public string leadsource_id { get; set; }
            public string doc_name { get; set; }
        }

        public class doc_dtls
        {
            public List<doc_data> get_Docdata { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_SPL_LeadDocs(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            doc_dtls details = new doc_dtls();
            List<doc_data> get_Docdata = new List<doc_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {

                    dt = lb.proc_mobapp_ngl(235, emp_code);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_Docdata.Add(new doc_data()
                            {
                                track_id = dr["track_id"].ToString(),
                                lead_id = dr["lead_id"].ToString(),
                                doc_id = dr["doc_id"].ToString(),
                                leadsource_id = dr["leadsource_id"].ToString(),
                                doc_name = dr["doc_name"].ToString(),


                            });
                        }


                        details.get_Docdata = get_Docdata;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }


        //--------Girish-------124181-------CRF SPL sales employees tracker in ess.---------end-----------//

        //--------Vismaya-------124150-------Addition Options in Customer Calling Module ess.---------Start-----------//

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Insert_SSIF_workUpdate(string p_data, string image)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_name = data1.Split('~')[1].ToString();
            string cust_id = data1.Split('~')[2].ToString();
            string loan_id = data1.Split('~')[3].ToString();
            string activity_type = data1.Split('~')[4].ToString();
            string open_status = data1.Split('~')[5].ToString();
            string closed_days = data1.Split('~')[6].ToString();
            string reason = data1.Split('~')[7].ToString();
            string meet_person = data1.Split('~')[8].ToString();
            string cust_availability = data1.Split('~')[9].ToString();
            string com_dt_paymnt = data1.Split('~')[10].ToString();
            string cust_response = data1.Split('~')[11].ToString();
            string call_status = data1.Split('~')[12].ToString();
            string remarks = data1.Split('~')[13].ToString();
            string menu_id = data1.Split('~')[14].ToString();
            string change_ph_no = data1.Split('~')[15].ToString();
            string change_address = data1.Split('~')[16].ToString();
            string latitude = data1.Split('~')[17].ToString();
            string logitude = data1.Split('~')[18].ToString();
            string place = data1.Split('~')[19].ToString();
            string empcode = data1.Split('~')[20].ToString();
            string customer_response = data1.Split('~')[21].ToString();
            string promise_date = data1.Split('~')[22].ToString();




            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();

                string inputString = cust_name + '~' + cust_id + '~' + loan_id + '~' + activity_type + '~' + "" + '~' + "" + '~' + reason + '~' + "" + '~' + "" + '~' + com_dt_paymnt + '~' + cust_response + '~' + call_status + '~' + remarks + '~' + menu_id + '~' + customer_response + '~' + promise_date;
                string inputString1 = cust_name + '~' + cust_id + '~' + loan_id + '~' + activity_type + '~' + open_status + '~' + closed_days + '~' + reason + '~' + meet_person + '~' + cust_availability + '~' + com_dt_paymnt + '~' + cust_response + '~' + "" + '~' + remarks + '~' + menu_id + '~' + change_ph_no + '~' + change_address + '~' + latitude + '~' + logitude + '~' + place + '~' + empcode + '~' + customer_response + '~' + promise_date;
                try
                {
                    if (menu_id == "1" || menu_id == "4")
                    {
                        dt = lb.proc_mobapp_ngl(186, inputString);

                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                        {

                            resultModel.status = "111";
                            resultModel.result = "Confirmed Successfully!!!";

                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "No image found!!";
                        }



                    }
                    else if (menu_id == "2")
                    {
                        dt = lb.proc_mobapp_ngl(186, inputString1);

                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                        {

                            String pt = lb.DocumentUpload(dt.Rows[0][1].ToString(), image);
                            if (pt == "111")
                            {
                                resultModel.status = "111";
                                resultModel.result = "Confirmed Successfully!!!";

                            }
                            else
                            {
                                resultModel.status = "222";
                                resultModel.result = "No image found!!";
                            }

                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "Error";
                        }

                    }
                    else
                    {
                        resultModel.status = "333";
                        resultModel.result = "Error";
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        public class Cust_List_address
        {
            public string loanId { get; set; }
            public string empcode { get; set; }
            public string latitude { get; set; }
            public string longitude { get; set; }
            public string address { get; set; }
            public string update_date { get; set; }
            public string activity_type { get; set; }
            public string status { get; set; }
            public string result { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_CustList_collection_address(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt = new DataTable();

            Cust_List_address details = new Cust_List_address();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string loanId = data1.Split('~')[1].ToString();
            string employee_code = data1.Split('~')[2].ToString();

            string inputString = loanId + '~' + employee_code;

            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_mobapp_ngl(230, inputString);


                    if (dt.Rows.Count > 0)
                    {
                        details.latitude = dt.Rows[0][0].ToString();
                        details.longitude = dt.Rows[0][1].ToString();
                        details.loanId = dt.Rows[0][2].ToString();
                        details.empcode = dt.Rows[0][3].ToString();
                        details.update_date = dt.Rows[0][4].ToString();
                        details.activity_type = dt.Rows[0][5].ToString();
                        details.address = dt.Rows[0][6].ToString();
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No Data Found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }

        //--------Vismaya-------124150-------Addition Options in Customer Calling Module ess.---------End-----------//

        //------- swathish--------124307- -------KYC OVD Recommend in ess.------ Start ------------

        public class photo_sts
        {

            public string cust_pic_sts { get; set; }
            public string kyc_pic_sts { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }



        [WebMethod]
        public void getPhotoChangeSts(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();

            photo_sts val = new photo_sts();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];

                if (isSessionValidess(dataArray[0]) == "1")
                {

                    dt = lb.PROC_CUST_HOAPPS("", "NEW_IMAGE_STS", dataArray[1], "");

                    if (dt.Rows[0][0].ToString() == "111")
                    {
                        val.cust_pic_sts = dt.Rows[0][1].ToString();
                        val.kyc_pic_sts = dt.Rows[0][2].ToString();
                        val.status = "111";
                        val.result = "success";

                    }
                    else
                    {
                        stack.status = dt.Rows[0][0].ToString();
                        stack.result = "Something went wrong";
                    }

                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "666";
                stack.result = "Something went wrong";
            }

            if (val.status == "111")
                Context.Response.Write(js.Serialize(val));
            else
                Context.Response.Write(js.Serialize(stack));

        }



        //------- swathish--------124307- -------KYC OVD Recommend in ess.------ End------------


        //---124036 - Ashirvad & NGL meetings attend FZM, RM, AH & BH And NCA conversation details report - END --


        public class conversation_details_report
        {
            public string ID { get; set; }
            public string NAME { get; set; }
            public string ASIRVAD_MEETING { get; set; }
            public string OTHER_VERTICAL_MEETING { get; set; }
            public string TOTAL_MEETING { get; set; }
            public string ASIRVAD_NCA { get; set; }
            public string OTHER_VERTICAL_NCA { get; set; }
            public string TOTAL_NCA { get; set; }

        }

        public class details_report
        {
            public List<conversation_details_report> get_Enterdata { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_conversation_details_report(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            details_report details = new details_report();
            List<conversation_details_report> get_Enterdata = new List<conversation_details_report>();

            string data1 = Decryptrel(p_data);
            string[] dataArray = data1.Split('$');
            string sessionId = dataArray[0];
            string input = dataArray[1];

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {

                    dt = lb.proc_mobapp_Asirvad_Ngl_meett_rpt(1, input);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_Enterdata.Add(new conversation_details_report()
                            {
                                ID = dr[0].ToString(),
                                NAME = dr[1].ToString(),
                                ASIRVAD_MEETING = dr[2].ToString(),
                                OTHER_VERTICAL_MEETING = dr[3].ToString(),
                                TOTAL_MEETING = dr[4].ToString(),
                                ASIRVAD_NCA = dr[5].ToString(),
                                OTHER_VERTICAL_NCA = dr[6].ToString(),
                                TOTAL_NCA = dr[7].ToString(),
                            });
                        }


                        details.get_Enterdata = get_Enterdata;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }

        public class conversation_details_branch_report
        {
            public string PLACE { get; set; }
            public string BRANCH_ID { get; set; }
            public string BRANCH_NAME { get; set; }
            public string REGION { get; set; }
            public string AREA { get; set; }
            public string ZONE { get; set; }
            public string SCHEDULE_DATE { get; set; }
            public string EMP_NAME { get; set; }
            public string EMP_CODE { get; set; }
            public string STATUS { get; set; }
            public string SUBCATOGORY { get; set; }
            public string SUBCATAGORY_TYPE { get; set; }
            public string PARTICIPANT_COUNT { get; set; }
            public string NO_LEADS { get; set; }
            public string GOLD_LOAN_LEAD { get; set; }
            public string TAKEOVER_LEAD { get; set; }
            public string OTHER_PRODUCTS_LEAD { get; set; }
            public string POSSIBLE_CONVERSION { get; set; }
            public string EXISTING_CUSTOMER { get; set; }
            public string CONVERTED_CUSTOMER { get; set; }
            public string OGL_CUSTOMER { get; set; }
            public string BA_CUSTOMER { get; set; }
            public string DOORSTEP_CUSTOMER { get; set; }
            public string NCD_LEAD { get; set; }
            public string INSURANCE_LEAD { get; set; }
            public string MONEY_TFR_LEAD { get; set; }
            public string MEETING_ID { get; set; }


        }
        public class details_branch_report
        {
            public List<conversation_details_branch_report> get_Enterdata { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_conversation_details_Branch_report(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            details_branch_report details = new details_branch_report();
            List<conversation_details_branch_report> get_Enterdata = new List<conversation_details_branch_report>();

            string data1 = Decryptrel(p_data);
            string[] dataArray = data1.Split('$');
            string sessionId = dataArray[0];
            string input = dataArray[1];

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {

                    dt = lb.proc_mobapp_Asirvad_Ngl_meett_rpt(2, input);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_Enterdata.Add(new conversation_details_branch_report()
                            {
                                PLACE = dr[0].ToString(),
                                BRANCH_ID = dr[1].ToString(),
                                BRANCH_NAME = dr[2].ToString(),
                                REGION = dr[3].ToString(),
                                AREA = dr[4].ToString(),
                                ZONE = dr[5].ToString(),
                                SCHEDULE_DATE = dr[6].ToString(),
                                EMP_NAME = dr[7].ToString(),
                                EMP_CODE = dr[8].ToString(),
                                STATUS = dr[9].ToString(),
                                SUBCATOGORY = dr[10].ToString(),
                                SUBCATAGORY_TYPE = dr[11].ToString(),
                                PARTICIPANT_COUNT = dr[12].ToString(),
                                NO_LEADS = dr[13].ToString(),
                                GOLD_LOAN_LEAD = dr[14].ToString(),
                                TAKEOVER_LEAD = dr[15].ToString(),
                                OTHER_PRODUCTS_LEAD = dr[16].ToString(),
                                POSSIBLE_CONVERSION = dr[17].ToString(),
                                EXISTING_CUSTOMER = dr[18].ToString(),
                                CONVERTED_CUSTOMER = dr[19].ToString(),
                                OGL_CUSTOMER = dr[20].ToString(),
                                BA_CUSTOMER = dr[21].ToString(),
                                DOORSTEP_CUSTOMER = dr[22].ToString(),
                                NCD_LEAD = dr[23].ToString(),
                                INSURANCE_LEAD = dr[24].ToString(),
                                MONEY_TFR_LEAD = dr[25].ToString(),
                                MEETING_ID = dr[26].ToString(),
                            });
                        }


                        details.get_Enterdata = get_Enterdata;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }

        [WebMethod]
        public void get_meeting_photo(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            //Context.Response.ContentType = "application/ms-excel";
            ResultModel_doc data = new ResultModel_doc();

            string data1 = Decryptrel(p_data);
            string[] dataArray = data1.Split('$');
            string sessionId = dataArray[0];
            string input = dataArray[1];

            string DocFileName = "", image1;

            //string inputString = task_id + '~' + work_id;

            try
            {
                dt = lb.proc_mobapp_Asirvad_Ngl_meett_rpt(3, input);

                image1 = dt.Rows[0][0].ToString(); ;
                if (dt.Rows.Count != 0 && !string.IsNullOrEmpty(image1))
                {

                      foreach (DataRow dr in dt.Rows)
                        {
                            byte[] s;
                            s = (byte[])dt.Rows[0][0];

                            byte[] tiffjpgByte = justfuncJpegBytes(s);
                            DocFileName = "meeting.jpg";
                            if (DownloadFile2(DocFileName, tiffjpgByte))
                            {
                                data.status = "111";
                                data.result = "Success";
                                data.image = DocFileName;

                            }
                            else
                            {
                                data.status = "222";
                                data.result = "Failed";
                            }
                        }
                    }
                    else
                    {
                        data.status = "333";
                        data.result = "No Image found!";

                    }

            }
            catch (Exception e)
            {
                data.status = "666";
                data.result = "Exception : " + e.Message;
            }
            Context.Response.Write(js.Serialize(data));

        }



        //---124036 - Ashirvad & NGL meetings attend FZM, RM, AH & BH And NCA conversation details report - END --



        //--------Girish-------124309-------CRF for sales offices disbursement report as ESS application---------Start-----------//



        public class so_data
        {
            public string emp_code { get; set; }
            public string emp_name { get; set; }
            public string branch_id { get; set; }
            public string post_name { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_SPL_SO_Dtls(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            so_data data = new so_data();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    dt = lb.proc_mobapp_ngl(237, emp_code);

                    if (dt.Rows.Count > 0)

                    {

                        data.emp_code = dt.Rows[0][0].ToString();
                        data.emp_name = dt.Rows[0][1].ToString();
                        data.branch_id = dt.Rows[0][2].ToString();
                        data.post_name = dt.Rows[0][3].ToString();

                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "555";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }


        public class disb_data
        {
            public string disb_count { get; set; }
            public string disb_amount { get; set; }
            public string aum { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_SPL_SO_DisburseAmt(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            disb_data data = new disb_data();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();
            string from_date = data1.Split('~')[2].ToString();
            string to_date = data1.Split('~')[3].ToString();

            string inputString = emp_code + '~' + from_date + '~' + to_date;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    dt = lb.proc_mobapp_ngl(238, inputString);

                    if (dt.Rows.Count > 0)

                    {

                        data.disb_count = dt.Rows[0][0].ToString();
                        data.disb_amount = dt.Rows[0][1].ToString();
                        data.aum = dt.Rows[0][2].ToString();

                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "555";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }


        //--------Girish-------124309-------CRF for sales offices disbursement report as ESS application---------end-----------//



        //--------Girish-------124300-------CRF FOR PENDING MERGING AND PAN APPROVALS OBTAINED IN ESS APP---------start-----------//


        public class access_data
        {
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Access_Merge(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            access_data data = new access_data();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();


            //string inputString = emp_code + '~' + from_date + '~' + to_date;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    dt = lb.PROC_CUSTOMER_MERGE("", "XXX", emp_code, "");

                    if (dt.Rows[0][0].ToString() != "0")

                    {

                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }

            else
            {
                data.status = "555";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }


        public class get_zone_list
        {

            public List<zone_list> zone_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class zone_list
        {

            public string zoneid { get; set; }
            public string zonename { get; set; }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Merge_Zone_list(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_zone_list data = new get_zone_list();
                List<zone_list> zone_dtls_list = new List<zone_list>();

                try
                {

                    dt = lb.PROC_CUSTOMER_MERGE("", "I", sessionId, "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            zone_dtls_list.Add(new zone_list()
                            {
                                zoneid = dr[0].ToString(),
                                zonename = dr[1].ToString(),


                            });
                        }

                        data.zone_dtls_list = zone_dtls_list;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }



                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class get_reg_list
        {

            public List<reg_list> region_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class reg_list
        {

            public string regionid { get; set; }
            public string region_name { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Merge_Reg_list(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string zone_id = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_reg_list data = new get_reg_list();
                List<reg_list> region_dtls_list = new List<reg_list>();

                try
                {

                    dt = lb.PROC_CUSTOMER_MERGE("", "J", zone_id, "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            region_dtls_list.Add(new reg_list()
                            {
                                regionid = dr[0].ToString(),
                                region_name = dr[1].ToString(),


                            });
                        }

                        data.region_dtls_list = region_dtls_list;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }



                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class get_Br_list
        {

            public List<Br_list> branch_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class Br_list
        {

            public string branchid { get; set; }
            public string branchname { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Merge_Br_list(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string Reg_id = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_Br_list data = new get_Br_list();
                List<Br_list> branch_dtls_list = new List<Br_list>();

                try
                {

                    dt = lb.PROC_CUSTOMER_MERGE("", "K", Reg_id, "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            branch_dtls_list.Add(new Br_list()
                            {
                                branchid = dr[0].ToString(),
                                branchname = dr[1].ToString(),


                            });
                        }

                        data.branch_dtls_list = branch_dtls_list;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }



                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        public class get_Cust_list
        {

            public List<Cust_list> Cust_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class Cust_list
        {

            public string New_Cust { get; set; }
            public string Old_Cust { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Merge_Cust_list(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string Br_id = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_Cust_list data = new get_Cust_list();
                List<Cust_list> Cust_dtls_list = new List<Cust_list>();

                try
                {

                    dt = lb.PROC_CUSTOMER_MERGE("", "L", Br_id, "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            Cust_dtls_list.Add(new Cust_list()
                            {
                                New_Cust = dr[0].ToString(),
                                Old_Cust = dr[1].ToString(),


                            });
                        }

                        data.Cust_dtls_list = Cust_dtls_list;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }



                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class MergeCust_data
        {
            public string APPROVED_BY { get; set; }
            public string APPROVED_DATE { get; set; }
            public string APPROVED_REMARK { get; set; }
            public string REQUESTED_BY { get; set; }
            public string REQUESTED_DATE { get; set; }
            public string REQUESTED_REMARK { get; set; }
            public string NEW_CUST_ID { get; set; }
            public string NEW_CUSNAME { get; set; }
            public string NEW_IDTYPE { get; set; }
            public string NEW_IDNO { get; set; }
            public string NEW_PAN { get; set; }
            public string NEW_BRANCH { get; set; }
            public string NEW_ADDRS { get; set; }
            public string NEW_PH { get; set; }
            public string NEW_ACC { get; set; }
            public string OLD_CUST_ID { get; set; }
            public string OLD_CUSNAME { get; set; }
            public string OLD_IDTYPE { get; set; }
            public string OLD_IDNO { get; set; }
            public string OLD_PAN { get; set; }
            public string OLD_BRANCH { get; set; }
            public string OLD_ADDRS { get; set; }
            public string OLD_PH { get; set; }
            public string OLD_ACC { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Merge_Cust_Dtls(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            MergeCust_data data = new MergeCust_data();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string Req_id = data1.Split('^')[1].ToString();
            string New_Cust_id = data1.Split('^')[2].ToString();
            string Old_cust_id = data1.Split('^')[3].ToString();

            string inputString = Req_id + '^' + New_Cust_id + '^' + Old_cust_id;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    dt = lb.PROC_CUSTOMER_MERGE("", "M", inputString, "");

                    if (dt.Rows.Count > 0)

                    {

                        data.APPROVED_BY = dt.Rows[0][0].ToString();
                        data.APPROVED_DATE = dt.Rows[0][1].ToString();
                        data.APPROVED_REMARK = dt.Rows[0][2].ToString();
                        data.REQUESTED_BY = dt.Rows[0][3].ToString();
                        data.REQUESTED_DATE = dt.Rows[0][4].ToString();
                        data.REQUESTED_REMARK = dt.Rows[0][5].ToString();
                        data.NEW_CUST_ID = dt.Rows[0][6].ToString();
                        data.NEW_CUSNAME = dt.Rows[0][7].ToString();
                        data.NEW_IDTYPE = dt.Rows[0][8].ToString();
                        data.NEW_IDNO = dt.Rows[0][9].ToString();
                        data.NEW_PAN = dt.Rows[0][10].ToString();
                        data.NEW_BRANCH = dt.Rows[0][11].ToString();
                        data.NEW_ADDRS = dt.Rows[0][12].ToString();
                        data.NEW_PH = dt.Rows[0][13].ToString();
                        data.NEW_ACC = dt.Rows[0][14].ToString();
                        data.OLD_CUST_ID = dt.Rows[0][15].ToString();
                        data.OLD_CUSNAME = dt.Rows[0][16].ToString();
                        data.OLD_IDTYPE = dt.Rows[0][17].ToString();
                        data.OLD_IDNO = dt.Rows[0][18].ToString();
                        data.OLD_PAN = dt.Rows[0][19].ToString();
                        data.OLD_BRANCH = dt.Rows[0][20].ToString();
                        data.OLD_ADDRS = dt.Rows[0][21].ToString();
                        data.OLD_PH = dt.Rows[0][22].ToString();
                        data.OLD_ACC = dt.Rows[0][23].ToString();

                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "555";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }

        public class MergePledge_data
        {
            public string A { get; set; }
            public string B { get; set; }
            public string C { get; set; }
            public string D { get; set; }
            public string E { get; set; }
            public string F { get; set; }
            public string G { get; set; }
            public string H { get; set; }
            public string I { get; set; }
            public string J { get; set; }
            public string K { get; set; }
            public string L { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Merge_Pledge_Dtls(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            MergePledge_data data = new MergePledge_data();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string New_Cust_id = data1.Split('^')[2].ToString();
            string Old_cust_id = data1.Split('^')[3].ToString();

            string inputString = "" + '^' + New_Cust_id + '^' + Old_cust_id;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    dt = lb.PROC_CUSTOMER_MERGE("", "M1", inputString, "");

                    if (dt.Rows.Count > 0)

                    {

                        data.A = dt.Rows[0][0].ToString();
                        data.B = dt.Rows[0][1].ToString();
                        data.C = dt.Rows[0][2].ToString();
                        data.D = dt.Rows[0][3].ToString();
                        data.E = dt.Rows[0][4].ToString();
                        data.F = dt.Rows[0][5].ToString();
                        data.G = dt.Rows[0][6].ToString();
                        data.H = dt.Rows[0][7].ToString();
                        data.I = dt.Rows[0][8].ToString();
                        data.J = dt.Rows[0][9].ToString();
                        data.K = dt.Rows[0][10].ToString();
                        data.L = dt.Rows[0][11].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "555";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Cust_Merge_Reject(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string Request_id = data1.Split('^')[1].ToString();
            string New_Cust_id = data1.Split('^')[2].ToString();
            string Old_Cust_id = data1.Split('^')[3].ToString();
            string Rejected_by = data1.Split('^')[7].ToString();
            string Reject_remark = data1.Split('^')[8].ToString();

            string inputString = Request_id + '^' + New_Cust_id + '^' + Old_Cust_id + '^' + "" + '^' + "" + '^' + "" + '^' + Rejected_by + '^' + Reject_remark;

            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";

                try
                {
                    dt = lb.PROC_CUSTOMER_MERGE("", "N", inputString, "");

                    if (dt.Rows[0][0].ToString() == "111")
                    {

                        resultModel.status = "111";
                        resultModel.result = "Rejected Successfully";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Failed to reject";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Cust_Merge_Approval(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string Request_id = data1.Split('^')[1].ToString();
            string New_Cust_id = data1.Split('^')[2].ToString();
            string Old_Cust_id = data1.Split('^')[3].ToString();
            string Approved_by = data1.Split('^')[7].ToString();
            string Approved_remark = data1.Split('^')[8].ToString();
            string Kyc_id = data1.Split('^')[9].ToString();
            string Kyc_photo = data1.Split('^')[10].ToString();
            string Pan = data1.Split('^')[11].ToString();
            string Neft = data1.Split('^')[12].ToString();
            string Status = data1.Split('^')[13].ToString();
            string First_Name = data1.Split('^')[14].ToString();
            string Second_Name = data1.Split('^')[15].ToString();
            string Last_Name = data1.Split('^')[16].ToString();

            string inputString = Request_id + '^' + New_Cust_id + '^' + Old_Cust_id + '^' + "" + '^' + "" + '^' + "" + '^' + Approved_by
                + '^' + Approved_remark + '^' + Kyc_id + '^' + Kyc_photo + '^' + Pan + '^' + Neft + '^' + Status + '^' + First_Name + '^' + Second_Name + '^' + Last_Name;

            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";

                try
                {
                    dt = lb.PROC_CUSTOMER_MERGE("", "O", inputString, "");

                    if (dt.Rows[0][0].ToString() == "111")
                    {

                        resultModel.status = "111";
                        resultModel.result = "Approved Successfully";

                    }
                    else if (dt.Rows[0][0].ToString() == "112")
                    {

                        resultModel.status = "112";
                        resultModel.result = "Enter Remarks";
                    }
                    else if (dt.Rows[0][0].ToString() == "118")
                    {

                        resultModel.status = "118";
                        resultModel.result = "Original ID is IN-ACTIVE";
                    }
                    else if (dt.Rows[0][0].ToString() == "126")
                    {

                        resultModel.status = "126";
                        resultModel.result = "Duplicate ID not found";
                    }
                    else if (dt.Rows[0][0].ToString() == "124")
                    {

                        resultModel.status = "124";
                        resultModel.result = "Check Duplicate ID Not exists";
                    }
                    else if (dt.Rows[0][0].ToString() == "125")
                    {

                        resultModel.status = "125";
                        resultModel.result = "Duplicate ID payment pending";
                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Cannot be Approved";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        public class get_merge_doc
        {

            public List<merge_doc> merge_doc_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class merge_doc
        {

            public string kyc_photo { get; set; }
            public string customer_photo { get; set; }
            public string pan_photo { get; set; }
            public string form_60 { get; set; }
            public string neft_photo { get; set; }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_CustMerge_KycDocs(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string cust_status = data1.Split('^')[1].ToString();
            string New_cust_id = data1.Split('^')[2].ToString();
            string Old_cust_id = data1.Split('^')[3].ToString();

            string inputString = cust_status + '^' + New_cust_id + '^' + Old_cust_id + '^' + "";

            string extn, stringDocument, stringImage, filename;
            byte[] byteDocument, byteImage;

            string DocFileName = "", ImageName;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1, dt2, dt3, dt4 = new DataTable();
                Doc_data data = new Doc_data(); data = new Doc_data();

                try
                {
                    if (cust_status == "1")
                    {

                        dt = lb.PROC_CUSTOMER_MERGE("", "B", inputString, "");
                        if (dt.Rows.Count != 0)
                        {
                            string image1 = dt.Rows[0][0].ToString();
                            if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                            {
                                dt = lb.PROC_CUSTOMER_MERGE("", "B", inputString, "");
                                byteImage = (byte[])dt.Rows[0][0];
                                stringImage = Convert.ToBase64String(byteImage);
                                ImageName = New_cust_id;
                                extn = GetFileExtensionFromBytes(byteImage);

                                if (extn == ".tif" || extn == ".unknown")
                                {
                                    DocFileName = New_cust_id + extn;
                                    byteImage = ConvertToJpg(byteImage);
                                    extn = GetFileExtensionFromBytes(byteImage);
                                }


                                if (DownloadFile2(ImageName + "_kyc" + extn, byteImage))
                                {
                                    data.kyc_photo = ImageName + "_kyc" + extn;
                                    //data.extn = extn;
                                }

                                data.status = "111";
                                data.result = "Success";
                            }

                            else
                            {
                                data.status = "333";
                                data.result = "No Image found!";

                            }

                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                    else if (cust_status == "2")
                    {

                        dt = lb.PROC_CUSTOMER_MERGE("", "B", inputString, "");
                        if (dt.Rows.Count != 0)
                        {
                            string image1 = dt.Rows[0][0].ToString();
                            if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                            {
                                dt = lb.PROC_CUSTOMER_MERGE("", "B", inputString, "");
                                byteImage = (byte[])dt.Rows[0][0];
                                stringImage = Convert.ToBase64String(byteImage);
                                ImageName = Old_cust_id;
                                extn = GetFileExtensionFromBytes(byteImage);

                                if (extn == ".tif" || extn == ".unknown")
                                {
                                    DocFileName = Old_cust_id + extn;
                                    byteImage = ConvertToJpg(byteImage);
                                    extn = GetFileExtensionFromBytes(byteImage);
                                }


                                if (DownloadFile2(ImageName + "_kyc" + extn, byteImage))
                                {
                                    data.kyc_photo = ImageName + "_kyc" + extn;
                                    //data.extn = extn;
                                }

                                data.status = "111";
                                data.result = "Success";
                            }

                            else
                            {
                                data.status = "333";
                                data.result = "No Image found!";

                            }
                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                }

                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }

            else
            {

                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_CustMerge_CustPhoto(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string cust_status = data1.Split('^')[1].ToString();
            string New_cust_id = data1.Split('^')[2].ToString();
            string Old_cust_id = data1.Split('^')[3].ToString();

            string inputString = cust_status + '^' + New_cust_id + '^' + Old_cust_id + '^' + "";

            string extn, stringDocument, stringImage, filename;
            byte[] byteDocument, byteImage;

            string DocFileName = "", ImageName;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1, dt2, dt3, dt4 = new DataTable();
                Doc_data data = new Doc_data(); data = new Doc_data();

                try
                {
                    if (cust_status == "1")
                    {

                        dt = lb.PROC_CUSTOMER_MERGE("", "C", inputString, "");
                        if (dt.Rows.Count != 0)
                        {
                            string image1 = dt.Rows[0][0].ToString();
                            if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                            {
                                dt = lb.PROC_CUSTOMER_MERGE("", "C", inputString, "");
                                byteImage = (byte[])dt.Rows[0][0];
                                stringImage = Convert.ToBase64String(byteImage);
                                ImageName = New_cust_id;
                                extn = GetFileExtensionFromBytes(byteImage);

                                if (extn == ".tif" || extn == ".unknown")
                                {
                                    DocFileName = New_cust_id + extn;
                                    byteImage = ConvertToJpg(byteImage);
                                    extn = GetFileExtensionFromBytes(byteImage);
                                }


                                if (DownloadFile2(ImageName + "_Cust" + extn, byteImage))
                                {
                                    data.kyc_photo = ImageName + "_Cust" + extn;
                                }

                                data.status = "111";
                                data.result = "Success";
                            }

                            else
                            {
                                data.status = "333";
                                data.result = "No Image found!";

                            }

                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                    else if (cust_status == "2")
                    {

                        dt = lb.PROC_CUSTOMER_MERGE("", "C", inputString, "");
                        if (dt.Rows.Count != 0)
                        {
                            string image1 = dt.Rows[0][0].ToString();
                            if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                            {
                                dt = lb.PROC_CUSTOMER_MERGE("", "C", inputString, "");
                                byteImage = (byte[])dt.Rows[0][0];
                                stringImage = Convert.ToBase64String(byteImage);
                                ImageName = Old_cust_id;
                                extn = GetFileExtensionFromBytes(byteImage);

                                if (extn == ".tif" || extn == ".unknown")
                                {
                                    DocFileName = Old_cust_id + extn;
                                    byteImage = ConvertToJpg(byteImage);
                                    extn = GetFileExtensionFromBytes(byteImage);
                                }


                                if (DownloadFile2(ImageName + "_Cust" + extn, byteImage))
                                {
                                    data.kyc_photo = ImageName + "_Cust" + extn;
                                    //data.extn = extn;
                                }

                                data.status = "111";
                                data.result = "Success";
                            }

                            else
                            {
                                data.status = "333";
                                data.result = "No Image found!";

                            }
                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                }

                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }

            else
            {

                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_CustMerge_PanDocs(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string cust_status = data1.Split('^')[1].ToString();
            string New_cust_id = data1.Split('^')[2].ToString();
            string Old_cust_id = data1.Split('^')[3].ToString();

            string inputString = cust_status + '^' + New_cust_id + '^' + Old_cust_id + '^' + "";

            string extn, stringDocument, stringImage, filename;
            byte[] byteDocument, byteImage;

            string DocFileName = "", ImageName;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1, dt2, dt3, dt4 = new DataTable();
                Doc_data data = new Doc_data(); data = new Doc_data();

                try
                {
                    if (cust_status == "1")
                    {

                        dt = lb.PROC_CUSTOMER_MERGE("", "D", inputString, "");
                        if (dt.Rows.Count != 0)
                        {
                            string image1 = dt.Rows[0][0].ToString();
                            if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                            {
                                dt = lb.PROC_CUSTOMER_MERGE("", "D", inputString, "");
                                byteImage = (byte[])dt.Rows[0][0];
                                stringImage = Convert.ToBase64String(byteImage);
                                ImageName = New_cust_id;
                                extn = GetFileExtensionFromBytes(byteImage);

                                if (extn == ".tif" || extn == ".unknown")
                                {
                                    DocFileName = New_cust_id + extn;
                                    byteImage = ConvertToJpg(byteImage);
                                    extn = GetFileExtensionFromBytes(byteImage);
                                }


                                if (DownloadFile2(ImageName + "_Pan" + extn, byteImage))
                                {
                                    data.kyc_photo = ImageName + "_Pan" + extn;
                                }

                                data.status = "111";
                                data.result = "Success";
                            }

                            else
                            {
                                data.status = "333";
                                data.result = "No Image found!";

                            }

                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                    else if (cust_status == "2")
                    {

                        dt = lb.PROC_CUSTOMER_MERGE("", "D", inputString, "");
                        if (dt.Rows.Count != 0)
                        {
                            string image1 = dt.Rows[0][0].ToString();
                            if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                            {
                                dt = lb.PROC_CUSTOMER_MERGE("", "D", inputString, "");
                                byteImage = (byte[])dt.Rows[0][0];
                                stringImage = Convert.ToBase64String(byteImage);
                                ImageName = Old_cust_id;
                                extn = GetFileExtensionFromBytes(byteImage);

                                if (extn == ".tif" || extn == ".unknown")
                                {
                                    DocFileName = Old_cust_id + extn;
                                    byteImage = ConvertToJpg(byteImage);
                                    extn = GetFileExtensionFromBytes(byteImage);
                                }


                                if (DownloadFile2(ImageName + "_Pan" + extn, byteImage))
                                {
                                    data.kyc_photo = ImageName + "_Pan" + extn;
                                    //data.extn = extn;
                                }

                                data.status = "111";
                                data.result = "Success";
                            }

                            else
                            {
                                data.status = "333";
                                data.result = "No Image found!";

                            }
                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                }

                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }

            else
            {

                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_CustMerge_Form60Docs(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string cust_status = data1.Split('^')[1].ToString();
            string New_cust_id = data1.Split('^')[2].ToString();
            string Old_cust_id = data1.Split('^')[3].ToString();

            string inputString = cust_status + '^' + New_cust_id + '^' + Old_cust_id + '^' + "";

            string extn, stringDocument, stringImage, filename;
            byte[] byteDocument, byteImage;

            string DocFileName = "", ImageName;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1, dt2, dt3, dt4 = new DataTable();
                Doc_data data = new Doc_data(); data = new Doc_data();

                try
                {
                    if (cust_status == "1")
                    {

                        dt = lb.PROC_CUSTOMER_MERGE("", "E", inputString, "");
                        if (dt.Rows.Count != 0)
                        {
                            string image1 = dt.Rows[0][0].ToString();
                            if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                            {
                                dt = lb.PROC_CUSTOMER_MERGE("", "E", inputString, "");
                                byteImage = (byte[])dt.Rows[0][0];
                                stringImage = Convert.ToBase64String(byteImage);
                                ImageName = New_cust_id;
                                extn = GetFileExtensionFromBytes(byteImage);

                                if (extn == ".tif" || extn == ".unknown")
                                {
                                    DocFileName = New_cust_id + extn;
                                    byteImage = ConvertToJpg(byteImage);
                                    extn = GetFileExtensionFromBytes(byteImage);
                                }


                                if (DownloadFile2(ImageName + "_Form60" + extn, byteImage))
                                {
                                    data.kyc_photo = ImageName + "_Form60" + extn;
                                }

                                data.status = "111";
                                data.result = "Success";
                            }

                            else
                            {
                                data.status = "333";
                                data.result = "No Image found!";

                            }

                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                    else if (cust_status == "2")
                    {

                        dt = lb.PROC_CUSTOMER_MERGE("", "E", inputString, "");
                        if (dt.Rows.Count != 0)
                        {
                            string image1 = dt.Rows[0][0].ToString();
                            if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                            {
                                dt = lb.PROC_CUSTOMER_MERGE("", "E", inputString, "");
                                byteImage = (byte[])dt.Rows[0][0];
                                stringImage = Convert.ToBase64String(byteImage);
                                ImageName = Old_cust_id;
                                extn = GetFileExtensionFromBytes(byteImage);

                                if (extn == ".tif" || extn == ".unknown")
                                {
                                    DocFileName = Old_cust_id + extn;
                                    byteImage = ConvertToJpg(byteImage);
                                    extn = GetFileExtensionFromBytes(byteImage);
                                }


                                if (DownloadFile2(ImageName + "_Form60" + extn, byteImage))
                                {
                                    data.kyc_photo = ImageName + "_Form60" + extn;
                                    //data.extn = extn;
                                }

                                data.status = "111";
                                data.result = "Success";
                            }

                            else
                            {
                                data.status = "333";
                                data.result = "No Image found!";

                            }
                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                }

                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }

            else
            {

                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_CustMerge_NeftDocs(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string cust_status = data1.Split('^')[1].ToString();
            string New_cust_id = data1.Split('^')[2].ToString();
            string Old_cust_id = data1.Split('^')[3].ToString();

            string inputString = cust_status + '^' + New_cust_id + '^' + Old_cust_id + '^' + "";

            string extn, stringDocument, stringImage, filename;
            byte[] byteDocument, byteImage;

            string DocFileName = "", ImageName;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1, dt2, dt3, dt4 = new DataTable();
                Doc_data data = new Doc_data(); data = new Doc_data();

                try
                {
                    if (cust_status == "1")
                    {

                        dt = lb.PROC_CUSTOMER_MERGE("", "F", inputString, "");
                        if (dt.Rows.Count != 0)
                        {
                            string image1 = dt.Rows[0][0].ToString();
                            if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                            {
                                dt = lb.PROC_CUSTOMER_MERGE("", "F", inputString, "");
                                byteImage = (byte[])dt.Rows[0][0];
                                stringImage = Convert.ToBase64String(byteImage);
                                ImageName = New_cust_id;
                                extn = GetFileExtensionFromBytes(byteImage);

                                if (extn == ".tif" || extn == ".unknown")
                                {
                                    DocFileName = New_cust_id + extn;
                                    byteImage = ConvertToJpg(byteImage);
                                    extn = GetFileExtensionFromBytes(byteImage);
                                }


                                if (DownloadFile2(ImageName + "_Neft" + extn, byteImage))
                                {
                                    data.kyc_photo = ImageName + "_Neft" + extn;
                                }

                                data.status = "111";
                                data.result = "Success";
                            }

                            else
                            {
                                data.status = "333";
                                data.result = "No Image found!";

                            }

                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                    else if (cust_status == "2")
                    {

                        dt = lb.PROC_CUSTOMER_MERGE("", "F", inputString, "");
                        if (dt.Rows.Count != 0)
                        {
                            string image1 = dt.Rows[0][0].ToString();
                            if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                            {
                                dt = lb.PROC_CUSTOMER_MERGE("", "F", inputString, "");
                                byteImage = (byte[])dt.Rows[0][0];
                                stringImage = Convert.ToBase64String(byteImage);
                                ImageName = Old_cust_id;
                                extn = GetFileExtensionFromBytes(byteImage);

                                if (extn == ".tif" || extn == ".unknown")
                                {
                                    DocFileName = Old_cust_id + extn;
                                    byteImage = ConvertToJpg(byteImage);
                                    extn = GetFileExtensionFromBytes(byteImage);
                                }


                                if (DownloadFile2(ImageName + "_Neft" + extn, byteImage))
                                {
                                    data.kyc_photo = ImageName + "_Neft" + extn;
                                    //data.extn = extn;
                                }

                                data.status = "111";
                                data.result = "Success";
                            }

                            else
                            {
                                data.status = "333";
                                data.result = "No Image found!";

                            }
                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                }

                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }

            else
            {

                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        //----Pan Approval----////

        public class get_panzone_list
        {

            public List<panzone_list> zone_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class panzone_list
        {

            public string zoneid { get; set; }
            public string zonename { get; set; }


        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Pan_Zone_list(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_panzone_list data = new get_panzone_list();
                List<panzone_list> zone_dtls_list = new List<panzone_list>();

                try
                {

                    dt = lb.proc_ho_pan_aprvl("", "flag01", sessionId, "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            zone_dtls_list.Add(new panzone_list()
                            {
                                zoneid = dr[0].ToString(),
                                zonename = dr[1].ToString(),


                            });
                        }

                        data.zone_dtls_list = zone_dtls_list;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }



                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class get_panreg_list
        {

            public List<panreg_list> region_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class panreg_list
        {

            public string regionid { get; set; }
            public string region_name { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Pan_Reg_list(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string zone_id = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_panreg_list data = new get_panreg_list();
                List<panreg_list> region_dtls_list = new List<panreg_list>();

                try
                {

                    dt = lb.proc_ho_pan_aprvl("", "flag010", zone_id, "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            region_dtls_list.Add(new panreg_list()
                            {
                                regionid = dr[0].ToString(),
                                region_name = dr[1].ToString(),


                            });
                        }

                        data.region_dtls_list = region_dtls_list;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }



                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class get_panBr_list
        {

            public List<panBr_list> branch_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class panBr_list
        {

            public string branchid { get; set; }
            public string branchname { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Pan_Br_list(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string Reg_id = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_panBr_list data = new get_panBr_list();
                List<panBr_list> branch_dtls_list = new List<panBr_list>();

                try
                {

                    dt = lb.proc_ho_pan_aprvl("", "flag1", Reg_id, "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            branch_dtls_list.Add(new panBr_list()
                            {
                                branchid = dr[0].ToString(),
                                branchname = dr[1].ToString(),


                            });
                        }

                        data.branch_dtls_list = branch_dtls_list;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }



                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        public class get_PanCust_list
        {

            public List<PanCust_list> Cust_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class PanCust_list
        {

            public string New_Cust { get; set; }
            public string Old_Cust { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Pan_Cust_list(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string Br_id = data1.Split('~')[1].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_PanCust_list data = new get_PanCust_list();
                List<PanCust_list> Cust_dtls_list = new List<PanCust_list>();

                try
                {

                    dt = lb.proc_ho_pan_aprvl("", "flag2", Br_id, "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            Cust_dtls_list.Add(new PanCust_list()
                            {
                                New_Cust = dr[0].ToString(),
                                Old_Cust = dr[1].ToString(),


                            });
                        }

                        data.Cust_dtls_list = Cust_dtls_list;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }



                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class PanCust_data
        {
            public string cust_id { get; set; }
            public string cust_name { get; set; }
            public string branch_name { get; set; }
            public string pan { get; set; }
            public string plquot_no { get; set; }
            public string pledge_val { get; set; }
            public string branch_id { get; set; }
            public string tra_dt { get; set; }
            public string brphone { get; set; }


            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Pan_Cust_Dtls(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            PanCust_data data = new PanCust_data();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    dt = lb.proc_ho_pan_aprvl("", "flag3", cust_id, "");

                    if (dt.Rows.Count > 0)

                    {

                        data.cust_id = dt.Rows[0][0].ToString();
                        data.cust_name = dt.Rows[0][1].ToString();
                        data.branch_name = dt.Rows[0][2].ToString();
                        data.pan = dt.Rows[0][3].ToString();
                        data.plquot_no = dt.Rows[0][4].ToString();
                        data.pledge_val = dt.Rows[0][5].ToString();
                        data.branch_id = dt.Rows[0][6].ToString();
                        data.tra_dt = dt.Rows[0][7].ToString();
                        data.brphone = dt.Rows[0][8].ToString();


                        data.status = "111";
                        data.result = "Success";

                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";

                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "555";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }


        public class get_DgrBr_list
        {

            public List<DgrBr_list> Dgr_Br_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class DgrBr_list
        {

            public string fzm_id { get; set; }
            public string fzm { get; set; }
            public string reg_name { get; set; }
            public string branch_id { get; set; }
            public string branch_name { get; set; }
            public string cust_id { get; set; }
            public string Tra_date { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Pan_Danger_BrList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                get_DgrBr_list data = new get_DgrBr_list();
                List<DgrBr_list> Dgr_Br_data = new List<DgrBr_list>();

                try
                {

                    dt = lb.proc_ho_pan_aprvl("", "flag18", sessionId, "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            Dgr_Br_data.Add(new DgrBr_list()
                            {
                                fzm_id = dr[0].ToString(),
                                fzm = dr[1].ToString(),
                                reg_name = dr[2].ToString(),
                                branch_id = dr[3].ToString(),
                                branch_name = dr[4].ToString(),
                                cust_id = dr[5].ToString(),
                                Tra_date = dr[6].ToString(),

                            });
                        }

                        data.Dgr_Br_data = Dgr_Br_data;
                        data.status = "111";
                        data.result = "Success";
                    }
                    else
                    {

                        data.status = "222";
                        data.result = "No data found";
                    }



                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void PanCard_Approval(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string cust_id = data1.Split('^')[1].ToString();
            string remark = data1.Split('^')[4].ToString();
            string ho_verified_by = data1.Split('^')[5].ToString();
            string nsdl_status = data1.Split('^')[6].ToString();
            string nsdl_name = data1.Split('^')[7].ToString();

            // string details1 = cust_id reason;
            string inputString = cust_id + '^' + "" + '^' + "" + '^' + remark + '^' + ho_verified_by + '^' + nsdl_status + '^' + nsdl_name;
            //String reason = "";
            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                String msg;
                String reason = "";
                try
                {
                    dt = lb.proc_ho_pan_aprvl("", "flag4", inputString, "");

                    if (dt.Rows[0][0].ToString() == "Confirmed successfully!")
                    {

                        msg = send_mail_PanApproval(cust_id, remark);

                        if (msg == "Mail has been sent successfuly !")
                        {
                            resultModel.status = "111";
                            resultModel.result = "Approved Successfully";
                        }
                        else
                        {
                            resultModel.status = "666";
                            resultModel.result = "Failed";
                        }

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Failed to Approve";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void PanCard_Reject(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('^')[0].ToString();
            string cust_id = data1.Split('^')[1].ToString();
            string remark = data1.Split('^')[3].ToString();
            string ho_verified_by = data1.Split('^')[4].ToString();
            string nsdl_status = data1.Split('^')[5].ToString();
            string nsdl_name = data1.Split('^')[6].ToString();


            string inputString = cust_id + '^' + "" + '^' + remark + '^' + ho_verified_by + '^' + nsdl_status + '^' + nsdl_name;

            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                String msg;

                try
                {
                    dt = lb.proc_ho_pan_aprvl("", "flag5", inputString, "");

                    if (dt.Rows[0][0].ToString() == "Rejected successfully!")
                    {

                        msg = send_mail_PanReject(cust_id, remark);

                        if (msg == "Mail has been sent successfuly !")
                        {
                            resultModel.status = "111";
                            resultModel.result = "Rejected Successfully";
                        }
                        else
                        {
                            resultModel.status = "666";
                            resultModel.result = "Failed";
                        }
                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Failed to Rejected";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public string send_mail_PanverifyPending(string cust_id)
        {

            string mail_id;
            string str_res = "111";

            DataTable dt = new DataTable();
            DataSet ds;

            dt = lb.proc_ho_pan_aprvl("", "flag19", cust_id, "");

            mail_id = dt.Rows[0][0].ToString();


            //string str_res = "";
            string reason = cust_id;
            string displayName = "PANCARD VERIFICATION PENDING";
            string mailbody = "<p style='font-family: Calibri,Arial,Helvetica,sans-serif;font-size:12pt;color:rgb(0,0,0);'>Dear Sir/Madam,<br/><br/>The verification of pancard for above 5lakh pledges is pending in your branch for the customer id <b>" + cust_id + "</b> due to unavailability of <b>pancard</b>.So please add proper pancard as soon as early as possible.<br/>" +
             "<br> manappuram finance ltd.</br></span></p>";
            SmtpClient server = new SmtpClient("smtp.office365.com");
            server.Port = 587;
            server.EnableSsl = true;
            server.UseDefaultCredentials = false;
            int tls12 = 3072;
            System.Net.ServicePointManager.SecurityProtocol = (SecurityProtocolType)tls12;
            server.Credentials = new System.Net.NetworkCredential("kycdepartment@manappuram.com", "EDCwsx@123", "smtp.office365.com");
            server.Timeout = 10000;
            server.TargetName = "STARTTLS/smtp.office365.com";
            server.DeliveryMethod = SmtpDeliveryMethod.Network;
            MailMessage mail = new MailMessage();
            mail.From = new MailAddress("kycdepartment@manappuram.com");
            mail.To.Clear();
            mail.Body = "";
            mail.Attachments.Clear();
            mail.Subject = displayName;
            mail.Body = mailbody;
            mail.IsBodyHtml = true;
            mail.To.Add(mail_id);
            str_res = "Mail has been sent successfuly !";
            ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;
            server.Send(mail);
            return str_res;
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Confirm_send_mail_PanverifyPending(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();

            string inputString = cust_id;

            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                String msg;

                try
                {

                    msg = send_mail_PanverifyPending(cust_id);

                    if (msg == "Mail has been sent successfuly !")
                    {
                        resultModel.status = "111";
                        resultModel.result = "Mail has been sent successfuly";
                    }
                    else
                    {
                        resultModel.status = "666";
                        resultModel.result = "Failed";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public string send_mail_PanApproval(string cust_id, string reason)
        {

            string mail_id;
            string displayName = "";
            string mailbody = "";
            string str_res = "111";

            DataTable dt = new DataTable();
            DataSet ds;
            string inputString = cust_id;
            //string inputString = cust_id + '~' + checkflag;

            dt = lb.proc_ho_pan_aprvl("", "flag19", inputString, "");

            mail_id = dt.Rows[0][0].ToString();


            displayName = "PANCARD APPROVED ABOVE 5 LAKH PLEDGES";
            mailbody = "<p style='font-family: Calibri,Arial,Helvetica,sans-serif;font-size:12pt;color:rgb(0,0,0);'>Dear Sir/Madam,<br/><br/>Pancard & kyc(above 5lakh pledges) is approved in your branch for the customer id <b>" + cust_id + "</b><br/>" +
            "<br> manappuram finance ltd.</br></span></p>";


            SmtpClient server = new SmtpClient("smtp.office365.com");
            server.Port = 587;
            server.EnableSsl = true;
            server.UseDefaultCredentials = false;
            int tls12 = 3072;
            System.Net.ServicePointManager.SecurityProtocol = (SecurityProtocolType)tls12;
            server.Credentials = new System.Net.NetworkCredential("kycdepartment@manappuram.com", "EDCwsx@123", "smtp.office365.com");
            server.Timeout = 10000;
            server.TargetName = "STARTTLS/smtp.office365.com";
            server.DeliveryMethod = SmtpDeliveryMethod.Network;
            MailMessage mail = new MailMessage();
            mail.From = new MailAddress("kycdepartment@manappuram.com");
            mail.To.Clear();
            mail.Body = "";
            mail.Attachments.Clear();
            mail.Subject = displayName;
            mail.Body = mailbody;
            mail.IsBodyHtml = true;
            mail.To.Add(mail_id);
            str_res = "Mail has been sent successfuly !";
            ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;
            server.Send(mail);
            return str_res;
        }

        [WebMethod]
        public string send_mail_PanReject(string cust_id, string reason)
        {

            string mail_id;
            string displayName = "";
            string mailbody = "";
            string str_res = "111";

            DataTable dt = new DataTable();
            DataSet ds;
            string inputString = cust_id;
            //string inputString = cust_id + '~' + checkflag;

            dt = lb.proc_ho_pan_aprvl("", "flag19", inputString, "");

            mail_id = dt.Rows[0][0].ToString();


            displayName = "PANCARD REJECTED ABOVE 5 LAKH PLEDGES";
            mailbody = "<p style='font-family: Calibri,Arial,Helvetica,sans-serif;font-size:12pt;color:rgb(0,0,0);'>Dear Sir/Madam,<br/><br/>Pancard/kyc(above 5lakh pledges) is rejected in your branch for the customer id <b>" + cust_id + "</b> and the rejected reason is " + reason + ".If pancard is rejected ,please requesting for the pancard modification and the requesting path is(<b>NCD/Subordinated Bond ---------->Taxation---------->PAN Modify Request</b>)<br/>" +
               "<br> manappuram finance ltd.</br></span></p>";


            SmtpClient server = new SmtpClient("smtp.office365.com");
            server.Port = 587;
            server.EnableSsl = true;
            server.UseDefaultCredentials = false;
            int tls12 = 3072;
            System.Net.ServicePointManager.SecurityProtocol = (SecurityProtocolType)tls12;
            server.Credentials = new System.Net.NetworkCredential("kycdepartment@manappuram.com", "EDCwsx@123", "smtp.office365.com");
            server.Timeout = 10000;
            server.TargetName = "STARTTLS/smtp.office365.com";
            server.DeliveryMethod = SmtpDeliveryMethod.Network;
            MailMessage mail = new MailMessage();
            mail.From = new MailAddress("kycdepartment@manappuram.com");
            mail.To.Clear();
            mail.Body = "";
            mail.Attachments.Clear();
            mail.Subject = displayName;
            mail.Body = mailbody;
            mail.IsBodyHtml = true;
            mail.To.Add(mail_id);
            str_res = "Mail has been sent successfuly !";
            ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;
            server.Send(mail);
            return str_res;
        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Pan_ApproveDocs(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();
            string Doc_id = data1.Split('~')[2].ToString();

            string extn, stringDocument, stringImage, filename;
            byte[] byteDocument, byteImage;

            string DocFileName = "", ImageName;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1, dt2, dt3, dt4 = new DataTable();
                Doc_data data = new Doc_data(); data = new Doc_data();

                try
                {
                    if (Doc_id == "1")
                    {

                        dt = lb.proc_cust_verification("", "panphoto_ld", cust_id, "");
                        if (dt.Rows.Count != 0)
                        {
                            string image1 = dt.Rows[0][0].ToString();
                            if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                            {
                                dt = lb.proc_cust_verification("", "panphoto_ld", cust_id, "");
                                byteImage = (byte[])dt.Rows[0][0];
                                stringImage = Convert.ToBase64String(byteImage);
                                ImageName = cust_id;
                                extn = GetFileExtensionFromBytes(byteImage);

                                if (extn == ".tif" || extn == ".unknown")
                                {
                                    DocFileName = cust_id + extn;
                                    byteImage = ConvertToJpg(byteImage);
                                    extn = GetFileExtensionFromBytes(byteImage);
                                }


                                if (DownloadFile2(ImageName + "_pan" + extn, byteImage))
                                {
                                    data.pan_copy = ImageName + "_pan" + extn;
                                }

                                data.status = "111";
                                data.result = "Success";
                            }

                            else
                            {
                                data.status = "333";
                                data.result = "No Image found!";

                            }

                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                    else if (Doc_id == "2")
                    {

                        dt = lb.proc_cust_verification("", "kycphoto_ld", cust_id, "");
                        if (dt.Rows.Count != 0)
                        {
                            string image1 = dt.Rows[0][0].ToString();
                            if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                            {
                                dt = lb.proc_cust_verification("", "kycphoto_ld", cust_id, "");
                                byteImage = (byte[])dt.Rows[0][0];
                                stringImage = Convert.ToBase64String(byteImage);
                                ImageName = cust_id;
                                extn = GetFileExtensionFromBytes(byteImage);

                                if (extn == ".tif" || extn == ".unknown")
                                {
                                    DocFileName = cust_id + extn;
                                    byteImage = ConvertToJpg(byteImage);
                                    extn = GetFileExtensionFromBytes(byteImage);
                                }


                                if (DownloadFile2(ImageName + "_kyc" + extn, byteImage))
                                {
                                    data.kyc_photo = ImageName + "_kyc" + extn;
                                    //data.extn = extn;
                                }

                                data.status = "111";
                                data.result = "Success";
                            }

                            else
                            {
                                data.status = "333";
                                data.result = "No Image found!";

                            }
                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                    else if (Doc_id == "3")
                    {

                        dt = lb.proc_cust_verification("", "photo_ld", cust_id, "");
                        if (dt.Rows.Count != 0)
                        {
                            string image1 = dt.Rows[0][0].ToString();
                            if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                            {
                                dt = lb.proc_cust_verification("", "photo_ld", cust_id, "");
                                byteImage = (byte[])dt.Rows[0][0];
                                stringImage = Convert.ToBase64String(byteImage);
                                ImageName = cust_id;
                                extn = GetFileExtensionFromBytes(byteImage);

                                if (extn == ".tif" || extn == ".unknown")
                                {
                                    DocFileName = cust_id + extn;
                                    byteImage = ConvertToJpg(byteImage);
                                    extn = GetFileExtensionFromBytes(byteImage);
                                }


                                if (DownloadFile2(ImageName + "_photo" + extn, byteImage))
                                {
                                    data.pledge_photo = ImageName + "_photo" + extn;
                                    //data.extn = extn;
                                }

                                data.status = "111";
                                data.result = "Success";
                            }

                            else
                            {
                                data.status = "333";
                                data.result = "No Image found!";

                            }
                        }
                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                }

                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }

            else
            {

                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        [WebMethod]
        public string send_mail(string cust_id)
        {

            string mail_id;
            string str_res = "111";
                                  
            DataTable dt = new DataTable();
            DataSet ds;
        

            dt = lb.proc_ho_pan_aprvl("", "flag19", cust_id, "");



            mail_id = dt.Rows[0][0].ToString();


            //string str_res = "";
            string reason = cust_id;
            string displayName = "PANCARD VERIFICATION PENDING";
            string mailbody = "<p style='font-family: Calibri,Arial,Helvetica,sans-serif;font-size:12pt;color:rgb(0,0,0);'>Dear Sir/Madam,<br/><br/>The verification of pancard for above 5lakh pledges is pending in your branch for the customer id <b>" + cust_id + "</b> due to unavailability of <b>pancard</b>.So please add proper pancard as soon as early as possible.<br/>" +
             "<br> manappuram finance ltd.</br></span></p>";
            SmtpClient server = new SmtpClient("smtp.office365.com");
            server.Port = 587;
            server.EnableSsl = true;
            server.UseDefaultCredentials = false;
            int tls12 = 3072;
            System.Net.ServicePointManager.SecurityProtocol = (SecurityProtocolType)tls12;
            server.Credentials = new System.Net.NetworkCredential("kycdepartment@manappuram.com", "EDCwsx@123", "smtp.office365.com");
            server.Timeout = 10000;
            server.TargetName = "STARTTLS/smtp.office365.com";
            server.DeliveryMethod = SmtpDeliveryMethod.Network;
            MailMessage mail = new MailMessage();
            mail.From = new MailAddress("kycdepartment@manappuram.com");
            mail.To.Clear();
            mail.Body = "";
            mail.Attachments.Clear();
            mail.Subject = displayName;
            mail.Body = mailbody;
            mail.IsBodyHtml = true;
            mail.To.Add(mail_id);
            str_res = "Mail has been sent successfuly !";
            server.Send(mail);
            return str_res;
        }

        public string Getvalidpan(string Panno)
        {
            string RetrunResponse;
            string json = "{\"pan\":\"" + Panno + "\",\"firmId\":\"1\",\"empId\":\"111\"}";
            string url = "https://unsecurepl.manappuram.com/aadhaarapi/api/pan";
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12 | SecurityProtocolType.Tls;
            HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(url);
            webRequest.Method = "POST";
            webRequest.ContentType = "application/json";
            StreamWriter requestWriter = new StreamWriter(webRequest.GetRequestStream());
            requestWriter.Write(json);
            requestWriter.Close();
            HttpWebResponse response = (HttpWebResponse)webRequest.GetResponse();
            try
            {
                using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                {
                    RetrunResponse = reader.ReadToEnd();
                }


                JObject joResponse = JObject.Parse(RetrunResponse);
                string shortul = joResponse.SelectToken("apiStatus").ToString();
                string code = joResponse.SelectToken("status").ToString();
                string msg = joResponse.SelectToken("responseMsg").ToString();

                var data = joResponse["data"][0];
                string panstauts = (string)data["pan_status"];
                string firstname = (string)data["first_name"];
                string middlename = (string)data["middle_name"];
                string lastname = (string)data["last_name"];
                string pandata = panstauts + '~' + firstname + '~' + middlename + '~' + lastname;
                return pandata;
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }

        public class Getvalpan
        {
            public string firstname { get; set; }
            public string middlename { get; set; }
            public string lastname { get; set; }
            public string panstatus { get; set; }
            public string requestid { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Pan_status(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Getvalpan data = new Getvalpan();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string pan_no = data1.Split('~')[1].ToString();



            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    string panstat = Getvalidpan(pan_no);
                    int i = 0;
                    string[] spl;
                    spl = panstat.Split('~');
                    if (spl[0] == "VALID")
                    {

                        data.panstatus = spl[0];
                        data.firstname = spl[1];
                        data.middlename = spl[2];
                        data.lastname = spl[3];
                        data.status = "111";
                        data.result = "Success"; //"Success";
                    }
                    else
                    {
                        data.status = "444";
                        data.result = "Invalid PAN";
                    }

                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                data.status = "555";
                data.result = "Session Expired";
                Context.Response.Write(js.Serialize(data));
            }


        }

        //--------Girish-------124300-------CRF FOR PENDING MERGING AND PAN APPROVALS OBTAINED IN ESS APP---------end-----------//

        // ----------Adithyan ------124321------------------ INACTIVE AND ACTIVE PENDING APPROVALS -------- Start ----------



        [WebMethod]
        public void getBranch_Drp(string data) // to get branch drpdwn
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                dtls data2 = new dtls();
                List<lists> get_list = new List<lists>();

                try
                {
                    dt = lb.PROC_COMMON_SELECT("adhar_verification", "2", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_list.Add(new lists()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.dtls_list = get_list;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        [WebMethod]
        public void getCustdtls_drp(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                dtls data2 = new dtls();
                List<lists> get_list = new List<lists>();

                try
                {
                    dt = lb.PROC_COMMON_SELECT("adhar_verification", "3", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_list.Add(new lists()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.dtls_list = get_list;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        //--------------------------

        public class getid
        {
            public string CUST_NAME { get; set; }
            public string father_name { get; set; }
            public string dob { get; set; }
            public string phone { get; set; }
            public string adhar_no { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void getCustdtls_new(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            getid val = new getid();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_COMMON_SELECT("adhar_verification", "4", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        val.CUST_NAME = dt.Rows[0][0].ToString();
                        val.father_name = dt.Rows[0][1].ToString();
                        val.dob = dt.Rows[0][2].ToString();
                        val.phone = dt.Rows[0][3].ToString();
                        val.adhar_no = dt.Rows[0][4].ToString();


                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }


        [WebMethod]
        public void get_Zone(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string dataString = decryptedIData;
            string sessionId = dataString;

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                dtls data2 = new dtls();
                List<lists> get_list = new List<lists>();

                try
                {
                    dt = lb.PROC_COMMON_SELECT("adhar_verification", "12", "", "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_list.Add(new lists()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.dtls_list = get_list;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class getidNew
        {
            public string cust_name { get; set; }
            public string fat_hus { get; set; }
            public string date_of_birth { get; set; }
            public string phone2 { get; set; }
            public string id_number { get; set; }
            public string CUST_ID { get; set; }
           
            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void get_existing_dtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            getidNew val = new getidNew();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_COMMON_SELECT("adhar_verification", "5", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        val.cust_name = dt.Rows[0][0].ToString();
                        val.fat_hus = dt.Rows[0][1].ToString();
                        val.date_of_birth = dt.Rows[0][2].ToString();
                        val.phone2 = dt.Rows[0][3].ToString();
                        val.id_number = dt.Rows[0][4].ToString();
                        val.CUST_ID = dt.Rows[0][5].ToString();


                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }



        [WebMethod]
        public void custidchk(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                dtls data2 = new dtls();
                List<lists> get_list = new List<lists>();

                try
                {
                    dt = lb.PROC_COMMON_SELECT("adhar_verification", "13", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_list.Add(new lists()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.dtls_list = get_list;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        //---------------------------------------------------------------------------------------------------------------------------

        public class Get_confirm_data
        {


            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void confirm_data(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel resultModel = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_COMMON_SELECT("adhar_verification", "7", dataArray[1], "");

                    if (dt.Rows[0][0].ToString() == "Confirmed Successfully")
                    {
                        resultModel.status = "111";
                        resultModel.result = "Confirmed Successfully";
                    }
                    else
                    {
                        resultModel.status = "222";
                        resultModel.result = "No Data Found";
                    }
                }
                else
                {
                    resultModel.status = "333";
                    resultModel.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                resultModel.status = "666";
                resultModel.result = "Something went wrong";
            }
            if (resultModel.status == "111")
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
            else
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class Get_reject_data
        {


            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void reject_data(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel resultModel = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_COMMON_SELECT("adhar_verification", "8", dataArray[1], "");

                    if (dt.Rows[0][0].ToString() == "Rejected !!")
                    {
                        resultModel.status = "111";
                        resultModel.result = "Rejected !!";
                    }
                    else
                    {
                        resultModel.status = "222";
                        resultModel.result = "No Data Found";
                    }
                }
                else
                {
                    resultModel.status = "333";
                    resultModel.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                resultModel.status = "666";
                resultModel.result = "Something went wrong";
            }
            if (resultModel.status == "111")
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
            else
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class ResultModel_doc1_adhaar
        {
            public string status { get; set; }
            public string result { get; set; }
            public string image { get; set; }
            public string extension { get; set; }

        }

        [WebMethod]
        public void viewkyc_doc(string flag,string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel_doc1 resultModel = new ResultModel_doc1();

            byte[] dataFile = new byte[0];
            string data1 = Decryptrel(data);
            string[] dataArray = data1.Split('$');


            string inputstring = dataArray[1];


            if (isSessionValid(dataArray[0]) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileName;
                string extension;

                try
                {
                    dt = lb.PROC_COMMON_SELECT("adhar_verification", flag, inputstring, "0");
                    if (dt.Rows.Count != 0)
                    {

                        string image1 = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][0];
                                dataFile = (byte[])dt.Rows[0][0];
                                extension = GetFileExtensionFromBytes(dataFile);

                                if (extension == ".tif" || extension == ".unknown")
                                {
                                    dataFile = ConvertToJpg(dataFile);
                                    extension = GetFileExtensionFromBytes(dataFile);
                                }


                                if (extension == ".Jpeg")
                                {
                                    dataFile = justfuncJpegBytes(s);
                                    extension = GetFileExtensionFromBytes(dataFile);
                                }

                                if (extension == ".pdf")
                                {
                                    dataFile = (byte[])dt.Rows[0][0];
                                    extension = GetFileExtensionFromBytes(dataFile);
                                }


                                DocFileName = "kycdoc" + extension;
                                if (DownloadFile2(DocFileName, dataFile))
                                {
                                    resultModel.status = "111";
                                    resultModel.result = "Success";
                                    resultModel.image = DocFileName;
                                    resultModel.extension = extension;

                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "Failed";
                                }
                            }
                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "No Image found!";

                        }

                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    resultModel.status = "222";
                    resultModel.result = "No Image Found";
                    Context.Response.Write(js.Serialize(resultModel));

                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));

            }
        }

        // ----------Adithyan ------124321------------------ INACTIVE AND ACTIVE PENDING APPROVALS -------- End ----------

        //-----------Neethu---------124404-----------------Crf For Field Tour Application In Ess Application----start--

        public class Designationdata
        {
            public string POST_ID { get; set; }
            public string POST_NAME { get; set; }

        }


        public class Designationdatadetails
        {
            public List<Designationdata> getdesignationDetails { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Tour_DesignationListdetails(string p_data)
        {
            //js.MaxJsonLength = Int32.MaxValue;
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string empCode = data1.Split('~')[1].ToString();
            string branchid = data1.Split('~')[2].ToString();
            string input = empCode + '~' + branchid;

            Designationdatadetails details = new Designationdatadetails();
            List<Designationdata> get_DesignationDetails = new List<Designationdata>();

            if (isSessionValid(sessionId) == "1")
            {

                DataTable dt = new DataTable();
                try
                {


                    dt = lb.proc_mobapp_ngl(240, input);



                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_DesignationDetails.Add(new Designationdata()
                            {
                                POST_NAME = dr[0].ToString(),
                                POST_ID = dr[1].ToString(),

                            });
                        }



                        details.getdesignationDetails = get_DesignationDetails;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Exception :" + ex.Message;
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }



            Context.Response.Write(js.Serialize(details));



        }


        public class Branchdata
        {
            public string BRANCH_ID { get; set; }
            public string BRANCH_NAME { get; set; }

        }
        public class Brdatadetails
        {
            public List<Branchdata> getBrDetails { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Tour_Branchdatadetails(string p_data)
        {
            //js.MaxJsonLength = Int32.MaxValue;
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";


            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string empCode = data1.Split('~')[1].ToString();
            string branchid = data1.Split('~')[2].ToString();
            string input = empCode + '~' + branchid;


            Brdatadetails details = new Brdatadetails();
            List<Branchdata> get_BrDetails = new List<Branchdata>();

            if (isSessionValid(sessionId) == "1")
            {

                DataTable dt = new DataTable();
                try
                {


                    dt = lb.proc_mobapp_ngl(239, input);



                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_BrDetails.Add(new Branchdata()
                            {
                                BRANCH_NAME = dr[0].ToString(),
                                BRANCH_ID = dr[1].ToString(),

                            });
                        }



                        details.getBrDetails = get_BrDetails;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Exception :" + ex.Message;
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }



            Context.Response.Write(js.Serialize(details));

        }

        public class Employeedata
        {

            public string EMPLOYEE_ID { get; set; }
            public string EMPLOYEE_NAME { get; set; }

        }
        public class Employeedatadetails
        {
            public List<Employeedata> getemployeeDetails { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Tour_EmployeeListdetails(string p_data)
        {
            //js.MaxJsonLength = Int32.MaxValue;
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string empCode = data1.Split('~')[1].ToString();
            string postid = data1.Split('~')[2].ToString();
            string input = empCode + '~' + postid;


            Employeedatadetails details = new Employeedatadetails();
            List<Employeedata> get_EmployeeDetails = new List<Employeedata>();

            if (isSessionValid(sessionId) == "1")
            {

                DataTable dt = new DataTable();
                try
                {


                    dt = lb.proc_mobapp_ngl(241, input);



                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_EmployeeDetails.Add(new Employeedata()
                            {
                                EMPLOYEE_NAME = dr[0].ToString(),
                                EMPLOYEE_ID = dr[1].ToString(),

                            });
                        }



                        details.getemployeeDetails = get_EmployeeDetails;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                    details.result = "Exception :" + ex.Message;
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }



            Context.Response.Write(js.Serialize(details));



        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Tour_application_request(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string branchId = data1.Split('~')[1].ToString();
            string userId = data1.Split('~')[2].ToString();
            string empname = data1.Split('~')[3].ToString();
            string branchname = data1.Split('~')[4].ToString();
            string fromdate = data1.Split('~')[5].ToString();
            string todate = data1.Split('~')[6].ToString();
            string trndate = data1.Split('~')[7].ToString();
            string tobranch = data1.Split('~')[8].ToString();
            string purpose = data1.Split('~')[9].ToString();
            string toplace = data1.Split('~')[10].ToString();
            string designation = data1.Split('~')[11].ToString();
            string fromtime = data1.Split('~')[12].ToString();
            string totime = data1.Split('~')[13].ToString();
            string empcode = data1.Split('~')[14].ToString();
            string tobranchid = data1.Split('~')[15].ToString();
            string department = data1.Split('~')[16].ToString();
            string departmentid = data1.Split('~')[17].ToString();

            string input = branchId + '~' + userId + '~' + empname + '~' + branchname + '~' + fromdate + '~' + todate + '~' + trndate
                            + '~' + tobranch + '~' + purpose + '~' + toplace + '~' + designation + '~' + fromtime + '~' + totime + '~' + empcode
                            + '~' + tobranchid + '~' + department + '~' + departmentid;

            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";

                try
                {
                    dt = lb.proc_mobapp_ngl(242, input);

                    if (dt.Rows[0][0].ToString() == "111")
                    {

                        resultModel.status = "111";
                        resultModel.result = "Saved Successfully!!";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Already requested on selected Date!!";
                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "777";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }



        //-----------Neethu---------124404-----------------Crf For Field Tour Application In Ess Application----end

        //-----------Aswathy---------124332-----------------Customer Modification --- start

        public class get_id_name
        {

            public List<get_id_name_dtls> getdtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }

        public class get_id_name_dtls
        {
            public string id { get; set; }
            public string name { get; set; }
        }

        [WebMethod]
        public void GetRegionDrp_Neft(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                get_id_name data2 = new get_id_name();
                List<get_id_name_dtls> get_dtls = new List<get_id_name_dtls>();

                try
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", "A", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {

                            get_dtls.Add(new get_id_name_dtls()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.getdtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void GetAreaDrp_Neft(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                get_id_name data2 = new get_id_name();
                List<get_id_name_dtls> get_dtls = new List<get_id_name_dtls>();

                try
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", "B", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new get_id_name_dtls()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.getdtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void GetBranchDrp_Neft(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                get_id_name data2 = new get_id_name();
                List<get_id_name_dtls> get_dtls = new List<get_id_name_dtls>();

                try
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", "C", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new get_id_name_dtls()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.getdtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void GetCustDrp_Neft(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                get_id_name data2 = new get_id_name();
                List<get_id_name_dtls> get_dtls = new List<get_id_name_dtls>();

                try
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", "R", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new get_id_name_dtls()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.getdtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class view_dtls_Neft
        {
            public string cust_id { get; set; }
            public string cust_name { get; set; }
            public string ben_accnt { get; set; }
            public string ifsc { get; set; }
            public string ben_branch { get; set; }
            public string account_name { get; set; }
            public string cust_name1 { get; set; }
            public string branch_id { get; set; }
            public string curr_status { get; set; }
            public string ah_user { get; set; }
            public string ben_branch1 { get; set; }
            public string remark { get; set; }
            public string ah_date { get; set; }
            public string rm_date { get; set; }
            public string rm_user { get; set; }
            public string rm_remark { get; set; }
            public string req_date { get; set; }
            public string user_id { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        public void getCustDtls_Neft(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            view_dtls_Neft val = new view_dtls_Neft();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS1", "S", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {
                        val.cust_id = dt.Rows[0][0].ToString();
                        val.cust_name = dt.Rows[0][1].ToString();
                        val.ben_accnt = dt.Rows[0][2].ToString();
                        val.ifsc = dt.Rows[0][3].ToString();
                        val.ben_branch = dt.Rows[0][4].ToString();
                        val.account_name = dt.Rows[0][5].ToString();
                        val.cust_name1 = dt.Rows[0][6].ToString();
                        val.branch_id = dt.Rows[0][7].ToString();
                        val.curr_status = dt.Rows[0][8].ToString();
                        val.ah_user = dt.Rows[0][9].ToString();
                        val.ben_branch1 = dt.Rows[0][10].ToString();
                        val.remark = dt.Rows[0][11].ToString();
                        val.ah_date = dt.Rows[0][12].ToString();
                        val.rm_date = dt.Rows[0][13].ToString();
                        val.rm_user = dt.Rows[0][14].ToString();
                        val.rm_remark = dt.Rows[0][15].ToString();
                        val.req_date = dt.Rows[0][16].ToString();
                        val.user_id = dt.Rows[0][17].ToString();
                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        [WebMethod]
        public void Approve_Neft(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel val = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", "W", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0][0].ToString() == "111")
                        {
                            val.status = "111";
                            val.result = "Approved";
                        }
                        else if(dt.Rows[0][0].ToString() == "116")
                        {
                            val.status = "111";
                            val.result = "Recommended successfully";
                        }
                        else if (dt.Rows[0][0].ToString() == "112")
                        {
                            val.status = "222";
                            val.result = "There are too many rows, please Reject";
                        }
                        else if (dt.Rows[0][0].ToString() == "113")
                        {
                            val.status = "222";
                            val.result = "NO DATA FOUND";
                        }
                        else if (dt.Rows[0][0].ToString() == "114")
                        {
                            val.status = "222";
                            val.result = "ALREADY ONE APPROVAL/REJECTION  IS PENDING";
                        }
                        else if (dt.Rows[0][0].ToString() == "115")
                        {
                            val.status = "222";
                            val.result = "The requester and the recommendation/approval are cannot be the same person";
                        }
                        else
                        {
                            val.status = "222";
                            val.result = dt.Rows[0][0].ToString();
                        }

                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        [WebMethod]
        public void Reject_Neft(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel val = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", "Y", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0][0].ToString() == "111")
                        {
                            val.status = "111";
                            val.result = "Rejected";
                        }
                        else if (dt.Rows[0][0].ToString() == "115")
                        {
                            val.status = "222";
                            val.result = "The requester and the rejector are cannot be the same person";
                        }
                        else if (dt.Rows[0][0].ToString() == "116")
                        {
                            val.status = "222";
                            val.result = "Select the reason or Enter Remarks";
                        }
                        else
                        {
                            val.status = "222";
                            val.result = dt.Rows[0][0].ToString();
                        }
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }


        //----------------------------------------------customer modification

        [WebMethod]
        public void GetCustDrp_Modification(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                get_id_name data2 = new get_id_name();
                List<get_id_name_dtls> get_dtls = new List<get_id_name_dtls>();

                try
                {
                    //dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", "D", dataArray[1], "");
                    dt = lb.PROC_CUST_HOAPPS_OLD("", "D", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new get_id_name_dtls()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.getdtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }



        public class view_rep_custmodification
        {
            public string cusid { get; set; }//0
            public string UPLOADED_BRANCH { get; set; } //1
            public string UPLOADED_USER { get; set; }//2
            public string TRA_DT { get; set; }//3
            public string RECOMM_BY { get; set; }//4
            public string RECOMM_DATE { get; set; }//5
            public string REMARKS { get; set; }//6
            public string IDENTITY_NAME { get; set; }//7
            public string KYC_ID { get; set; }//8
            public string CUST_NAME { get; set; }//9
            public string HOUSE_NAME { get; set; }//10
            public string PIN_CODE { get; set; }//11
            public string STREET { get; set; }//12
            public string PHONE2 { get; set; }//13
            public string PHONE1 { get; set; }//14
            public string OCCUPATION_NAME { get; set; }//15
            public string CUST_PHOTO { get; set; }//16
            public string KYC_PHOTO { get; set; }//17
            public string DOB { get; set; }//18
            public string DOI { get; set; }//19
            public string DOE { get; set; }//20
            public string GENDER { get; set; }//21
            public string RESIDENT { get; set; }//22
            public string Father_NM { get; set; }//23
            public string Mother_NM { get; set; }//24
            public string old_id_number { get; set; }//25
            public string oidentity_name { get; set; }//26
            public string ohouse_name { get; set; }//27
            public string olocality { get; set; }//28
            public string opin_code { get; set; }//29
            public string ostreet { get; set; }//30
            public string ophone1 { get; set; }//31
            public string ophone2 { get; set; }//32
            public string o_occupation_name { get; set; }//33
            public string o_cust_name { get; set; }//34
            public string o_DATE_OF_BIRTH { get; set; }//35
            public string o_MOTHER_NAME { get; set; }//36
            public string o_ISSUE_DT { get; set; }//37
            public string o_EXP_DT { get; set; }//38
            public string o_GENDER { get; set; }//39
            public string o_FAT_HUS { get; set; }//40
            public string o_RESIDENT { get; set; }//41
            public string RECOM2 { get; set; }//42
            public string RECOM2_RMK { get; set; }//43
            public string RECOM2_DT { get; set; }//44
            public string RECOM3 { get; set; }//45
            public string RECOM3_RMK { get; set; }//46
            public string RECOM3_DT { get; set; }//47
            public string HO_VERIFY_BY { get; set; }//48
            public string HO_VERIFY_DATE { get; set; }//49
            public string HO_REMARKS { get; set; }//50
            public string CUST_PHOTO1 { get; set; }//51
            public string KYC_PHOTO1 { get; set; }//52
            public string LOCALITY { get; set; }//53

            public string status { get; set; }
            public string result { get; set; }

        }
        [WebMethod]
        public void getCustDtls_Modification(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            view_rep_custmodification val = new view_rep_custmodification();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS1", "E", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {
                        val.cusid = dt.Rows[0][0].ToString();
                        val.UPLOADED_BRANCH = dt.Rows[0][1].ToString();
                        val.UPLOADED_USER = dt.Rows[0][2].ToString();
                        val.TRA_DT = dt.Rows[0][3].ToString();
                        val.RECOMM_BY = dt.Rows[0][4].ToString();
                        val.RECOMM_DATE = dt.Rows[0][5].ToString();
                        val.REMARKS = dt.Rows[0][6].ToString();
                        val.IDENTITY_NAME = dt.Rows[0][7].ToString();
                        val.KYC_ID = dt.Rows[0][8].ToString();
                        val.CUST_NAME = dt.Rows[0][9].ToString();
                        val.HOUSE_NAME = dt.Rows[0][10].ToString();
                        val.PIN_CODE = dt.Rows[0][11].ToString();
                        val.STREET = dt.Rows[0][12].ToString();
                        val.PHONE2 = dt.Rows[0][13].ToString();
                        val.PHONE1 = dt.Rows[0][14].ToString();
                        val.OCCUPATION_NAME = dt.Rows[0][15].ToString();
                        val.CUST_PHOTO = dt.Rows[0][16].ToString();
                        val.KYC_PHOTO = dt.Rows[0][17].ToString();
                        val.DOB = dt.Rows[0][18].ToString();
                        val.DOI = dt.Rows[0][19].ToString();
                        val.DOE = dt.Rows[0][20].ToString();
                        val.GENDER = dt.Rows[0][21].ToString();
                        val.RESIDENT = dt.Rows[0][22].ToString();
                        val.Father_NM = dt.Rows[0][23].ToString();
                        val.Mother_NM = dt.Rows[0][24].ToString();
                        val.old_id_number = dt.Rows[0][25].ToString();
                        val.oidentity_name = dt.Rows[0][26].ToString();
                        val.ohouse_name = dt.Rows[0][27].ToString();
                        val.olocality = dt.Rows[0][28].ToString();
                        val.opin_code = dt.Rows[0][29].ToString();
                        val.ostreet = dt.Rows[0][30].ToString();
                        val.ophone1 = dt.Rows[0][31].ToString();
                        val.ophone2 = dt.Rows[0][32].ToString();
                        val.o_occupation_name = dt.Rows[0][33].ToString();
                        val.o_cust_name = dt.Rows[0][34].ToString();
                        val.o_DATE_OF_BIRTH = dt.Rows[0][35].ToString();
                        val.o_MOTHER_NAME = dt.Rows[0][36].ToString();
                        val.o_ISSUE_DT = dt.Rows[0][37].ToString();
                        val.o_EXP_DT = dt.Rows[0][38].ToString();
                        val.o_GENDER = dt.Rows[0][39].ToString();
                        val.o_FAT_HUS = dt.Rows[0][40].ToString();
                        val.o_RESIDENT = dt.Rows[0][41].ToString();
                        val.RECOM2 = dt.Rows[0][42].ToString();
                        val.RECOM2_RMK = dt.Rows[0][43].ToString();
                        val.RECOM2_DT = dt.Rows[0][44].ToString();
                        val.RECOM3 = dt.Rows[0][45].ToString();
                        val.RECOM3_RMK = dt.Rows[0][46].ToString();
                        val.RECOM3_DT = dt.Rows[0][47].ToString();
                        val.HO_VERIFY_BY = dt.Rows[0][48].ToString();
                        val.HO_VERIFY_DATE = dt.Rows[0][49].ToString();
                        val.HO_REMARKS = dt.Rows[0][50].ToString();
                        val.CUST_PHOTO1 = dt.Rows[0][51].ToString();
                        val.KYC_PHOTO1 = dt.Rows[0][52].ToString();
                        val.LOCALITY = dt.Rows[0][53].ToString();
                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        [WebMethod]
        public void Approve_custChange(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel val = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    //dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", "F", dataArray[1], "");
                    dt = lb.PROC_CUST_HOAPPS_OLD("", "F", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0][0].ToString() == "111")
                        {
                            val.status = "111";
                            val.result = "Approved";
                        }
                        else if (dt.Rows[0][0].ToString() == "112")
                        {
                            val.status = "222";
                            val.result = "There are too many rows, please Reject";
                        }
                        else if (dt.Rows[0][0].ToString() == "113")
                        {
                            val.status = "222";
                            val.result = "NO DATA FOUND";
                        }
                        else if (dt.Rows[0][0].ToString() == "114")
                        {
                            val.status = "222";
                            val.result = "ALREADY ONE APPROVAL/REJECTION  IS PENDING";
                        }
                        else if (dt.Rows[0][0].ToString() == "115")
                        {
                            val.status = "222";
                            val.result = "The requester and the recommendation/approval are cannot be the same person";
                        }
                        else
                        {
                            val.status = "222";
                            val.result = dt.Rows[0][0].ToString();
                        }

                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        [WebMethod]
        public void viewkyc_doc_custmod(string flag, string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel_doc1 resultModel = new ResultModel_doc1();

            byte[] dataFile = new byte[0];
            string data1 = Decryptrel(data);
            string[] dataArray = data1.Split('$');


            string inputstring = dataArray[1];


            if (isSessionValid(dataArray[0]) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileName;
                string extension;

                try
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", flag, inputstring, "0");
                    if (dt.Rows.Count != 0)
                    {

                        string image1 = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][0];
                                dataFile = (byte[])dt.Rows[0][0];
                                extension = GetFileExtensionFromBytes(dataFile);

                                if (extension == ".tif" || extension == ".unknown")
                                {
                                    dataFile = ConvertToJpg(dataFile);
                                    extension = GetFileExtensionFromBytes(dataFile);
                                }


                                if (extension == ".Jpeg")
                                {
                                    dataFile = justfuncJpegBytes(s);
                                    extension = GetFileExtensionFromBytes(dataFile);
                                }

                                if (extension == ".pdf")
                                {
                                    dataFile = (byte[])dt.Rows[0][0];
                                    extension = GetFileExtensionFromBytes(dataFile);
                                }


                                DocFileName = "kycdoc" + extension;
                                if (DownloadFile2(DocFileName, dataFile))
                                {
                                    resultModel.status = "111";
                                    resultModel.result = "Success";
                                    resultModel.image = DocFileName;
                                    resultModel.extension = extension;

                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "Failed";
                                }
                            }
                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "No Image found!";

                        }

                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    resultModel.status = "222";
                    resultModel.result = "No Image Found";
                    Context.Response.Write(js.Serialize(resultModel));

                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));

            }
        }


        [WebMethod]
        public void Reject_custmod(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel val = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", "K", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0][0].ToString() == "111")
                        {
                            val.status = "111";
                            val.result = "Rejected";
                        }
                        else if (dt.Rows[0][0].ToString() == "115")
                        {
                            val.status = "222";
                            val.result = "The requester and the rejector are cannot be the same person";
                        }
                        else if (dt.Rows[0][0].ToString() == "116")
                        {
                            val.status = "222";
                            val.result = "Select the reason or Enter Remarks";
                        }
                        else
                        {
                            val.status = "222";
                            val.result = dt.Rows[0][0].ToString();
                        }

                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        //-----------Aswathy---------124332-----------------Customer Modification --- end

        // ------ Aswathy --------- 124712 --Department wise field employee absent list in ESS application   ------- Start


        public class getAbsentCount
        {

            public List<absentcount> absent_count { get; set; }

            public string total_employees { get; set; }
            public string total_absent { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }

        public class absentcount
        {
            public string total_absent { get; set; }
            public string post_id { get; set; }
            public string post_name { get; set; }
        }

        [WebMethod]
        public void get_AbsentCount(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataTable dt1 = new DataTable();
                DataSet dS = new DataSet();
                getAbsentCount data2 = new getAbsentCount();
                List<absentcount> get_dtls = new List<absentcount>();

                try
                {
                    dt = lb.proc_mobapp_ngl(244, dataArray[1]);

                    dt1 = lb.proc_mobapp_ngl(248, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new absentcount()
                            {
                                total_absent = dr[0].ToString(),
                                post_id = dr[1].ToString(),
                                post_name = dr[2].ToString(),
                            });
                        }

                        data2.absent_count = get_dtls;
                        data2.total_employees = dt1.Rows[0][0].ToString();
                        data2.total_absent = dt1.Rows[0][1].ToString();
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class getAbsent_dtls
        {

            public List<absentdtls> absent_count { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }

        public class absentdtls
        {
            public string emp_code { get; set; }
            public string emp_name { get; set; }
            public string post_id { get; set; }
            public string post_name { get; set; }
            public string branch_id { get; set; }
            public string branch_name { get; set; }
            public string state_id { get; set; }
            public string state_name { get; set; }
        }

        [WebMethod]
        public void get_AbsentDtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                getAbsent_dtls data2 = new getAbsent_dtls();
                List<absentdtls> get_dtls = new List<absentdtls>();
                try
                {
                    dt = lb.proc_mobapp_ngl(245, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new absentdtls()
                            {
                                emp_code = dr[0].ToString(),
                                emp_name = dr[1].ToString(),
                                post_id = dr[2].ToString(),
                                post_name = dr[3].ToString(),
                                branch_id = dr[4].ToString(),
                                branch_name = dr[5].ToString(),
                                state_id = dr[6].ToString(),
                                state_name = dr[7].ToString(),
                            });
                        }
                        data2.absent_count = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;
                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class getAttendanceReport
        {

            public List<getPunchReport> getPunchingReport { get; set; }
            public string emp_code { get; set; }
            public string emp_name { get; set; }
            public string post_id { get; set; }
            public string post_name { get; set; }
            public string branch_id { get; set; }
            public string branch_name { get; set; }
            public string state_id { get; set; }
            public string state_name { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class getPunchReport
        {
            public string day { get; set; }
            public string morning_time { get; set; }
            public string evening_time { get; set; }
            public string remarks { get; set; }
            public string alert { get; set; }

        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void getIndividualAttendanceReport(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                getAttendanceReport data2 = new getAttendanceReport();
                List<getPunchReport> getIndividualData = new List<getPunchReport>();

                try
                {
                    dt = lb.proc_mobapp_ngl(246, dataArray[1]);
                    dt1 = lb.proc_mobapp_ngl(247, dataArray[1]);

                    if (dt1.Rows[0][0].ToString() == "222")
                    {
                        data2.status = "222";
                        data2.result = "This employee is from another department";
                    }
                    else
                    {
                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                getIndividualData.Add(new getPunchReport()
                                {
                                    day = dr[0].ToString(),
                                    morning_time = dr[1].ToString(),
                                    evening_time = dr[2].ToString(),
                                    remarks = dr[3].ToString(),
                                    alert = dr[4].ToString(),

                                });
                            }
                            data2.emp_code = dt1.Rows[0][0].ToString();
                            data2.emp_name = dt1.Rows[0][1].ToString();
                            data2.post_id = dt1.Rows[0][2].ToString();
                            data2.post_name = dt1.Rows[0][3].ToString();
                            data2.branch_id = dt1.Rows[0][4].ToString();
                            data2.branch_name = dt1.Rows[0][5].ToString();
                            data2.state_id = dt1.Rows[0][6].ToString();
                            data2.state_name = dt1.Rows[0][7].ToString();

                            data2.getPunchingReport = getIndividualData;
                            data2.status = "111";
                            data2.result = "Success";
                        }
                        else
                        {

                            data2.status = "222";
                            data2.result = "No data found";
                        }
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        // ------ Aswathy ---------------- 124712-Department wise field employee absent list in ESS application   ------- End

        //----Girish-------124814-------CRF for MSME Collection Pending loans customer Visit in ESS Application-------start--//




        public class msme_data
        {
            public string loan_id { get; set; }
            public string loan_dtls { get; set; }
            public string cust_name { get; set; }
            public string msme_branch { get; set; }
            public string msme_branch_id { get; set; }
            public string loan_amount { get; set; }
            public string loan_os { get; set; }
            public string overdue_amt { get; set; }
            public string loan_settle_amt { get; set; }
            public string emi_amt { get; set; }
            public string no_of_emi { get; set; }
            public string emi_date { get; set; }
            public string cust_profile { get; set; }
            public string reason_emi_pending { get; set; }


        }

        public class msme_dtls
        {
            public List<msme_data> get_Msmedata { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_MSME_pending_LoanList(string p_data, string flag)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            msme_dtls details = new msme_dtls();
            List<msme_data> get_Msmedata = new List<msme_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {
                    if (flag == "1")
                    {
                        dt = lb.proc_mobapp_ngl(250, emp_code);

                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                get_Msmedata.Add(new msme_data()
                                {
                                    loan_id = dr["loan_id"].ToString(),
                                    loan_dtls = dr["loan_dtls"].ToString(),
                                    cust_name = dr["cust_name"].ToString(),
                                    msme_branch = dr["msme_branch"].ToString(),
                                    msme_branch_id = dr["msme_branch_id"].ToString(),
                                    loan_amount = dr["loan_amount"].ToString(),
                                    loan_os = dr["loan_os"].ToString(),
                                    overdue_amt = dr["overdue_amt"].ToString(),
                                    loan_settle_amt = dr["loan_settle_amt"].ToString(),
                                    emi_amt = dr["emi_amt"].ToString(),
                                    no_of_emi = dr["no_of_emi"].ToString(),
                                    emi_date = dr["emi_date"].ToString(),
                                    cust_profile = dr["cust_profile"].ToString(),
                                    //reason_emi_pending = dr["reason_emi_pending"].ToString(),
                                });
                            }


                            details.get_Msmedata = get_Msmedata;
                            details.status = "111";
                            details.result = "Success";
                        }
                        else
                        {

                            details.status = "222";
                            details.result = "No data found";
                        }

                    }
                    else if (flag == "2")
                    {
                        dt1 = lb.proc_mobapp_ngl(253, emp_code);

                        if (dt1.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt1.Rows)
                            {
                                get_Msmedata.Add(new msme_data()
                                {
                                    loan_id = dr["loan_id"].ToString(),
                                    loan_dtls = dr["loan_dtls"].ToString(),
                                    cust_name = dr["cust_name"].ToString(),
                                    msme_branch = dr["msme_branch"].ToString(),
                                    msme_branch_id = dr["msme_branch_id"].ToString(),
                                    loan_amount = dr["loan_amount"].ToString(),
                                    loan_os = dr["loan_os"].ToString(),
                                    overdue_amt = dr["overdue_amt"].ToString(),
                                    loan_settle_amt = dr["loan_settle_amt"].ToString(),
                                    emi_amt = dr["emi_amt"].ToString(),
                                    no_of_emi = dr["no_of_emi"].ToString(),
                                    emi_date = dr["emi_date"].ToString(),
                                    cust_profile = dr["cust_profile"].ToString(),
                                    reason_emi_pending = dr["reason_emi_pending"].ToString(),
                                });
                            }


                            details.get_Msmedata = get_Msmedata;
                            details.status = "111";
                            details.result = "Success";
                        }
                        else
                        {

                            details.status = "222";
                            details.result = "No data found";
                        }

                    }

                    else
                    {

                        details.status = "222";
                        details.result = "No data found";
                    }

                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }






        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Submit_MSMELoan_Visit(string p_data, string flag)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();
            string visit_date = data1.Split('~')[2].ToString();
            string visit_time = data1.Split('~')[3].ToString();
            string msme_brid = data1.Split('~')[4].ToString();
            string loan_id = data1.Split('~')[5].ToString();
            string cust_name = data1.Split('~')[6].ToString();
            string loan_amt = data1.Split('~')[7].ToString();
            string promise_dt = data1.Split('~')[8].ToString();
            string phno_1 = data1.Split('~')[9].ToString();
            string phno_2 = data1.Split('~')[10].ToString();
            string reason_emi_pending = data1.Split('~')[11].ToString();
            string cust_profile = data1.Split('~')[12].ToString();
            string visit_id = data1.Split('~')[13].ToString();

            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = emp_code + '~' + visit_date + '~' + visit_time + '~' + msme_brid + '~' + loan_id + '~' + cust_name + '~' + loan_amt + '~' + promise_dt + '~' + phno_1 + '~' + phno_2 + '~' + reason_emi_pending + '~' + cust_profile + '~' + visit_id;
                string inputString1 = emp_code + '~' + visit_date + '~' + visit_time + '~' + msme_brid + '~' + loan_id + '~' + cust_name + '~' + loan_amt + '~' + promise_dt + '~' + "" + '~' + "" + '~' + reason_emi_pending + '~' + "" + '~' + visit_id;
                try
                {
                    if (flag == "1")
                    {
                        dt = lb.proc_mobapp_ngl(251, inputString);

                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                        {


                            resultModel.status = "111";
                            resultModel.result = "Inserted Successfully!!!";

                        }
                        else
                        {
                            resultModel.status = dt.Rows[0][0].ToString();
                            resultModel.result = dt.Rows[0][1].ToString();
                        }
                    }
                    else if (flag == "2")
                    {
                        dt1 = lb.proc_mobapp_ngl(254, inputString1);

                        if ((dt1.Rows.Count > 0) && (dt1.Rows[0][0].ToString() == "111"))
                        {


                            resultModel.status = "111";
                            resultModel.result = "Inserted Successfully!!!";

                        }
                        else
                        {
                            resultModel.status = dt1.Rows[0][0].ToString();
                            resultModel.result = dt1.Rows[0][1].ToString();
                        }

                    }
                    else
                    {
                        resultModel.status = dt1.Rows[0][0].ToString();
                        resultModel.result = dt1.Rows[0][1].ToString();
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "555";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }



        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Upload_MSMELoan_Visit_Docs(string p_data, string image)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string loan_id = data1.Split('~')[1].ToString();
            string emp_code = data1.Split('~')[2].ToString();
            string image_id = "";
            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = loan_id + '~' + emp_code;
                try
                {
                    dt = lb.proc_mobapp_ngl(257, inputString);

                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                    {
                        image_id = dt.Rows[0][1].ToString();
                        String pt = lb.add_msme_visit_photo(image_id, image);
                        if (pt == "111")
                        {
                            resultModel.status = "111";
                            resultModel.result = "Uploaded Successfully!!!";

                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "Something went wrong!!";
                        }


                    }
                    else
                    {
                        resultModel.status = "222";
                        resultModel.result = "No image";
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "555";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }




        public class msme_img_data
        {
            public string visit_id { get; set; }
            public string image_id { get; set; }

        }

        public class msme_img__dtls
        {
            public List<msme_img_data> get_Msmeimgdata { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_MSME_LoanVisit_Docs(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            msme_img__dtls details = new msme_img__dtls();
            List<msme_img_data> get_Msmeimgdata = new List<msme_img_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string loan_id = data1.Split('~')[1].ToString();
            string emp_code = data1.Split('~')[2].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                string inputString = loan_id + '~' + emp_code;

                try
                {

                    dt = lb.proc_mobapp_ngl(255, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_Msmeimgdata.Add(new msme_img_data()
                            {
                                visit_id = dr["visit_id"].ToString(),
                                image_id = dr["image_id"].ToString(),

                            });
                        }


                        details.get_Msmeimgdata = get_Msmeimgdata;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Delete_MSMELoan_Visit_Docs(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string image_id = data1.Split('~')[1].ToString();
            string visit_id = data1.Split('~')[2].ToString();


            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = image_id + '~' + visit_id;
                try
                {
                    dt = lb.proc_mobapp_ngl(256, inputString);

                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                    {


                        resultModel.status = "111";
                        resultModel.result = "Deleted Successfully!!!";

                    }
                    else
                    {
                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }


                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "555";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class MSmeDoc_data
        {
            public string msme_photo { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_View_MSME_Docs(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string visit_id = data1.Split('~')[1].ToString();
            string image_id = data1.Split('~')[2].ToString();
            string emp_code = data1.Split('~')[3].ToString();

            string inputString = visit_id + '~' + image_id + '~' + emp_code + '~' + "";

            string extn, stringDocument, stringImage, filename;
            byte[] byteDocument, byteImage;

            string DocFileName = "", ImageName;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1, dt2, dt3, dt4 = new DataTable();
                MSmeDoc_data data = new MSmeDoc_data();

                try
                {

                    dt = lb.proc_mobapp_ngl(258, inputString);

                    if (dt.Rows.Count != 0)
                    {
                        string image1 = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            dt = lb.proc_mobapp_ngl(258, inputString);
                            byteImage = (byte[])dt.Rows[0][0];
                            stringImage = Convert.ToBase64String(byteImage);
                            ImageName = image_id;
                            extn = GetFileExtensionFromBytes(byteImage);

                            if (extn == ".tif" || extn == ".unknown")
                            {
                                DocFileName = image_id + extn;
                                byteImage = ConvertToJpg(byteImage);
                                extn = GetFileExtensionFromBytes(byteImage);
                            }


                            if (DownloadFile2(ImageName + "_doc" + extn, byteImage))
                            {
                                data.msme_photo = ImageName + "_doc" + extn;
                                //data.extn = extn;
                            }

                            data.status = "111";
                            data.result = "Success";
                        }

                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                    else
                    {
                        data.status = "333";
                        data.result = "No Image found!";

                    }


                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        ///MSME visit allocation Report///

        public class msme_reg_data
        {
            public string reg_id { get; set; }
            public string reg_name { get; set; }

        }

        public class msme_reg__dtls
        {
            public List<msme_reg_data> get_MsmeRegdata { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_MSME_LoanVisitReport_RegList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            msme_reg__dtls details = new msme_reg__dtls();
            List<msme_reg_data> get_MsmeRegdata = new List<msme_reg_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();
            string from_dt = data1.Split('~')[2].ToString();
            string to_dt = data1.Split('~')[3].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                string inputString = emp_code + '~' + from_dt + '~' + to_dt;

                try
                {

                    dt = lb.proc_mobapp_ngl(259, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_MsmeRegdata.Add(new msme_reg_data()
                            {
                                reg_id = dr["reg_id"].ToString(),
                                reg_name = dr["reg_name"].ToString(),

                            });
                        }


                        details.get_MsmeRegdata = get_MsmeRegdata;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }

        public class msme_Br_data
        {
            public string BRANCH_ID { get; set; }
            public string BRANCH_NAME { get; set; }

        }

        public class msme_Br__dtls
        {
            public List<msme_Br_data> get_MsmeBrdata { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_MSME_LoanVisitReport_BrList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            msme_Br__dtls details = new msme_Br__dtls();
            List<msme_Br_data> get_MsmeBrdata = new List<msme_Br_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string reg_id = data1.Split('~')[1].ToString();
            string emp_code = data1.Split('~')[2].ToString();
            string from_dt = data1.Split('~')[3].ToString();
            string to_dt = data1.Split('~')[4].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                string inputString = reg_id + '~' + emp_code + '~' + from_dt + '~' + to_dt;

                try
                {

                    dt = lb.proc_mobapp_ngl(260, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_MsmeBrdata.Add(new msme_Br_data()
                            {
                                BRANCH_ID = dr["BRANCH_ID"].ToString(),
                                BRANCH_NAME = dr["BRANCH_NAME"].ToString(),

                            });
                        }


                        details.get_MsmeBrdata = get_MsmeBrdata;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }

        public class msme_loan_data
        {
            public string loan_id { get; set; }
            public string cust_name { get; set; }

        }

        public class msme_loan__dtls
        {
            public List<msme_loan_data> get_MsmeLoandata { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_MSME_LoanVisitReport_LoanList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            msme_loan__dtls details = new msme_loan__dtls();
            List<msme_loan_data> get_MsmeLoandata = new List<msme_loan_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string Br_id = data1.Split('~')[1].ToString();
            string emp_code = data1.Split('~')[2].ToString();
            string from_dt = data1.Split('~')[3].ToString();
            string to_dt = data1.Split('~')[4].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                string inputString = Br_id + '~' + emp_code + '~' + from_dt + '~' + to_dt;

                try
                {

                    dt = lb.proc_mobapp_ngl(261, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_MsmeLoandata.Add(new msme_loan_data()
                            {
                                loan_id = dr["loan_id"].ToString(),
                                cust_name = dr["cust_name"].ToString(),

                            });
                        }


                        details.get_MsmeLoandata = get_MsmeLoandata;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }

        public class msme_visit_data
        {
            public string visit_id { get; set; }
            public string loan_id { get; set; }
            public string cust_name { get; set; }
            public string loan_amt { get; set; }
            public string loan_os { get; set; }
            public string overdue_amt { get; set; }
            public string loan_settle_amt { get; set; }
            public string cust_profile { get; set; }
            public string present_cust_profile { get; set; }
            public string reason_emi_pending { get; set; }
            public string phno_1 { get; set; }
            public string phno_2 { get; set; }
            public string promise_dt { get; set; }

        }

        public class msme_visit__dtls
        {
            public List<msme_visit_data> get_MsmeVisitdata { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_MSME_LoanVisitReport_VisitList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            msme_visit__dtls details = new msme_visit__dtls();
            List<msme_visit_data> get_MsmeVisitdata = new List<msme_visit_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string loan_id = data1.Split('~')[1].ToString();
            string from_dt = data1.Split('~')[2].ToString();
            string to_dt = data1.Split('~')[3].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                string inputString = loan_id + '~' + from_dt + '~' + to_dt;

                try
                {

                    dt = lb.proc_mobapp_ngl(262, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_MsmeVisitdata.Add(new msme_visit_data()
                            {
                                visit_id = dr["visit_id"].ToString(),
                                loan_id = dr["loan_id"].ToString(),
                                cust_name = dr["cust_name"].ToString(),
                                loan_amt = dr["loan_amt"].ToString(),
                                loan_os = dr["loan_os"].ToString(),
                                overdue_amt = dr["overdue_amt"].ToString(),
                                loan_settle_amt = dr["loan_settle_amt"].ToString(),
                                cust_profile = dr["cust_profile"].ToString(),
                                present_cust_profile = dr["present_cust_profile"].ToString(),
                                reason_emi_pending = dr["reason_emi_pending"].ToString(),
                                phno_1 = dr["phno_1"].ToString(),
                                phno_2 = dr["phno_2"].ToString(),
                                promise_dt = dr["promise_dt"].ToString(),

                            });
                        }


                        details.get_MsmeVisitdata = get_MsmeVisitdata;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }

        public class msme_image_data
        {
            public string image_id { get; set; }


        }

        public class msme_image__dtls
        {
            public List<msme_image_data> get_Msmeimagedata { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_MSME_LoanVisitReport_ImageList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            msme_image__dtls details = new msme_image__dtls();
            List<msme_image_data> get_Msmeimagedata = new List<msme_image_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string visit_id = data1.Split('~')[1].ToString();
            string from_dt = data1.Split('~')[2].ToString();
            string to_dt = data1.Split('~')[3].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                string inputString = visit_id + '~' + from_dt + '~' + to_dt;

                try
                {

                    dt = lb.proc_mobapp_ngl(263, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_Msmeimagedata.Add(new msme_image_data()
                            {
                                image_id = dr["image_id"].ToString(),

                            });
                        }


                        details.get_Msmeimagedata = get_Msmeimagedata;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }

        //--Promise date notification--//


        public class promise_data
        {
            public string promise_dt { get; set; }
            public string loan_id { get; set; }
            public string emi_amount { get; set; }


        }

        public class promise__dtls
        {
            public List<promise_data> get_promisedata { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_MSMELoanVisit_PromiseDayList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            promise__dtls details = new promise__dtls();
            List<promise_data> get_promisedata = new List<promise_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {

                    dt = lb.proc_mobapp_ngl(264, emp_code);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_promisedata.Add(new promise_data()
                            {
                                promise_dt = dr["promise_dt"].ToString(),
                                loan_id = dr["loan_id"].ToString(),
                                emi_amount = dr["emi_amount"].ToString(),

                            });
                        }


                        details.get_promisedata = get_promisedata;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }

        public class reason_data
        {
            public string reason_id { get; set; }
            public string reason { get; set; }

        }

        public class reason_dtls
        {
            public List<reason_data> get_reasondata { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_MSME_ReasonList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            reason_dtls details = new reason_dtls();
            List<reason_data> get_reasondata = new List<reason_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {

                    dt = lb.proc_mobapp_ngl(265, sessionId);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_reasondata.Add(new reason_data()
                            {
                                reason_id = dr["reason_id"].ToString(),
                                reason = dr["reason"].ToString(),

                            });
                        }

                        details.get_reasondata = get_reasondata;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }

        //----Girish-------124814-------CRF for MSME Collection Pending loans customer Visit in ESS Application-------end--//

        //----Adithya--------------Inacitve And Active -------Start--//

        [WebMethod]
        public void zone_drp(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                dtls data2 = new dtls();
                List<lists> get_list = new List<lists>();

                try
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_REQ_CGL", "12", "", "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_list.Add(new lists()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.dtls_list = get_list;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        [WebMethod]
        public void branch_drp(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                dtls data2 = new dtls();
                List<lists> get_list = new List<lists>();

                try
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_REQ_CGL", "13", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_list.Add(new lists()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.dtls_list = get_list;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        [WebMethod]
        public void cust_drp(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                dtls data2 = new dtls();
                List<lists> get_list = new List<lists>();

                try
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_REQ_CGL", "7", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_list.Add(new lists()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.dtls_list = get_list;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void view_pan_form60(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel_doc1 resultModel = new ResultModel_doc1();

            byte[] dataFile = new byte[0];
            string data1 = Decryptrel(data);
            string[] dataArray = data1.Split('$');


            string inputstring = dataArray[1];


            if (isSessionValid(dataArray[0]) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileName;
                string extension;

                try
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_REQ_CGL", "14", dataArray[1], "");
                    if (dt.Rows.Count != 0)
                    {

                        string image1 = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][0];
                                dataFile = (byte[])dt.Rows[0][0];
                                extension = GetFileExtensionFromBytes(dataFile);

                                if (extension == ".tif" || extension == ".unknown")
                                {
                                    dataFile = ConvertToJpg(dataFile);
                                    extension = GetFileExtensionFromBytes(dataFile);
                                }

                                byte[] tiffjpgByte = justfuncJpegBytes(s);
                                DocFileName = inputstring + extension;
                                if (DownloadFile2(DocFileName, tiffjpgByte))
                                {
                                    resultModel.status = "111";
                                    resultModel.result = "Success";
                                    resultModel.image = DocFileName;
                                    resultModel.extension = GetFileExtensionFromBytes(dataFile);

                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "Failed";
                                }
                            }
                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "No Image found!";

                        }

                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    resultModel.status = "222";
                    resultModel.result = "No Image Found";
                    Context.Response.Write(js.Serialize(resultModel));

                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));

            }
        }



        [WebMethod]
        public void get_confirm_data(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel resultModel = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_REQ_CGL", "10", dataArray[1], "");

                    if (dt.Rows[0][0].ToString() == "111")
                    {
                        resultModel.status = "111";
                        resultModel.result = "Confirmed Successfully";
                    }
                    else
                    {
                        resultModel.status = "222";
                        resultModel.result = dt.Rows[0][0].ToString();
                    }
                }
                else
                {
                    resultModel.status = "333";
                    resultModel.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                resultModel.status = "666";
                resultModel.result = "Something went wrong";
            }
            if (resultModel.status == "111")
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
            else
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void get_reject_data(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel resultModel = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_REQ_CGL", "11", dataArray[1], "");

                    if (dt.Rows[0][0].ToString() == "REJECTED SUCCESSFULLY")
                    {
                        resultModel.status = "111";
                        resultModel.result = "Rejected !!";
                    }
                    else
                    {
                        resultModel.status = "222";
                        resultModel.result = "Not Rejected!";
                    }
                }
                else
                {
                    resultModel.status = "333";
                    resultModel.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                resultModel.status = "666";
                resultModel.result = "Something went wrong";
            }
            if (resultModel.status == "111")
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
            else
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void view_cust_kyc(string data, string photo)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel_doc1 resultModel = new ResultModel_doc1();

            byte[] dataFile = new byte[0];
            string data1 = Decryptrel(data);
            string[] dataArray = data1.Split('~');


            string inputstring = dataArray[1];


            if (isSessionValid(dataArray[0]) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileName;
                string CustDocName = "";
                string extension;

                try
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_REQ_CGL", "9", dataArray[1], "");

                    int j = Convert.ToInt32(photo);

                    if (j == 0)
                    {

                        CustDocName = "Customer_Photo_";

                    }

                    if (j == 1)

                    {

                        CustDocName = "Kyc_Photo_";

                    }
                    if (dt.Rows.Count != 0)
                    {

                        string image1 = dt.Rows[0][j].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][j].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][j];
                                dataFile = (byte[])dt.Rows[0][j];
                                extension = GetFileExtensionFromBytes(dataFile);

                                if (extension == ".tif" || extension == ".unknown")
                                {
                                    dataFile = ConvertToJpg(dataFile);
                                    extension = GetFileExtensionFromBytes(dataFile);
                                }

                                byte[] tiffjpgByte = justfuncJpegBytes(s);
                                DocFileName = CustDocName + extension;
                                if (DownloadFile2(DocFileName, tiffjpgByte))
                                {
                                    resultModel.status = "111";
                                    resultModel.result = "Success";
                                    resultModel.image = DocFileName;
                                    resultModel.extension = GetFileExtensionFromBytes(dataFile);

                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "Failed";
                                }
                            }
                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "No Image found!";

                        }

                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    resultModel.status = "222";
                    resultModel.result = "No Image Found";
                    Context.Response.Write(js.Serialize(resultModel));

                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));

            }
        }


        public class getcust_details
        {
            public string cust_name { get; set; }
            public string DOB { get; set; }
            public string FATHE_SPOUSE_NAME { get; set; }
            public string FATHER_SPOUSE { get; set; }
            public string house_name { get; set; }
            public string fat_hus { get; set; }
            public string pin_code { get; set; }
            public string post_ofice { get; set; }
            public string country_name { get; set; }
            public string locality { get; set; }
            public string addrs_type { get; set; }
            public string gender { get; set; }
            public string identity_name { get; set; }
            public string id_number { get; set; }
            public string pan { get; set; }

            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void get_cust_dtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            getcust_details val = new getcust_details();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_REQ_CGL", "8", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        val.cust_name = dt.Rows[0][0].ToString();
                        val.DOB = dt.Rows[0][1].ToString();
                        val.FATHE_SPOUSE_NAME = dt.Rows[0][2].ToString();
                        val.house_name = dt.Rows[0][3].ToString();
                        val.fat_hus = dt.Rows[0][4].ToString();

                        val.FATHER_SPOUSE = dt.Rows[0][5].ToString();
                        val.pin_code = dt.Rows[0][6].ToString();
                        val.post_ofice = dt.Rows[0][7].ToString();
                        val.country_name = dt.Rows[0][8].ToString();
                        val.locality = dt.Rows[0][9].ToString();
                        val.addrs_type = dt.Rows[0][10].ToString();
                        val.gender = dt.Rows[0][11].ToString();
                        val.identity_name = dt.Rows[0][12].ToString();
                        val.id_number = dt.Rows[0][13].ToString();
                        val.pan = dt.Rows[0][14].ToString();

                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        //----Adithya--------------Inacitve And Active -------End--//

        //----Adithya--------------family flat phase2 -------start--//

        public class getfamily_flat
        {
            public string flat_id { get; set; }
            public string flat_name { get; set; }
            public string branch_id { get; set; }
            public string rent_id { get; set; }
            public string BRANCH_NAME { get; set; }
            public string agreement_from { get; set; }
            public string agreement_to { get; set; }
            public string emp_name { get; set; }
            public string emp_code { get; set; }
            public string designation { get; set; }
            public string post_name { get; set; }
            public string department { get; set; }
            public string requested_date { get; set; }
            public string eligible_amount { get; set; }
            public string requested_amount { get; set; }
            public string advance_amount { get; set; }
            public string eligible_adv_amnt { get; set; }
            public string brockerage_amount { get; set; }
            public string owner_name { get; set; }
            public string address { get; set; }
            public string owner_location { get; set; }
            public string contact_no { get; set; }
            public string note_id { get; set; }
            public string distance { get; set; }
            public string new_allotted_date { get; set; }

           
            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void getfamily_flat_dtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            getfamily_flat val = new getfamily_flat();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];
                string input = dataArray[1];
                string[] inputArray = input.Split('~');
                string inputchk = inputArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_HO_FAMILY_FLAT_REQUEST("", "GetFamDtls", dataArray[1], "");
                    if (inputchk == "0")
                    {

                        if (dt.Rows.Count > 0)
                        {


                            val.emp_code = dt.Rows[0][0].ToString();
                            val.emp_name = dt.Rows[0][1].ToString();
                            val.designation = dt.Rows[0][2].ToString();
                            val.post_name = dt.Rows[0][3].ToString();
                            val.department = dt.Rows[0][4].ToString();
                            val.distance = dt.Rows[0][5].ToString();
                            val.requested_date = dt.Rows[0][6].ToString();
                            val.new_allotted_date = dt.Rows[0][7].ToString();


                            val.status = "111";
                            val.result = "Success";
                        }
                        else
                        {
                            val.status = "222";
                            val.result = "No Data found";
                        }
                    }
                    else if (inputchk == "1")
                    {
                        if (dt.Rows.Count > 0)
                        {



                            val.emp_code = dt.Rows[0][0].ToString();
                            val.emp_name = dt.Rows[0][1].ToString();
                            val.designation = dt.Rows[0][2].ToString();
                            val.post_name = dt.Rows[0][3].ToString();
                            val.department = dt.Rows[0][4].ToString();
                            val.requested_date = dt.Rows[0][5].ToString();
                            val.eligible_amount = dt.Rows[0][6].ToString();
                            val.requested_amount = dt.Rows[0][7].ToString();
                            val.advance_amount = dt.Rows[0][8].ToString();
                            val.eligible_adv_amnt = dt.Rows[0][9].ToString();
                            val.brockerage_amount = dt.Rows[0][10].ToString();
                            val.owner_name = dt.Rows[0][11].ToString();
                            val.address = dt.Rows[0][12].ToString();
                            val.owner_location = dt.Rows[0][13].ToString();
                            val.contact_no = dt.Rows[0][14].ToString();
                            val.note_id = dt.Rows[0][15].ToString();
                            val.distance = dt.Rows[0][16].ToString();


                            val.status = "111";
                            val.result = "Success";
                        }
                        else
                        {
                            val.status = "222";
                            val.result = "No Data found";
                        }
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        [WebMethod]
        public void get_br_req_details(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            getfamily_flat val = new getfamily_flat();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_HO_FAMILY_FLAT_REQUEST("", "req_details", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        val.emp_code = dt.Rows[0][0].ToString();
                        val.emp_name = dt.Rows[0][1].ToString();
                        val.designation = dt.Rows[0][2].ToString();
                        val.post_name = dt.Rows[0][3].ToString();
                        val.department = dt.Rows[0][4].ToString();
                        val.requested_date = dt.Rows[0][5].ToString();
                        val.eligible_amount = dt.Rows[0][6].ToString();
                        val.distance = dt.Rows[0][7].ToString();


                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        [WebMethod]
        public void get_Ho_req_details(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            getfamily_flat val = new getfamily_flat();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_HO_FAMILY_FLAT_REQUEST("", "empdetails", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        val.emp_code = dt.Rows[0][0].ToString();
                        val.emp_name = dt.Rows[0][1].ToString();
                        val.designation = dt.Rows[0][2].ToString();
                        val.post_name = dt.Rows[0][3].ToString();
                        val.department = dt.Rows[0][4].ToString();

                        val.requested_date = dt.Rows[0][5].ToString();
                        val.distance = dt.Rows[0][6].ToString();


                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }


        public class get_family_flat_type
        {
            public string flat_type { get; set; }


            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void get_flat_type(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            get_family_flat_type val = new get_family_flat_type();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_HO_FAMILY_FLAT_REQUEST("", "flat_type", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        val.flat_type = dt.Rows[0][0].ToString();



                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }


        [WebMethod]
        public void get_req_flat(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string dataString = decryptedIData;
            string[] dataArray = dataString.Split('~');
            // string sessionId = dataString;
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                dtls data2 = new dtls();
                List<lists> get_list = new List<lists>();

                try
                {
                    dt = lb.PROC_HO_FAMILY_FLAT_REQUEST("", "get_flat", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_list.Add(new lists()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString()


                            });
                        }

                        data2.dtls_list = get_list;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void get_confirm_flat(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel resultModel = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];



                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_HO_FAMILY_FLAT_REQUEST("", "ApproveFlat", dataArray[1], "");

                    if (dt.Rows[0][0].ToString() == "111")
                    {
                        resultModel.status = "111";
                        resultModel.result = "Confirmed Successfully";
                    }
                    else
                    {
                        resultModel.status = "222";
                        resultModel.result = "Not Approved";
                    }
                }

                else
                {
                    resultModel.status = "333";
                    resultModel.result = "Session is expired";
                }

            }
            catch (Exception ex)
            {
                resultModel.status = "666";
                resultModel.result = "Something went wrong";
            }
            if (resultModel.status == "111")
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
            else
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void get_reject_flat(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel resultModel = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];



                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_HO_FAMILY_FLAT_REQUEST("", "RejectFlat", dataArray[1], "");

                    if (dt.Rows[0][0].ToString() == "222")
                    {
                        resultModel.status = "222";
                        resultModel.result = "Rejected Successfully";
                    }
                    else
                    {
                        resultModel.status = "333";
                        resultModel.result = "Not Rejected";
                    }

                }
                else
                {
                    resultModel.status = "333";
                    resultModel.result = "Session is expired";
                }

            }
            catch (Exception ex)
            {
                resultModel.status = "666";
                resultModel.result = "Something went wrong";
            }
            if (resultModel.status == "111")
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
            else
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void family_flat_list(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];


            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                dtls data2 = new dtls();
                List<lists> get_list = new List<lists>();

                try
                {
                    dt = lb.PROC_HO_FAMILY_FLAT_REQUEST("", "FamilyRequestList", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_list.Add(new lists()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.dtls_list = get_list;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        [WebMethod]
        public void submit_branch_flat(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel resultModel = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];
                string[] data2 = dataArray[1].Split('~');
                string bdy, subj,msg;



                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_HO_FAMILY_FLAT_REQUEST("", "requested_flat", dataArray[1], "");

                    if (dt.Rows[0][0].ToString() == "111")
                    {
                        resultModel.status = "111";
                        resultModel.result = "Submitted Successfully";

                        string HDmailid = "61248@manappuram.com";
                        string empcode = data2[0];
                        string empname = data2[1];

                        bdy = "<p style='font-family: Calibri,Arial,Helvetica,sans-serif;font-size:12pt;color:rgb(0,0,0);'>Dear Team ,<br/><br/>New Family Flat Requested, <b>" + empname + "</b> & <b>" + empcode + ".</b> <br/><br/> Thank You,<br/>Manappuram<br/><span style = 'font-size:11.0pt; font-family:&quot;Calibri&quot;,sans-serif; color:gray' lang='EN-IN'>Please do not reply to this email ID as this is an automatically generated email and reply to this ID is not being monitored</span></p>";
                        subj = "Hostel Request -: " + empcode + " - New Request Created";

                        msg = send_mail_familyflat(HDmailid, bdy, subj);

                        if (msg == "Mail has been sent successfuly !")
                        {

                            resultModel.status = "111";
                            resultModel.result = "Submitted Successfully";
                        }
                        else
                        {
                            resultModel.status = "111";
                            resultModel.result = "Submitted Successfully but Mail Notification Failed";
                        }
                    }
                    else if (dt.Rows[0][0].ToString() == "000")
                    {
                        resultModel.status = "222";
                        resultModel.result = "Already Requested";
                    }
                }

                else
                {
                    resultModel.status = "333";
                    resultModel.result = "Session is expired";
                }

            }
            catch (Exception ex)
            {
                resultModel.status = "666";
                resultModel.result = "Something went wrong";
            }
            if (resultModel.status == "111")
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
            else
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        [WebMethod]
        public void submit_Ho_flat(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel resultModel = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];
                string[] data2 = dataArray[1].Split('~');

                string bdy, subj,msg;



                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_HO_FAMILY_FLAT_REQUEST("", "requestflat", dataArray[1], "");

                    if (dt.Rows[0][0].ToString() == "111")
                    {
                        resultModel.status = "111";
                        resultModel.result = "Submitted Successfully";

                        string HDmailid = "61248@manappuram.com";
                        string empcode = data2[0];
                        string empname = data2[1];

                        bdy = "<p style='font-family: Calibri,Arial,Helvetica,sans-serif;font-size:12pt;color:rgb(0,0,0);'>Dear Team ,<br/><br/>New Family Flat Requested, <b>" + empname + "</b> & <b>" + empcode + ".</b> <br/><br/> Thank You,<br/>Manappuram<br/><span style = 'font-size:11.0pt; font-family:&quot;Calibri&quot;,sans-serif; color:gray' lang='EN-IN'>Please do not reply to this email ID as this is an automatically generated email and reply to this ID is not being monitored</span></p>";
                        subj = "Hostel Request -: " + empcode + " - New Request Created";

                        msg = send_mail_familyflat(HDmailid, bdy, subj);

                        if (msg == "Mail has been sent successfuly !")
                        {

                            resultModel.status = "111";
                            resultModel.result = "Submitted Successfully";
                        }
                        else
                        {
                            resultModel.status = "111";
                            resultModel.result = "Submitted Successfully but Mail Notification Failed";
                        }
                    }
                    else if (dt.Rows[0][0].ToString() == "222")
                    {
                        resultModel.status = "222";
                        resultModel.result = "Already Requested";
                    }
                }

                else
                {
                    resultModel.status = "333";
                    resultModel.result = "Session is expired";
                }

            }
            catch (Exception ex)
            {
                resultModel.status = "666";
                resultModel.result = "Something went wrong";
            }
            if (resultModel.status == "111")
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
            else
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class Report_dtls
        {

            public List<Report_list> Reportdtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class Report_list
        {
            public string empcode { get; set; }
            public string empname { get; set; }
            public string flat_id { get; set; }
            public string flat_name { get; set; }
            public string req_date { get; set; }

        }

        [WebMethod]
        public void family_flat_report(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];


            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                Report_dtls data2 = new Report_dtls();
                List<Report_list> get_Reportlists = new List<Report_list>();

                try
                {
                    dt = lb.PROC_HO_FAMILY_FLAT_REQUEST("", "flatrequestreport", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_Reportlists.Add(new Report_list()
                            {
                                empcode = dr[0].ToString(),
                                empname = dr[1].ToString(),
                                flat_id = dr[2].ToString(),
                                flat_name = dr[3].ToString(),
                                req_date = dr[4].ToString()
                            });
                        }

                        data2.Reportdtls_list = get_Reportlists;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void get_flat_dtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            getfamily_flat val = new getfamily_flat();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_HO_FAMILY_FLAT_REQUEST("", "flat_details", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        val.flat_id = dt.Rows[0][0].ToString();
                        val.flat_name = dt.Rows[0][1].ToString();
                        val.branch_id = dt.Rows[0][2].ToString();
                        val.agreement_from = dt.Rows[0][3].ToString();
                        val.agreement_to = dt.Rows[0][4].ToString();



                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        [WebMethod]
        public void cancel_flat_dtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            getfamily_flat val = new getfamily_flat();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_hostel_cancellaton("", "flatdtls", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        val.emp_name = dt.Rows[0][0].ToString();
                        val.emp_code = dt.Rows[0][1].ToString();
                        val.flat_id = dt.Rows[0][2].ToString();
                        val.flat_name = dt.Rows[0][3].ToString();
                        val.branch_id = dt.Rows[0][4].ToString();
                        val.agreement_from = dt.Rows[0][5].ToString();
                        val.agreement_to = dt.Rows[0][6].ToString();




                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        [WebMethod]
        public void confirm_cancel_flat(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel resultModel = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];



                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_hostel_cancellaton("", "confirmcancel", dataArray[1], "");

                    if (dt.Rows[0][0].ToString() == "111")
                    {
                        resultModel.status = "111";
                        resultModel.result = "Cancel Successfully";
                    }
                    else if (dt.Rows[0][0].ToString() == "222")
                    {
                        resultModel.status = "222";
                        resultModel.result = "Already Cancelled";
                    }
                }

                else
                {
                    resultModel.status = "333";
                    resultModel.result = "Session is expired";
                }

            }
            catch (Exception ex)
            {
                resultModel.status = "666";
                resultModel.result = "Something went wrong";
            }
            if (resultModel.status == "111")
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
            else
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void getcancelhostel_dtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];


            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                Report_dtls data2 = new Report_dtls();
                List<Report_list> get_Reportlists = new List<Report_list>();

                try
                {
                    dt = lb.proc_hostel_cancellaton("", "getcancelhostel", "", "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_Reportlists.Add(new Report_list()
                            {
                                flat_id = dr[0].ToString(),
                                flat_name = dr[1].ToString(),

                            });
                        }

                        data2.Reportdtls_list = get_Reportlists;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class getcancel_flat
        {
            public string flat_id { get; set; }
            public string flat_name { get; set; }
            public string branch_id { get; set; }
            public string rent_id { get; set; }
            public string agreement_from { get; set; }
            public string agreement_to { get; set; }


            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void gethosteldata(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            getcancel_flat val = new getcancel_flat();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_hostel_cancellaton("", "gethosteldata", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        val.flat_id = dt.Rows[0][0].ToString();
                        val.flat_name = dt.Rows[0][1].ToString();
                        val.rent_id = dt.Rows[0][2].ToString();
                        val.branch_id = dt.Rows[0][3].ToString();
                        val.agreement_from = dt.Rows[0][4].ToString();
                        val.agreement_to = dt.Rows[0][5].ToString();




                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        [WebMethod]
        public void Cancel_ownerstatement_doc(string flag, string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel_doc1 resultModel = new ResultModel_doc1();

            byte[] dataFile = new byte[0];
            string data1 = Decryptrel(data);
            string[] dataArray = data1.Split('~');


            string inputstring = dataArray[1];


            if (isSessionValid(dataArray[0]) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileName;
                string extension;

                try
                {
                    dt = lb.proc_hostel_cancellaton("", flag, inputstring, "");
                    if (dt.Rows.Count != 0)
                    {

                        string image1 = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][0];
                                dataFile = (byte[])dt.Rows[0][0];
                                extension = GetFileExtensionFromBytes(dataFile);

                                if (extension == ".tif" || extension == ".unknown")
                                {
                                    dataFile = ConvertToJpg(dataFile);
                                    extension = GetFileExtensionFromBytes(dataFile);
                                }


                                if (extension == ".Jpeg")
                                {
                                    dataFile = justfuncJpegBytes(s);
                                    extension = GetFileExtensionFromBytes(dataFile);
                                }

                                if (extension == ".pdf")
                                {
                                    dataFile = (byte[])dt.Rows[0][0];
                                    extension = GetFileExtensionFromBytes(dataFile);
                                }


                                DocFileName = "kycdoc" + extension;
                                if (DownloadFile2(DocFileName, dataFile))
                                {
                                    resultModel.status = "111";
                                    resultModel.result = "Success";
                                    resultModel.image = DocFileName;
                                    resultModel.extension = extension;

                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "Failed";
                                }
                            }
                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "No Image found!";

                        }

                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    resultModel.status = "222";
                    resultModel.result = "No Image Found";
                    Context.Response.Write(js.Serialize(resultModel));

                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));

            }
        }

        [WebMethod]
        public void cancel_flat_approval(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel resultModel = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];



                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_hostel_cancellaton("", "approve", dataArray[1], "");

                    if (dt.Rows[0][0].ToString() == "111")
                    {
                        resultModel.status = "111";
                        resultModel.result = "Approve Successfully";
                    }
                    else
                    {
                        resultModel.status = "222";
                        resultModel.result = "Not Approved";
                    }
                }

                else
                {
                    resultModel.status = "333";
                    resultModel.result = "Session is expired";
                }

            }
            catch (Exception ex)
            {
                resultModel.status = "666";
                resultModel.result = "Something went wrong";
            }
            if (resultModel.status == "111")
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
            else
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void cancel_flat_rejected(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel resultModel = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];



                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_hostel_cancellaton("", "reject", dataArray[1], "");

                    if (dt.Rows[0][0].ToString() == "111")
                    {
                        resultModel.status = "111";
                        resultModel.result = "Rejected Successfully";
                    }
                    else
                    {
                        resultModel.status = "222";
                        resultModel.result = "Not Rejected";
                    }
                }

                else
                {
                    resultModel.status = "333";
                    resultModel.result = "Session is expired";
                }

            }
            catch (Exception ex)
            {
                resultModel.status = "666";
                resultModel.result = "Something went wrong";
            }
            if (resultModel.status == "111")
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
            else
            {
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        //----Adithya--------------family flat phase2 -------end--//


        //----Aswathy--------------124923--Cust modification -------start--//

        [WebMethod]
        public void GetCustDrp_recommend(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                get_id_name data2 = new get_id_name();
                List<get_id_name_dtls> get_dtls = new List<get_id_name_dtls>();

                try
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", "N", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new get_id_name_dtls()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.getdtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void Recommend_custChange(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel val = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", "O", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0][0].ToString() == "111")
                        {
                            val.status = "111";
                            val.result = "Approved";
                        }
                        else if (dt.Rows[0][0].ToString() == "116")
                        {
                            val.status = "111";
                            val.result = "RECOMMEND SUCCESSFULLY";
                        }
                        else if (dt.Rows[0][0].ToString() == "112")
                        {
                            val.status = "222";
                            val.result = "There are too many rows, please Reject";
                        }
                        else if (dt.Rows[0][0].ToString() == "113")
                        {
                            val.status = "222";
                            val.result = "NO DATA FOUND";
                        }
                        else if (dt.Rows[0][0].ToString() == "114")
                        {
                            val.status = "222";
                            val.result = "ALREADY ONE APPROVAL/REJECTION  IS PENDING";
                        }
                        else if (dt.Rows[0][0].ToString() == "115")
                        {
                            val.status = "222";
                            val.result = "The requester and the recommendation/approval are cannot be the same person";
                        }
                        else
                        {
                            val.status = "222";
                            val.result = dt.Rows[0][0].ToString();
                        }

                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        //----Aswathy--------------124923--Cust modification -------end--//






        //----Girish-------125139------Branch Ambience photo uploading module in ESS App-------start--//


        public class Tota_Br_data
        {
            public string BRANCH_ID { get; set; }
            public string BRANCH_NAME { get; set; }

        }

        public class Tota_Br_data_dtls
        {
            public List<Tota_Br_data> get_Tota_Br_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_Total_BranchList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Tota_Br_data_dtls details = new Tota_Br_data_dtls();
            List<Tota_Br_data> get_Tota_Br_data = new List<Tota_Br_data>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string emp_code = data1.Split('~')[1].ToString();

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {

                    dt = lb.proc_mobapp_ngl(271, emp_code);

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            get_Tota_Br_data.Add(new Tota_Br_data()
                            {
                                BRANCH_ID = dr["BRANCH_ID"].ToString(),
                                BRANCH_NAME = dr["BRANCH_NAME"].ToString(),

                            });
                        }

                        details.get_Tota_Br_data = get_Tota_Br_data;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Upload_Br_Ambience_Visit_Photo(string p_data, string image)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string br_id = data1.Split('~')[1].ToString();
            string emp_code = data1.Split('~')[2].ToString();
            string amb_id = data1.Split('~')[3].ToString();
            string image_id = "";
            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = br_id + '~' + emp_code + '~' + amb_id;
                try
                {

                    dt = lb.proc_mobapp_ngl(266, inputString);

                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                    {
                        image_id = dt.Rows[0][1].ToString();
                        String pt = lb.Br_ambience_visit_photo(image_id, image);
                        if (pt == "111")
                        {
                            resultModel.status = "111";
                            resultModel.result = "Confirmed Successfully!!!";

                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "Something went wrong!!";
                        }


                    }
                    else
                    {
                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }




                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "555";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }




        public class BrAmbience_data
        {
            public string Br_photo { get; set; }
            public string visit_id { get; set; }
            public string image_id { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_BrAmbience_ImgList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string br_id = data1.Split('~')[1].ToString();
            string emp_code = data1.Split('~')[2].ToString();
            string amb_id = data1.Split('~')[3].ToString();


            string extn, stringDocument, stringImage, filename;
            byte[] byteDocument, byteImage;

            string DocFileName = "", ImageName;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1, dt2, dt3, dt4 = new DataTable();
                BrAmbience_data data = new BrAmbience_data();
                string inputString = br_id + '~' + emp_code + '~' + amb_id;

                try
                {

                    dt = lb.proc_mobapp_ngl(274, inputString);

                    if (dt.Rows.Count != 0)
                    {
                        string image1 = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            dt = lb.proc_mobapp_ngl(274, inputString);
                            byteImage = (byte[])dt.Rows[0][0];
                            stringImage = Convert.ToBase64String(byteImage);
                            ImageName = dt.Rows[0][2].ToString();
                            extn = GetFileExtensionFromBytes(byteImage);

                            if (extn == ".tif" || extn == ".unknown")
                            {
                                DocFileName = ImageName + extn;
                                byteImage = ConvertToJpg(byteImage);
                                extn = GetFileExtensionFromBytes(byteImage);
                            }


                            if (DownloadFile2(ImageName + "_photo" + extn, byteImage))
                            {

                                data.visit_id = dt.Rows[0][1].ToString();
                                data.image_id = dt.Rows[0][2].ToString();
                                data.Br_photo = ImageName + "_photo" + extn;

                                //data.extn = extn;
                            }

                            data.status = "111";
                            data.result = "Success";
                        }

                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                    else
                    {
                        data.status = "333";
                        data.result = "No Image found!";

                    }


                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }


        public class Tota_Br_data1
        {
            public string Br_photo { get; set; }
            public string visit_id { get; set; }
            public string image_id { get; set; }
            public string amb_id { get; set; }
        }

        public class Tota_Br_data_dtls1
        {
            public List<Tota_Br_data1> get_Tota_Br_data { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_BrAmbience_ImgList_total(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            Tota_Br_data_dtls1 details = new Tota_Br_data_dtls1();
            List<Tota_Br_data1> get_Tota_Br_data = new List<Tota_Br_data1>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string br_id = data1.Split('~')[1].ToString();
            string emp_code = data1.Split('~')[2].ToString();

            string inputString = br_id + '~' + emp_code;

            string extn, stringDocument, stringImage, filename;
            byte[] byteDocument, byteImage;

            string DocFileName = "", ImageName;


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();

                try
                {

                    dt = lb.proc_mobapp_ngl(275, inputString);

                    if (dt.Rows.Count > 0)
                    {
                        string image1 = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            dt = lb.proc_mobapp_ngl(275, inputString);
                            byteImage = (byte[])dt.Rows[0][0];
                            stringImage = Convert.ToBase64String(byteImage);
                            ImageName = dt.Rows[0][2].ToString();
                            extn = GetFileExtensionFromBytes(byteImage);

                            if (extn == ".tif" || extn == ".unknown")
                            {
                                DocFileName = ImageName + extn;
                                byteImage = ConvertToJpg(byteImage);
                                extn = GetFileExtensionFromBytes(byteImage);
                            }


                            if (DownloadFile2(ImageName + "_photo" + extn, byteImage))
                            {
                                foreach (DataRow dr in dt.Rows)
                                {

                                    get_Tota_Br_data.Add(new Tota_Br_data1()
                                    {
                                        visit_id = dr["visit_id"].ToString(),
                                        image_id = dr["image_id"].ToString(),
                                        amb_id = dr["amb_id"].ToString(),
                                        Br_photo = dr["image_id"].ToString() + "_photo" + extn,

                                    });
                                }
                            }
                            details.get_Tota_Br_data = get_Tota_Br_data;
                            details.status = "111";
                            details.result = "Success";
                        }
                        else
                        {
                            details.status = "222";
                            details.result = "No data found";
                        }
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No data found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Sorry..Unable to process";
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }

            Context.Response.Write(js.Serialize(details));

        }


        public class Amb_Doc_data
        {
            public string Br_photo { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_View_BrAmbience_Docs(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string image_id = data1.Split('~')[1].ToString();


            string extn, stringDocument, stringImage, filename;
            byte[] byteDocument, byteImage;

            string DocFileName = "", ImageName;

            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt, dt1, dt2, dt3, dt4 = new DataTable();
                Amb_Doc_data data = new Amb_Doc_data();

                try
                {

                    dt = lb.proc_mobapp_ngl(270, image_id);

                    if (dt.Rows.Count != 0)
                    {
                        string image1 = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            dt = lb.proc_mobapp_ngl(270, image_id);
                            byteImage = (byte[])dt.Rows[0][0];
                            stringImage = Convert.ToBase64String(byteImage);
                            ImageName = image_id;
                            extn = GetFileExtensionFromBytes(byteImage);

                            if (extn == ".tif" || extn == ".unknown")
                            {
                                DocFileName = image_id + extn;
                                byteImage = ConvertToJpg(byteImage);
                                extn = GetFileExtensionFromBytes(byteImage);
                            }


                            if (DownloadFile2(ImageName + "_photo" + extn, byteImage))
                            {
                                data.Br_photo = ImageName + "_photo" + extn;
                                //data.extn = extn;
                            }

                            data.status = "111";
                            data.result = "Success";
                        }

                        else
                        {
                            data.status = "333";
                            data.result = "No Image found!";

                        }
                    }
                    else
                    {
                        data.status = "333";
                        data.result = "No Image found!";

                    }


                }
                catch (Exception e)
                {
                    data.status = "666";
                    data.result = "Exception : " + e.Message;

                }

                if (data.status == "111")
                {
                    Context.Response.Write(js.Serialize(data));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data));
                }

            }


            else
            {
                Context.Response.Write(js.Serialize("Session Expired."));
            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Delete_BrAmbience_Visit_photo(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string image_id = data1.Split('~')[1].ToString();
            string visit_id = data1.Split('~')[2].ToString();


            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                string inputString = image_id + '~' + visit_id;
                try
                {
                    dt = lb.proc_mobapp_ngl(268, inputString);

                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                    {


                        resultModel.status = "111";
                        resultModel.result = "Deleted Successfully!!!";

                    }
                    else
                    {
                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }


                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "555";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Confirm_BrAmbience_Visit(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string visit_id = data1.Split('~')[1].ToString();
            string Br_id = data1.Split('~')[2].ToString();
            string emp_code = data1.Split('~')[3].ToString();

            string inputString = visit_id + '~' + Br_id + '~' + emp_code;

            if (isSessionValid(sessionId) == "1")
            {

                DataSet ds = new DataSet();
                DataTable dt, dt1 = new DataTable();
                String result = "";
                try
                {
                    dt = lb.proc_mobapp_ngl(269, inputString);

                    if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == "111"))
                    {


                        resultModel.status = "111";
                        resultModel.result = "Confirm Successfully!!!";

                    }
                    else
                    {
                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }


                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }


            else
            {
                resultModel.status = "555";
                resultModel.result = "Session Expired";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }



        //----Girish-------125139------Branch Ambience photo uploading module in ESS App-----end--//





        // ---SWATHISH-------125061------Modification in Customer Calling Module in ESS App-----start----


        public class Get_Cust_Response_List
        {
            public List<Response_List_call> getCustResponseList { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class Response_List_call
        {
            public string Response_id { get; set; }
            public string Response { get; set; }


        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_CustResposeList(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_Cust_Response_List details = new Get_Cust_Response_List();
            List<Response_List_call> getCustResponseList = new List<Response_List_call>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();

            string employee_code = data1.Split('~')[1].ToString();

            string inputString = employee_code;

            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_mobapp_ngl(273, inputString);


                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getCustResponseList.Add(new Response_List_call()
                            {

                                Response_id = dr[0].ToString(),
                                Response = dr[1].ToString(),

                            });
                        }
                        details.getCustResponseList = getCustResponseList;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No Data Found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }




        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void Get_CustList_collection_search(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";

            DataTable dt, dt1 = new DataTable();

            Get_Cust_List details = new Get_Cust_List();
            List<Cust_List_call> getCustList = new List<Cust_List_call>();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('~')[0].ToString();
            string cust_id = data1.Split('~')[1].ToString();
            

            string inputString = cust_id;

            if (isSessionValid(sessionId) == "1")
            {
                try
                {
                    dt = lb.proc_mobapp_ngl(272, inputString);


                    if (dt.Rows.Count > 0 && dt.Rows[0][0].ToString()!="222")
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            getCustList.Add(new Cust_List_call()
                            {

                                cust_id = dr[0].ToString(),
                                loan_id = dr[1].ToString(),
                                emi_dt = dr[2].ToString()

                            });
                        }
                        details.getCustList = getCustList;
                        details.status = "111";
                        details.result = "Success";
                    }
                    else
                    {
                        details.status = "222";
                        details.result = "No Data Found";
                    }
                }
                catch (Exception ex)
                {
                    details.status = "666";
                    details.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                details.result = "Session Expired";
                details.status = "555";
            }
            Context.Response.Write(js.Serialize(details));

        }

        // ---SWATHISH-------125061------Modification in Customer Calling Module in ESS App-----end----


        // ---Vismaya-------125105------Script approval in ESS App----- Start---

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void script_reject(string p_data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(p_data);
            string sessionId = data1.Split('¥')[0].ToString();
            string post_id = data1.Split('¥')[1].ToString();
            string seq_no = data1.Split('¥')[2].ToString();
            string u_id = data1.Split('¥')[3].ToString();
            string rmk = data1.Split('¥')[4].ToString();


            if (isSessionValid(sessionId) == "1")
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                string inputString = post_id + '¥' + seq_no + '¥' + u_id + '¥' + rmk;
                try
                {
                    dt = lb.proc_backend_datacorrection("", "reject", inputString);

                    if (dt.Rows[0][0].ToString() == "Successfully Updated")
                    {


                        resultModel.status = "111";
                        resultModel.result = "Rejected Successfully!!!";


                    }
                    else
                    {
                        resultModel.status = dt.Rows[0][0].ToString();
                        resultModel.result = dt.Rows[0][1].ToString();
                    }
                }
                catch (Exception ex)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + ex.Message;
                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "555";
            }

            Context.Response.Write(js.Serialize(resultModel));

        }

        // ---Vismaya-------125105------Script approval in ESS App----- End ---


        // --------------swathish----125343---CRF FOR DEMERGE APPROVALS OBTAINED IN ESS APP-----start---


        public class DemergeData
        {
            public string id { get; set; }

            public string name { get; set; }

        }


        public class DemergeDataList : ResultModel
        {
            public List<DemergeData> demergeDatas { get; set; }
        }

        [WebMethod]
        public void getDemergeCustomerList(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();
            DemergeDataList val = new DemergeDataList();
            List<DemergeData> vallist = new List<DemergeData>();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dt = lb.PROC_CUSTOMER_MERGE("", "R", dataArray[1], "");

                    if (dt.Rows.Count > 1)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            vallist.Add(new DemergeData()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString()
                            });
                        }
                        val.demergeDatas = vallist;
                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "No data found";
                    }

                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "555";
                stack.result = "Something went wrong";
            }
            if (val.status == "111")
                Context.Response.Write(js.Serialize(val));
            else
                Context.Response.Write(js.Serialize(stack));

        }

        public class view_rep1
        {
            public string REQUESTED_BY { get; set; }
            public string REQUESTED_DATE { get; set; }
            public string REQUESTED_REMARK { get; set; }
            public string APPROVED_BY { get; set; }
            public string APPROVED_DATE { get; set; }
            public string APPROVED_REMARK { get; set; }
            public string DEREQUESTED_BY { get; set; }
            public string DEREQUESTED_DATE { get; set; }
            public string DEREQUESTED_REMARK { get; set; }
            public string NEW_CUST_ID { get; set; }
            public string NEW_CUSNAME { get; set; }
            public string NEW_IDTYPE { get; set; }
            public string NEW_IDNO { get; set; }
            public string NEW_PAN { get; set; }
            public string NEW_BRANCH { get; set; }
            public string NEW_ADDRS { get; set; }
            public string OLD_CUST_ID { get; set; }
            public string OLD_CUSNAME { get; set; }
            public string OLD_IDTYPE { get; set; }
            public string OLD_IDNO { get; set; }
            public string OLD_PAN { get; set; }
            public string OLD_BRANCH { get; set; }
            public string OLD_ADDRS { get; set; }
            public string NEW_PH { get; set; }
            public string NEW_ACC { get; set; }
            public string OLD_PH { get; set; }
            public string OLD_ACC { get; set; }

        }

        public class datalist : ResultModel
        {
            public List<view_rep1> datas { get; set; }
        }

        [WebMethod]
        public void getDemergeCustomerDatas(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();
            datalist pack = new datalist();
            List<view_rep1> vallist = new List<view_rep1>();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dt = lb.PROC_CUSTOMER_MERGE("", "M2", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            vallist.Add(new view_rep1()
                            {


                                REQUESTED_BY = dr["REQUESTED_BY"].ToString(),
                                REQUESTED_DATE = dr["REQUESTED_DATE"].ToString(),
                                REQUESTED_REMARK = dr["REQUESTED_REMARK"].ToString(),
                                NEW_CUST_ID = dr["NEW_CUST_ID"].ToString(),
                                NEW_CUSNAME = dr["NEW_CUSNAME"].ToString(),
                                NEW_IDTYPE = dr["NEW_IDTYPE"].ToString(),
                                NEW_IDNO = dr["NEW_IDNO"].ToString(),
                                NEW_PAN = dr["NEW_PAN"].ToString(),
                                NEW_BRANCH = dr["NEW_BRANCH"].ToString(),
                                NEW_ADDRS = dr["NEW_ADDRS"].ToString(),
                                NEW_PH = dr["NEW_PH"].ToString(),
                                NEW_ACC = dr["NEW_ACC"].ToString(),
                                OLD_CUST_ID = dr["OLD_CUST_ID"].ToString(),
                                OLD_CUSNAME = dr["OLD_CUSNAME"].ToString(),
                                OLD_IDTYPE = dr["OLD_IDTYPE"].ToString(),
                                OLD_IDNO = dr["OLD_IDNO"].ToString(),
                                OLD_PAN = dr["OLD_PAN"].ToString(),
                                OLD_BRANCH = dr["OLD_BRANCH"].ToString(),
                                OLD_ADDRS = dr["OLD_ADDRS"].ToString(),
                                OLD_PH = dr["OLD_PH"].ToString(),
                                OLD_ACC = dr["OLD_ACC"].ToString(),
                                APPROVED_BY = dr["APPROVED_BY"].ToString(),
                                APPROVED_DATE = dr["APPROVED_DATE"].ToString(),
                                APPROVED_REMARK = dr["APPROVED_REMARK"].ToString(),
                                DEREQUESTED_BY = dr["DEREQUESTED_BY"].ToString(),
                                DEREQUESTED_DATE = dr["DEREQUESTED_DATE"].ToString(),
                                DEREQUESTED_REMARK = dr["DEREQUESTED_REMARK"].ToString()


                            });

                        }
                        pack.datas = vallist;
                        pack.status = "111";
                        pack.result = "Success";
                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "Invalid Request !";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "555";
                stack.result = "Something went wrong";

            }

            if (pack.status == "111")
                Context.Response.Write(js.Serialize(pack));

            else

                Context.Response.Write(js.Serialize(stack));

        }


        public class fileNameOfDocument : ResultModel
        {
            public string file_name { get; set; }
            public string file_type { get; set; }

        }


        [WebMethod]
        public void getDemergeDocument(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();
            fileNameOfDocument val = new fileNameOfDocument();
            byte[] dataFile = new byte[0];
            string extension = "", filename = "", curtime = "";
            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string[] dataArrayNEW = dataArray[2].Split('^');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dt = lb.PROC_CUSTOMER_MERGE("", dataArray[1], dataArray[2], "");

                    if (dt.Rows.Count > 0)
                    {
                        dataFile = (byte[])dt.Rows[0][0];
                        extension = GetFileExtensionFromBytes(dataFile);

                        if (extension == ".tif" || extension == ".unknown")
                        {
                            dataFile = ConvertToJpg(dataFile);
                            extension = GetFileExtensionFromBytes(dataFile);
                        }
                        if (dataArray[1] == "C")
                            filename = "Customer-Photo";
                        else if (dataArray[1] == "B")
                            filename = "KYC";
                        else if (dataArray[1] == "D")
                            filename = "PAN";
                        else if (dataArray[1] == "E")
                            filename = "FORM-60";
                        else if (dataArray[1] == "F")
                            filename = "NEFT";
                        curtime = DateTime.Now.ToString("dd.MM.yyyy.HH.mm.ss");
                        filename = filename + "-" + dataArrayNEW[1] + curtime + extension;
                        DownloadFile(filename, dataFile);

                        val.file_name = filename;
                        val.file_type = extension;
                        val.status = "111";
                        val.result = "Success";


                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "No Image Found";
                    }
                }


                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "555";
                stack.result = "Something went wrong";
            }
            if (val.status == "111")
                Context.Response.Write(js.Serialize(val));
            else
                Context.Response.Write(js.Serialize(stack));

        }

        [WebMethod]
        public void DemergeReject(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string[] del = dataArray[1].Split('^');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dt = lb.PROC_CUSTOMER_MERGE("", "S", dataArray[1], "");

                    if (dt.Rows[0][0].ToString() == "111")
                    {


                        stack.status = dt.Rows[0][0].ToString();
                        stack.result = "Rejected successfully";



                    }
                    else if (dt.Rows[0][0].ToString() == "112")
                    {
                        stack.status = "112";
                        stack.result = "ENTER REMARKS";
                    }
                    else
                    {
                        stack.status = "222";
                        stack.result = "No data found";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "666";
                stack.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(stack));

        }

        [WebMethod]
        public void DemergeApprove(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string[] del = dataArray[1].Split('^');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dt = lb.PROC_CUSTOMER_MERGE("", "T", dataArray[1], "");

                    if (dt.Rows[0][0].ToString() == "111")
                    {
                        stack.status = dt.Rows[0][0].ToString();
                        stack.result = "Approved successfully";



                    }
                    else if (dt.Rows[0][0].ToString() == "112")
                    {
                        stack.result = "ENTER REMARKS";
                        stack.status = "222";
                    }
                    else if (dt.Rows[0][0].ToString() == "123")
                    {
                        stack.result = "Original ID not available";
                        stack.status = "222";
                    }
                    else if (dt.Rows[0][0].ToString() == "124")
                    {
                        stack.result = "Original ID Re-pledge pending";
                        stack.status = "222";
                    }
                    else if (dt.Rows[0][0].ToString() == "125")
                    {
                        stack.result = "Original ID payment pending";
                        stack.status = "222";
                    }
                    else if (dt.Rows[0][0].ToString() == "126")
                    {
                        stack.result = "Duplicate ID not found";
                        stack.status = "222";
                    }
                    else
                    {
                        stack.result = "Something Went wrong";
                        stack.status = "222";
                    }
                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "666";
                stack.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(stack));

        }


        // --------------swathish----125343---CRF FOR DEMERGE APPROVALS OBTAINED IN ESS APP-----End---



        //---SWATHISH------- 125367------CRF for report ¿ Customer callingvisiting module-----end----


        [WebMethod]
        public void DemergeAccess(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel stack = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dt = lb.proc_mobapp_ngl(276, dataArray[1]);

                    if (dt.Rows[0][0].ToString() == "111")
                    {
                        stack.status = dt.Rows[0][0].ToString();
                        stack.result = dt.Rows[0][1].ToString();



                    }
                    else if (dt.Rows[0][0].ToString() == "222")
                    {
                        stack.result = dt.Rows[0][1].ToString();
                        stack.status = "222";
                    }

                }
                else
                {
                    stack.status = "333";
                    stack.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                stack.status = "666";
                stack.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(stack));

        }

        //---SWATHISH------- 125367------CRF for report ¿ Customer callingvisiting module-----end----

        //---Aswathy------- 125344------CRF Ckyc verification Approval-----start----


        [WebMethod]
        public void GetZoneDrp(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                get_id_name data2 = new get_id_name();
                List<get_id_name_dtls> get_dtls = new List<get_id_name_dtls>();

                try
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", "B0", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new get_id_name_dtls()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.getdtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        [WebMethod]
        public void GetRegionDrp(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                get_id_name data2 = new get_id_name();
                List<get_id_name_dtls> get_dtls = new List<get_id_name_dtls>();

                try
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", "B1", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new get_id_name_dtls()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.getdtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void GetBranchDrp(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                get_id_name data2 = new get_id_name();
                List<get_id_name_dtls> get_dtls = new List<get_id_name_dtls>();

                try
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", "B2", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new get_id_name_dtls()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.getdtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void GetCutsDrp(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                get_id_name data2 = new get_id_name();
                List<get_id_name_dtls> get_dtls = new List<get_id_name_dtls>();

                try
                {
                    dt = lb.PROC_CUST_HOAPPS_OLD("", "B3", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new get_id_name_dtls()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.getdtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        public class cust_details
        {
            public string Cust_id { get; set; }
            public string Cust_name { get; set; }
            public string identity_name { get; set; }
            public string ID_Number { get; set; }
            public string Branch_id { get; set; }
            public string Employee_code { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void getCustDetls_ckyc(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            cust_details val = new cust_details();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", "B4", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {
                        val.Cust_id = dt.Rows[0][0].ToString();
                        val.Cust_name = dt.Rows[0][1].ToString();
                        val.identity_name = dt.Rows[0][2].ToString();
                        val.ID_Number = dt.Rows[0][3].ToString();
                        val.Branch_id = dt.Rows[0][4].ToString();
                        val.Employee_code = dt.Rows[0][5].ToString();
                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }


        [WebMethod]
        public void Approve_ckyc(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel val = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", "B6", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0][0].ToString() == "APPROVED")
                        {
                            val.status = "111";
                            val.result = dt.Rows[0][0].ToString();
                        }
                        else
                        {
                            val.status = "222";
                            val.result = dt.Rows[0][0].ToString();
                        }

                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        [WebMethod]
        public void Reject_ckyc(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel val = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_COMMON_SELECT("CUST_HOAPPS", "B7", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0][0].ToString() == "REJECTED")
                        {
                            val.status = "111";
                            val.result = dt.Rows[0][0].ToString();
                        }
                        else
                        {
                            val.status = "222";
                            val.result = dt.Rows[0][0].ToString();
                        }

                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        //---Aswathy------- 125344------CRF Ckyc verification Approval-----start----

        //---ADITHYAN------- 125344------CRF family flat phase-3-----start----

        public class get_family_flat_alert
        {
            public string req_count { get; set; }

            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void gethosteldata_alert(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            get_family_flat_alert val = new get_family_flat_alert();

            try
            {
                string decryptedIData = Decryptrel(data);

                string sessionId = decryptedIData;


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_mobapp_ngl(278, "");

                    if (dt.Rows.Count > 0)
                    {

                        val.req_count = dt.Rows[0][0].ToString();



                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }


        [WebMethod]
        public void Get_vacant_flat(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                get_id_name data2 = new get_id_name();
                List<get_id_name_dtls> get_dtls = new List<get_id_name_dtls>();

                try
                {
                    dt = lb.PROC_HO_FAMILY_FLAT_REQUEST("", "vacant_flatlist", "", "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_dtls.Add(new get_id_name_dtls()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.getdtls_list = get_dtls;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class EmailCred
        {
            public string emailid { get; set; }
            public string emailpwd { get; set; }


        }

        [WebMethod]
        public string send_mail_familyflat(string toMail, string body, string subject)
        {
            string str_res = "111";

           // string mailSettings = System.Configuration.ConfigurationManager.AppSettings["emailSettings"];
            try
            {
               
                    DataTable dt = new DataTable();
                    //EmailCred emailcred = new EmailCred();

                  //  emailcred.emailid = System.Configuration.ConfigurationManager.AppSettings["emailid"];
                  //  emailcred.emailpwd = System.Configuration.ConfigurationManager.AppSettings["emailpwd"];

                    SmtpClient server = new SmtpClient("smtp.office365.com");
                    server.Port = 587;
                    server.EnableSsl = true;
                    server.UseDefaultCredentials = false;
                    int tls12 = 3072;
                    System.Net.ServicePointManager.SecurityProtocol = (SecurityProtocolType)tls12;
                    server.Credentials = new System.Net.NetworkCredential("itportal@manappuram.com","PLMokn@789", "smtp.office365.com");//need to modify
                    server.Timeout = 10000;
                    server.TargetName = "STARTTLS/smtp.office365.com";
                    server.DeliveryMethod = SmtpDeliveryMethod.Network;
                    MailMessage mail = new MailMessage();
                    mail.From = new MailAddress("itportal@manappuram.com");//need to modify mail before host
                    mail.To.Clear();
                    mail.Body = "";
                    mail.Attachments.Clear();
                    mail.Subject = subject;
                    mail.Body = body;
                    mail.IsBodyHtml = true;
                    mail.To.Add(toMail);
                    str_res = "Mail has been sent successfuly !";
                    ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;
                    server.Send(mail);


                
            }
            catch (Exception ex)
            {
                str_res = ex.Message;
            }

            return str_res;







        }


        //---ADITHYAN------- 125344------CRF family flat phase-3-----end----

        //----Girish-------125700-----CRF for Controls in adding inventory and Repledges-------start--//

        public class Get_inv_CustList
        {
            public List<inv_CustList> getInvCustList { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class inv_CustList
        {
            public string quot_no { get; set; }
            public string cust_id { get; set; }

        }

        [WebMethod]
        public void Get_CustList_invLimit_approval(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                Get_inv_CustList data2 = new Get_inv_CustList();
                List<inv_CustList> getInvCustList = new List<inv_CustList>();

                try
                {
                    dt = lb.proc_ho_inv_limit_appl("", "load_custid", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            getInvCustList.Add(new inv_CustList()
                            {
                                quot_no = dr[0].ToString(),
                                cust_id = dr[1].ToString(),
                            });
                        }

                        data2.getInvCustList = getInvCustList;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }



        public class inv_cust_details
        {
            public string branch_id { get; set; }
            public string branch_name { get; set; }
            public string Cust_name { get; set; }
            public string address { get; set; }
            public string locality { get; set; }
            public string pledge_sum { get; set; }
            public string net_weight_sum { get; set; }
            public string inv_count { get; set; }
            public string quot_no { get; set; }
            public string pledge_val { get; set; }
            public string net_wt { get; set; }
            public string tra_dt { get; set; }
            public string req_userid { get; set; }


            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void getCustDtls_invApproval(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            inv_cust_details val = new inv_cust_details();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_ho_inv_limit_appl("", "GetCustdtls", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {
                        val.branch_id = dt.Rows[0][0].ToString();
                        val.branch_name = dt.Rows[0][1].ToString();
                        val.Cust_name = dt.Rows[0][2].ToString();
                        val.address = dt.Rows[0][3].ToString();
                        val.locality = dt.Rows[0][4].ToString();
                        val.pledge_sum = dt.Rows[0][5].ToString();
                        val.net_weight_sum = dt.Rows[0][6].ToString();
                        val.inv_count = dt.Rows[0][7].ToString();
                        val.quot_no = dt.Rows[0][8].ToString();
                        val.pledge_val = dt.Rows[0][9].ToString();
                        val.net_wt = dt.Rows[0][10].ToString();
                        val.tra_dt = dt.Rows[0][11].ToString();
                        val.req_userid = dt.Rows[0][12].ToString();

                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        public class Get_inv_report
        {
            public List<inv_ReportList> getInvReprtList { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class inv_ReportList
        {
            public string cust_id { get; set; }
            public string quot_no { get; set; }
            public string br_id { get; set; }
            public string tra_dt { get; set; }
            public string req_userid { get; set; }
            public string status { get; set; }
            public string PLEDGE_VALUE { get; set; }
            public string NET_WEIGHT { get; set; }
            public string REQ_BR { get; set; }
            public string BR_REQ_DATE { get; set; }
            public string appr_ah { get; set; }
            public string AH_REC_DATE { get; set; }
            public string appr_rm { get; set; }
            public string RM_REC_DATE { get; set; }
            public string appr_fzm { get; set; }
            public string FZM_REC_DATE { get; set; }
            public string appr_ophead { get; set; }
            public string OP_HEAD_APPR_DATE { get; set; }
            public string appr_busihead { get; set; }
            public string BUSINESS_HEAD_APPR_DATE { get; set; }
            public string REJECT_REASON { get; set; }
            public string REJECTED_BY { get; set; }
            public string REJECT_DATE { get; set; }

        }

        [WebMethod]
        public void Get_ReportList_invLimit_approval(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                Get_inv_report data2 = new Get_inv_report();
                List<inv_ReportList> getInvReprtList = new List<inv_ReportList>();

                try
                {
                    dt = lb.proc_ho_inv_limit_appl("", "GetBlockRpt", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            getInvReprtList.Add(new inv_ReportList()
                            {
                                cust_id = dr[0].ToString(),
                                quot_no = dr[1].ToString(),
                                br_id = dr[2].ToString(),
                                tra_dt = dr[3].ToString(),
                                req_userid = dr[4].ToString(),
                                status = dr[5].ToString(),
                                PLEDGE_VALUE = dr[6].ToString(),
                                NET_WEIGHT = dr[7].ToString(),
                                REQ_BR = dr[8].ToString(),
                                BR_REQ_DATE = dr[9].ToString(),
                                appr_ah = dr[10].ToString(),
                                AH_REC_DATE = dr[11].ToString(),
                                appr_rm = dr[12].ToString(),
                                RM_REC_DATE = dr[13].ToString(),
                                appr_fzm = dr[14].ToString(),
                                FZM_REC_DATE = dr[15].ToString(),
                                appr_ophead = dr[16].ToString(),
                                OP_HEAD_APPR_DATE = dr[17].ToString(),
                                appr_busihead = dr[18].ToString(),
                                BUSINESS_HEAD_APPR_DATE = dr[19].ToString(),
                                REJECT_REASON = dr[20].ToString(),
                                REJECTED_BY = dr[21].ToString(),
                                REJECT_DATE = dr[22].ToString(),
                            });
                        }

                        data2.getInvReprtList = getInvReprtList;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void Confirm_Reject_inv_request(string data, string flag)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel val = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {

                    if (flag == "1")
                    {

                        dt = lb.proc_ho_inv_limit_appl("", "Cust_confirm", dataArray[1], "");

                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows[0][0].ToString() == "done")
                            {
                                val.status = "111";
                                val.result = dt.Rows[0][0].ToString();
                            }
                            else
                            {
                                val.status = "222";
                                val.result = dt.Rows[0][0].ToString();
                            }

                        }
                        else
                        {
                            val.status = "222";
                            val.result = "No data found";
                        }

                    }
                    else if (flag == "2")
                    {
                        dt = lb.proc_ho_inv_limit_appl("", "Reject_request", dataArray[1], "");

                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows[0][0].ToString() == "done")
                            {
                                val.status = "111";
                                val.result = dt.Rows[0][0].ToString();
                            }
                            else
                            {
                                val.status = "222";
                                val.result = dt.Rows[0][0].ToString();
                            }

                        }
                        else
                        {
                            val.status = "222";
                            val.result = "No data found";
                        }

                    }


                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        //----Repledge--//

        public class Get_repldge_CustList
        {
            public List<repldge_CustList> getPledgeCustList { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class repldge_CustList
        {
            public string pledge_no { get; set; }
            public string cust_id { get; set; }

        }

        [WebMethod]
        public void Get_CustList_repledgeLimit_approval(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                Get_repldge_CustList data2 = new Get_repldge_CustList();
                List<repldge_CustList> getPledgeCustList = new List<repldge_CustList>();

                try
                {
                    dt = lb.proc_ho_inv_limit_appl("", "load_rpldg_cust", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            getPledgeCustList.Add(new repldge_CustList()
                            {
                                pledge_no = dr[0].ToString(),
                                cust_id = dr[1].ToString(),
                            });
                        }

                        data2.getPledgeCustList = getPledgeCustList;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class Repldge_cust_details
        {
            public string branch_id { get; set; }
            public string branch_name { get; set; }
            public string Cust_name { get; set; }
            public string address { get; set; }
            public string locality { get; set; }
            public string pledge_cnt { get; set; }
            public string pledge_no { get; set; }
            public string pledge_val { get; set; }
            public string net_weight { get; set; }
            public string tra_dt { get; set; }


            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void getCustDtls_RepledgeApproval(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            Repldge_cust_details val = new Repldge_cust_details();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_ho_inv_limit_appl("", "GetrpldgCustdtls", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {
                        val.branch_id = dt.Rows[0][0].ToString();
                        val.branch_name = dt.Rows[0][1].ToString();
                        val.Cust_name = dt.Rows[0][2].ToString();
                        val.address = dt.Rows[0][3].ToString();
                        val.locality = dt.Rows[0][4].ToString();
                        val.pledge_cnt = dt.Rows[0][5].ToString();
                        val.pledge_no = dt.Rows[0][6].ToString();
                        val.pledge_val = dt.Rows[0][7].ToString();
                        val.net_weight = dt.Rows[0][8].ToString();
                        val.tra_dt = dt.Rows[0][9].ToString();


                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        public class Get_Repldge_report
        {
            public List<Repldge_ReportList> getRepldgeReprtList { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class Repldge_ReportList
        {
            public string cust_id { get; set; }
            public string Pledge_No { get; set; }
            public string br_id { get; set; }
            public string tra_dt { get; set; }
            public string status { get; set; }
            public string PLEDGE_VALUE { get; set; }
            public string NET_WEIGHT { get; set; }
            public string OP_HEAD { get; set; }
            public string OP_HEAD_APPR_DATE { get; set; }
            public string BUSINESS_HEAD { get; set; }
            public string BUSINESS_HEAD_APPR_DATE { get; set; }
            public string REJECT_REASON { get; set; }
            public string REJECTED_BY { get; set; }
            public string REJECT_DATE { get; set; }


        }

        [WebMethod]
        public void Get_ReportList_RepldgeLimit_approval(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                Get_Repldge_report data2 = new Get_Repldge_report();
                List<Repldge_ReportList> getRepldgeReprtList = new List<Repldge_ReportList>();

                try
                {
                    dt = lb.proc_ho_inv_limit_appl("", "GetBlockRplgRpt", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            getRepldgeReprtList.Add(new Repldge_ReportList()
                            {
                                cust_id = dr[0].ToString(),
                                Pledge_No = dr[1].ToString(),
                                br_id = dr[2].ToString(),
                                tra_dt = dr[3].ToString(),
                                status = dr[4].ToString(),
                                PLEDGE_VALUE = dr[5].ToString(),
                                NET_WEIGHT = dr[6].ToString(),
                                OP_HEAD = dr[7].ToString(),
                                OP_HEAD_APPR_DATE = dr[8].ToString(),
                                BUSINESS_HEAD = dr[9].ToString(),
                                BUSINESS_HEAD_APPR_DATE = dr[10].ToString(),
                                REJECT_REASON = dr[11].ToString(),
                                REJECTED_BY = dr[12].ToString(),
                                REJECT_DATE = dr[13].ToString(),

                            });
                        }

                        data2.getRepldgeReprtList = getRepldgeReprtList;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void Confirm_Reject_Repldge_request(string data, string flag)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel val = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    if (flag == "1")
                    {


                        dt = lb.proc_ho_inv_limit_appl("", "Cust_repledge_confirm", dataArray[1], "");

                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows[0][0].ToString() == "done")
                            {
                                val.status = "111";
                                val.result = dt.Rows[0][0].ToString();
                            }
                            else
                            {
                                val.status = "222";
                                val.result = dt.Rows[0][0].ToString();
                            }

                        }
                        else
                        {
                            val.status = "222";
                            val.result = "No data found";
                        }

                    }
                    else if (flag == "2")
                    {
                        dt = lb.proc_ho_inv_limit_appl("", "Reject_rpldg_request", dataArray[1], "");

                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows[0][0].ToString() == "done")
                            {
                                val.status = "111";
                                val.result = dt.Rows[0][0].ToString();
                            }
                            else
                            {
                                val.status = "222";
                                val.result = dt.Rows[0][0].ToString();
                            }

                        }
                        else
                        {
                            val.status = "222";
                            val.result = "No data found";
                        }

                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        //----Girish-------125700-----CRF for Controls in adding inventory and Repledges-------end--//

        //----Girish-------125963-----CRF For Implementation of BRD PMO and HOD Approval in ESS App-------start--//

        public class Get_BRD_List
        {
            public List<BRD_List> getBRD_List { get; set; }

            public string status { get; set; }
            public string result { get; set; }

        }

        public class BRD_List
        {
            public string BRD_ID { get; set; }
            public string BRD_ID_dtls { get; set; }

        }

        [WebMethod]
        public void Get_BRD_PMO_HOD_ApprovalList(string data, string flag)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                Get_BRD_List data2 = new Get_BRD_List();
                List<BRD_List> getBRD_List = new List<BRD_List>();

                try
                {

                    if (flag == "1")    //PMO//
                    {
                        dt = lb.proc_tracker_prd_request("", "brd_pmoapproval", dataArray[1], "", "");

                        if (dt.Rows.Count > 0)
                        {

                            foreach (DataRow dr in dt.Rows)
                            {
                                getBRD_List.Add(new BRD_List()
                                {
                                    BRD_ID = dr[0].ToString(),
                                    BRD_ID_dtls = dr[1].ToString(),
                                });
                            }

                            data2.getBRD_List = getBRD_List;
                            data2.status = "111";
                            data2.result = "Success";
                        }
                        else
                        {
                            data2.status = "222";
                            data2.result = "No Data Found";
                        }
                    }
                    else if (flag == "2")   //HOD//
                    {

                        dt = lb.proc_tracker_prd_request("", "ho_brdid", dataArray[1], "", "");

                        if (dt.Rows.Count > 0)
                        {

                            foreach (DataRow dr in dt.Rows)
                            {
                                getBRD_List.Add(new BRD_List()
                                {
                                    BRD_ID = dr[0].ToString(),
                                    BRD_ID_dtls = dr[1].ToString(),
                                });
                            }

                            data2.getBRD_List = getBRD_List;
                            data2.status = "111";
                            data2.result = "Success";
                        }
                        else
                        {
                            data2.status = "222";
                            data2.result = "No Data Found";
                        }


                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void BRD_PMO_Hold_Reject_Approval(string data, string flag)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt, dt1 = new DataTable();
            DataSet dS = new DataSet();
            ResultModel val = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];
                string[] dataArray1 = dataArray[1].Split('~');
                //string brd_id = dataArray1[0];
                string brd_id = "";


                if (isSessionValid(sessionId) == "1")
                {


                    if (flag == "1")
                    {
                        dt = lb.proc_tracker_prd_request("", "brdpmoapproval", dataArray[1], "", "");
                        brd_id = dt.Rows[0][0].ToString();

                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == brd_id))
                        {
                            val.status = "111";
                            val.result = "Approved Successfully";

                        }
                        else
                        {
                            val.status = "222";
                            val.result = "No Data Found";
                        }
                    }
                    else if (flag == "2")
                    {
                        dt = lb.proc_tracker_prd_request("", "brd_pmo_reject", dataArray[1], "", "");
                        brd_id = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == brd_id))
                        {
                            val.status = "111";
                            val.result = "Rejected Successfully";

                        }
                        else
                        {
                            val.status = "222";
                            val.result = "No Data Found";
                        }
                    }
                    else if (flag == "3")
                    {
                        dt = lb.proc_tracker_prd_request("", "brd_pmo_HOLD", dataArray[1], "", "");
                        brd_id = dt.Rows[0][0].ToString();

                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == brd_id))
                        {
                            val.status = "111";
                            val.result = "Hold Successfully";

                        }
                        else
                        {
                            val.status = "222";
                            val.result = "No Data Found";
                        }
                    }
                    else
                    {
                        val.status = "333";
                        val.result = "Please enter proper data";
                    }
                }
                else
                {
                    val.status = "555";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }


        [WebMethod]
        public void BRD_HOD_Reject_Approval(string data, string flag, string Content)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt, dt1 = new DataTable();
            DataSet dS = new DataSet();
            ResultModel val = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];
                string[] dataArray1 = dataArray[1].Split('µ');
                string[] dataArray2 = dataArray[2].Split('µ');
                string brd_id = "";
                //string input = dataArray[1];


                if (isSessionValid(sessionId) == "1")
                {


                    if (flag == "1")
                    {
                        dt = lb.proc_tracker_prd_request("brd_tracker", "ConfirmRequestNote", dataArray[1], dataArray[2], Content);
                        brd_id = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == brd_id))
                        {
                            val.status = "111";
                            val.result = "Approved Successfully";

                        }
                        else
                        {
                            val.status = "222";
                            val.result = "No Data Found";
                        }
                    }
                    else if (flag == "2")
                    {
                        dt = lb.proc_tracker_prd_request("", "brd_hodreject", dataArray[1], "", "");

                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() == brd_id))
                        {
                            val.status = "111";
                            val.result = "Rejected Successfully";

                        }
                        else
                        {
                            val.status = "222";
                            val.result = "No Data Found";
                        }
                    }
                    else
                    {
                        val.status = "444";
                        val.result = "Please enter proper data";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Exception : " + ex.Message;
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }


        
        public class crf_doc_content // CRF content view
        {
            public string crf_content { get; set; }
            public string status { get; set; }
            public string result { get; set; }
        }

        [WebMethod]
        public void getCrfNoteContent(string data)
        {

            DataSet ds = new DataSet();
            DataTable dt = new DataTable();
            crf_doc_content Out_result = new crf_doc_content();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];


            if (isSessionValid(sessionId) == "1")
            {
                string s;
                try
                {

                    dt = lb.proc_tracker_prd_request("", "GetCRFcontent_fill", dataArray[1], "", "");
                    if (dt.Rows.Count > 0)
                    {

                        Out_result.status = "111";
                        Out_result.result = "Success";
                        Out_result.crf_content = dt.Rows[0][0].ToString();
                        s = Out_result.crf_content;


                    }
                    else
                    {
                        s = " ";
                        Out_result.status = "222";
                        Out_result.result = "No data found!";
                    }
                }
                catch (Exception ex)
                {
                    Out_result.result = "Exception : " + ex.Message;
                    Out_result.status = "666";

                }
            }
            else
            {
                Out_result.result = "Session Expired";
                Out_result.status = "555";
            }
            if (Out_result.status == "111")
            {
                Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
                Context.Response.Cache.SetNoStore();
                Context.Response.Clear();
                Context.Response.ContentType = "application/json";
                Context.Response.Write(js.Serialize(Out_result));
            }
            else
            {
                Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
                Context.Response.Cache.SetNoStore();
                Context.Response.Clear();
                Context.Response.ContentType = "application/json";
                Context.Response.Write(js.Serialize(Out_result));
            }
        }

        public class brd_request_details
        {
            public string Req_empcode { get; set; }
            public string Req_emp_name { get; set; }
            public string Req_department { get; set; }
            public string Req_mailid { get; set; }
            public string Req_mobile_no { get; set; }
            public string User_priority { get; set; }
            public string Team_name { get; set; }
            public string Description { get; set; }
            public string Module_name { get; set; }
            public string Errorimpact { get; set; }
            public string Policy_change { get; set; }
            public string Account_entry { get; set; }
            public string Business_impact { get; set; }
            public string Subject { get; set; }
            public string Type_requirement { get; set; }
            public string TL_BA_PR { get; set; }
            public string TL_BA_Remarks { get; set; }
            public string Paperlessid_circular { get; set; }
            public string Request_date { get; set; }
            public string pmopriority { get; set; }
            public string crf_content { get; set; }

            public string status { get; set; }
            public string result { get; set; }
        }


        [WebMethod]
        public void Get_BRD_PMO_HOD_ApprovalRequest_Dtls(string data, string flag)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt, dt1 = new DataTable();
            DataSet dS = new DataSet();
            brd_request_details val = new brd_request_details();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {

                    if (flag == "1")    //PMO//
                    {
                        dt = lb.proc_tracker_prd_request("", "Getid_pmofill", dataArray[1], "", "");
                        dt1 = lb.proc_tracker_prd_request("", "GetCRFcontent_fill", dataArray[1], "", "");

                        if (dt.Rows.Count > 0)
                        {
                            val.Req_empcode = dt.Rows[0][0].ToString();
                            val.Req_emp_name = dt.Rows[0][1].ToString();
                            val.Req_department = dt.Rows[0][2].ToString();
                            val.Req_mailid = dt.Rows[0][3].ToString();
                            val.Req_mobile_no = dt.Rows[0][4].ToString();
                            val.User_priority = dt.Rows[0][5].ToString();
                            val.Team_name = dt.Rows[0][6].ToString();
                            val.Description = dt.Rows[0][7].ToString();
                            val.Module_name = dt.Rows[0][8].ToString();
                            val.Errorimpact = dt.Rows[0][9].ToString();
                            val.Policy_change = dt.Rows[0][10].ToString();
                            val.Account_entry = dt.Rows[0][11].ToString();
                            val.Business_impact = dt.Rows[0][12].ToString();
                            val.Subject = dt.Rows[0][13].ToString();
                            val.Type_requirement = dt.Rows[0][14].ToString();
                            val.TL_BA_PR = dt.Rows[0][15].ToString();
                            val.TL_BA_Remarks = dt.Rows[0][16].ToString();
                            val.Paperlessid_circular = dt.Rows[0][17].ToString();
                            val.Request_date = dt.Rows[0][18].ToString();
                            val.crf_content = dt1.Rows[0][0].ToString();


                            val.status = "111";
                            val.result = "Success";
                        }
                        else
                        {
                            val.status = "222";
                            val.result = "No data found";
                        }

                    }
                    else if (flag == "2")   //HOD//
                    {
                        dt = lb.proc_tracker_prd_request("", "GettId_hodfill", dataArray[1], "", "");
                        dt1 = lb.proc_tracker_prd_request("", "GetCRFcontent_fill", dataArray[1], "", "");

                        if (dt.Rows.Count > 0)
                        {
                            val.Req_empcode = dt.Rows[0][0].ToString();
                            val.Req_emp_name = dt.Rows[0][1].ToString();
                            val.Req_department = dt.Rows[0][2].ToString();
                            val.Req_mailid = dt.Rows[0][3].ToString();
                            val.Req_mobile_no = dt.Rows[0][4].ToString();
                            val.User_priority = dt.Rows[0][5].ToString();
                            val.Team_name = dt.Rows[0][6].ToString();
                            val.Description = dt.Rows[0][7].ToString();
                            val.Module_name = dt.Rows[0][8].ToString();
                            val.Errorimpact = dt.Rows[0][9].ToString();
                            val.Policy_change = dt.Rows[0][10].ToString();
                            val.Account_entry = dt.Rows[0][11].ToString();
                            val.Business_impact = dt.Rows[0][12].ToString();
                            val.Subject = dt.Rows[0][13].ToString();
                            val.Type_requirement = dt.Rows[0][14].ToString();
                            val.TL_BA_PR = dt.Rows[0][15].ToString();
                            val.TL_BA_Remarks = dt.Rows[0][16].ToString();
                            val.Paperlessid_circular = dt.Rows[0][17].ToString();
                            val.Request_date = dt.Rows[0][18].ToString();
                            val.pmopriority = dt.Rows[0][19].ToString();
                            val.crf_content = dt1.Rows[0][0].ToString();

                            val.status = "111";
                            val.result = "Success";
                        }
                        else
                        {
                            val.status = "222";
                            val.result = "No data found";
                        }

                    }

                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }

        public class Get_BRD_doc_List
        {
            public List<BRD_doc_List> getBRD_docList { get; set; }

            public string status { get; set; }
            public string result { get; set; }


        }

        public class BRD_doc_List
        {
            public string file_no { get; set; }
            public string file_name { get; set; }
            public string file_ext { get; set; }
            public string brd_content { get; set; }

        }

        [WebMethod]
        public void get_BRD_Docs(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string data1 = Decryptrel(data);
            string sessionId = data1.Split('~')[0].ToString();
            string brd_id = data1.Split('~')[1].ToString();

            string extn, stringDocument, stringImage, filename;
            byte[] byteDocument, byteImage;

            string DocFileName = "", ImageName;

            if (isSessionValid(sessionId) == "1")

            {

                DataTable dt, dt1 = new DataTable();
                DataSet dS = new DataSet();
                Get_BRD_doc_List data2 = new Get_BRD_doc_List();
                List<BRD_doc_List> Get_BRD_doc_List = new List<BRD_doc_List>();


                try
                {
                    dt1 = lb.proc_tracker_prd_request("", "imaged", brd_id, "", "");
                    dt = lb.proc_tracker_prd_request("", "brdview", brd_id, "", "");


                    if (dt.Rows.Count > 0 || dt1.Rows.Count > 0)
                    {


                        foreach (DataRow dd in dt.Rows)
                        {

                            byte[] byteImage1;
                            byteImage1 = (byte[])dt.Rows[0][3];


                            extn = GetFileExtensionFromBytes(byteImage1);

                            if (extn == ".tif")
                            {
                                byteImage1 = ConvertToJpg(byteImage1);
                                byteImage1 = justfuncJpegBytes(byteImage1);
                            }

                            DocFileName = dd[1].ToString();

                            if (DownloadFile2(DocFileName, byteImage1))
                            {

                                Get_BRD_doc_List.Add(new BRD_doc_List()
                                {
                                    file_no = dd[0].ToString(),
                                    file_name = dd[1].ToString(),
                                    file_ext = dd[2].ToString(),
                                    brd_content = dd[3].ToString(),
                                });

                            }

                        }

                        foreach (DataRow dr in dt1.Rows)
                        {
                            byte[] byteImage1;
                            byteImage1 = (byte[])dt1.Rows[0][3];

                            extn = GetFileExtensionFromBytes(byteImage1);

                            if (extn == ".tif")
                            {
                                byteImage1 = ConvertToJpg(byteImage1);
                                byteImage1 = justfuncJpegBytes(byteImage1);
                            }

                            DocFileName = dr[1].ToString();

                            if (DownloadFile2(DocFileName, byteImage1))
                            {

                                Get_BRD_doc_List.Add(new BRD_doc_List()
                                {
                                    file_no = dr[0].ToString(),
                                    file_name = dr[1].ToString(),
                                    file_ext = dr[2].ToString(),
                                    brd_content = dr[3].ToString(),
                                });
                            }
                        }

                        data2.getBRD_docList = Get_BRD_doc_List;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }

                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        //----Girish-------125963-----CRF For Implementation of BRD PMO and HOD Approval in ESS App-------end--//


        //start------------ANN ANTONY ------------------crf 125962 ----phase2 crf for implementation of brd ba verifiation in ess app//


        public class brddrp
        {
            public string BRD_ID { get; set; }
            public string SUBJECT { get; set; }


        }

        public class drplist : ResultModel
        {
            public List<brddrp> datas { get; set; }
        }


        [WebMethod]
        public void getbrddrp(string data)
        {

            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                drplist data2 = new drplist();
                List<brddrp> vallist = new List<brddrp>();

                try
                {
                    dt = lb.proc_tracker_prd_request("", "GettId", dataArray[1], "", "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            vallist.Add(new brddrp()
                            {
                                BRD_ID = dr[0].ToString(),
                                SUBJECT = dr[1].ToString(),
                            });
                        }

                        data2.datas = vallist;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        public class content
        {
            public string req_empcode { get; set; }

            public string req_name { get; set; }
            public string req_department { get; set; }
            public string req_mailid { get; set; }
            public string to_changerequest_date { get; set; }
            public string req_mobile_no { get; set; }
            public string brp_priority { get; set; }
            public string team_name { get; set; }
            public string description { get; set; }
            public string module_name { get; set; }
            public string errorimpact { get; set; }
            public string policy_change { get; set; }
            public string account_entry { get; set; }
            public string bussiness_impact { get; set; }
            public string subject { get; set; }
            public string type_requirement { get; set; }
            public string paperlessid_circular { get; set; }
            public string it_team { get; set; }


            public string result { get; set; }
            public string status { get; set; }

        }
        [WebMethod]
        public void getcontent(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            content val = new content();


            try
            {


                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('~');

                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_tracker_prd_request("", "GettId_fill", dataArray[1], "", "");
                    if (dt.Rows.Count > 0)
                    {

                        val.req_empcode = dt.Rows[0][0].ToString();
                        val.req_name = dt.Rows[0][1].ToString();
                        val.req_department = dt.Rows[0][2].ToString();
                        val.req_mailid = dt.Rows[0][3].ToString();
                        val.to_changerequest_date = dt.Rows[0][4].ToString();
                        val.req_mobile_no = dt.Rows[0][5].ToString();
                        val.brp_priority = dt.Rows[0][6].ToString();
                        val.team_name = dt.Rows[0][7].ToString();
                        val.description = dt.Rows[0][8].ToString();
                        val.module_name = dt.Rows[0][9].ToString();
                        val.errorimpact = dt.Rows[0][10].ToString();
                        val.policy_change = dt.Rows[0][11].ToString();
                        val.account_entry = dt.Rows[0][12].ToString();
                        val.bussiness_impact = dt.Rows[0][13].ToString();
                        val.subject = dt.Rows[0][14].ToString();
                        val.type_requirement = dt.Rows[0][15].ToString();
                        val.paperlessid_circular = dt.Rows[0][16].ToString();
                        val.it_team = dt.Rows[0][17].ToString();

                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }
        public class crfcontent
        {
            public string crf_content { get; set; }
            public string result { get; set; }
            public string status { get; set; }


        }

        [WebMethod]
        public void getcrf_content(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            crfcontent val = new crfcontent();
            string decryptedIData = Decryptrel(data);

            string[] dataArray = decryptedIData.Split('~');


            try
            {


                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_tracker_prd_request("", "GetCRFcontent_fill", dataArray[1], "", "");

                    if (dt.Rows.Count > 0)
                    {

                        val.crf_content = dt.Rows[0][0].ToString();



                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }
        public class brddtl
        {
            public string brd_id { get; set; }
            public string result { get; set; }
            public string status { get; set; }


        }

        [WebMethod]
        public void brdConfirm(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            brddtl val = new brddtl();
            string decryptedIData = Decryptrel(data);

            string[] dataArray = decryptedIData.Split('$');


            try
            {


                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_tracker_prd_request("", "brdtlmodule", dataArray[1], "", "");

                    if (dt.Rows.Count > 0)
                    {

                        val.brd_id = dt.Rows[0][0].ToString();



                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }

            Context.Response.Write(js.Serialize(val));


        }



        [WebMethod]
        public void brdReturn(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            brddtl val = new brddtl();
            string decryptedIData = Decryptrel(data);

            string[] dataArray = decryptedIData.Split('$');


            try
            {


                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_tracker_prd_request("", "hndoverupdate", dataArray[1], "", "");

                    if (dt.Rows.Count > 0)
                    {

                        val.brd_id = dt.Rows[0][0].ToString();



                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }

            Context.Response.Write(js.Serialize(val));


        }



        public class brdView
        {
            public string brd_docno { get; set; }
            public string brd_doc_name { get; set; }
            public string brd_doc_ext { get; set; }
            public string result { get; set; }
            public string status { get; set; }


        }

        [WebMethod]
        public void brdDocView(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            brdView val = new brdView();
            string decryptedIData = Decryptrel(data);

            string[] dataArray = decryptedIData.Split('$');


            try
            {


                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_tracker_prd_request("", "brdview", dataArray[1], "", "");

                    if (dt.Rows.Count > 0)
                    {
                        val.brd_docno = dt.Rows[0][0].ToString();

                        val.brd_doc_name = dt.Rows[0][1].ToString();
                        val.brd_doc_ext = dt.Rows[0][2].ToString();
                        Byte[] fileholder = (byte[])dt.Rows[0][3];


                        DownloadFile(val.brd_doc_name, fileholder);


                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }

            Context.Response.Write(js.Serialize(val));


        }

        public class docupload
        {
            public string result { get; set; }
            public string status { get; set; }


        }

        [WebMethod]
        public void brdDocUpload(string data, string file)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            docupload val = new docupload();
            string rslt = "";

            try
            {


                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');

                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    rslt = lb.proc_tracker_docupload("58", dataArray[1], file);

                    if (rslt == "111")
                    {

                        val.status = "111";
                        val.result = "Success";
                    }
                    else
                    {
                        val.status = "222";
                        val.result = "No Data found";
                    }
                }
                else
                {
                    val.status = "333";
                    val.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                val.status = "666";
                val.result = "Something went wrong";
            }
            if (val.status == "111")
            {
                Context.Response.Write(js.Serialize(val));
            }
            else
            {
                Context.Response.Write(js.Serialize(val));
            }
        }


        public class teamdrp
        {
            public string TEAM_ID { get; set; }
            public string TEAM_NAME { get; set; }


        }

        public class teamdrplist : ResultModel
        {
            public List<teamdrp> datas { get; set; }
        }


        [WebMethod]
        public void handOverTeam(string data)
        {

            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            string sessionId = dataArray[0];

            if (isSessionValid(sessionId) == "1")

            {
                DataTable dt = new DataTable();
                DataSet dS = new DataSet();
                teamdrplist data2 = new teamdrplist();
                List<teamdrp> vallist = new List<teamdrp>();

                try
                {
                    dt = lb.proc_tracker_prd_request("", "ithandovertm", dataArray[1], "", "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            vallist.Add(new teamdrp()
                            {
                                TEAM_ID = dr[0].ToString(),
                                TEAM_NAME = dr[1].ToString(),
                            });
                        }

                        data2.datas = vallist;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }
                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        public class brdApprovalView
        {
            public string brd_docno { get; set; }
            public string brd_doc_name { get; set; }
            public string brd_doc_ext { get; set; }


        }
        public class brdApprovalList : ResultModel
        {
            public List<brdApprovalView> datas { get; set; }
        }

        [WebMethod]
        public void brdApprovalDocView(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            string decryptedIData = Decryptrel(data);

            string[] dataArray = decryptedIData.Split('$');

            brdApprovalList data2 = new brdApprovalList();
            List<brdApprovalView> vallist = new List<brdApprovalView>();


            try
            {
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_tracker_prd_request("", "imaged", dataArray[1], "", "");

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            vallist.Add(new brdApprovalView()
                            {
                                brd_docno = dr[0].ToString(),
                                brd_doc_name = dr[1].ToString(),
                                brd_doc_ext = dr[2].ToString(),
                            });

                            Byte[] fileholder = (byte[])dr[3];


                            DownloadFile(dr[1].ToString(), fileholder);
                        }

                        data2.datas = vallist;
                        data2.status = "111";
                        data2.result = "Success";
                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data found";
                    }
                }
                else
                {
                    data2.status = "333";
                    data2.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                data2.status = "666";
                data2.result = "Something went wrong";
            }

            Context.Response.Write(js.Serialize(data2));


        }


        [WebMethod]
        public void baDocDelete(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            docupload val = new docupload();
            string decryptedIData = Decryptrel(data);

            string[] dataArray = decryptedIData.Split('$');

            try
            {
                string sessionId = dataArray[0];

                dt = lb.proc_mobapp_ngl(284, dataArray[1]);

                if (dt.Rows[0][0].ToString() == "111")
                {


                    val.status = "111";
                    val.result = "Deleted Successfully!!!";

                }
                else
                {

                    val.status = "222";
                    val.result = "Cannot Deleted";
                }

            }
            catch (Exception e)
            {
                val.status = "666";
                val.result = "Exception : " + e.Message;

            }

            Context.Response.Write(js.Serialize(val));


        }

        //------------ANN ANTONY ------------------crf 125962 ----phase2 crf for implementation of brd ba verifiation in ess app-----------END//

        //----vismaya PS------125874-----CRF for Additional Verification in Limit enhancement Approved Cases-----start---//

        public class limit
        {
            public string id { get; set; }
            public string name { get; set; }

        }
        public class custlist : ResultModel
        {
            public List<limit> dtls_list { get; set; }


        }

        [WebMethod]
        public void getAprroveListForHOBA(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            custlist dtls_list = new custlist();
            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('¥');

            List<limit> dlt = new List<limit>();

            try
            {

                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_LIMIT_ENAHANCE_HO_VERIFY("", "getAprroveListForHOBA", "", "");
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            dlt.Add(new limit()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),

                            });
                        }

                        dtls_list.dtls_list = dlt;
                        dtls_list.status = "111";
                        dtls_list.result = "Success";
                    }
                    else
                    {
                        dtls_list.status = "222";
                        dtls_list.result = "No Data found";
                    }
                }
                else
                {
                    dtls_list.status = "333";
                    dtls_list.result = "Session is expired";
                }
            }




            catch (Exception ex)
            {
                dtls_list.status = "666";
                dtls_list.result = "Something went wrong";
            }
            if (dtls_list.status == "111")
            {
                Context.Response.Write(js.Serialize(dtls_list));
            }
            else
            {
                Context.Response.Write(js.Serialize(dtls_list));
            }
        }

        public class complaint
        {
            public string cust_name { get; set; }
            public string exist_limit { get; set; }
            public string outstanding { get; set; }
            public string reqlimit { get; set; }
            public string emp_name { get; set; }
            public string requested_on { get; set; }
            public string v_recomenders { get; set; }
            public string COALESCE { get; set; }
            public string approved_by { get; set; }
            public string approved_on { get; set; }
            public string result { get; set; }
            public string status { get; set; }



        }

        [WebMethod]
        public void getDetailedComplaint(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            complaint cmp = new complaint();
            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('¥');

            try
            {


                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_LIMIT_ENAHANCE_HO_VERIFY("", "getDetailedComplaint", dataArray[1], "");

                    if (dt.Rows.Count > 0)
                    {

                        cmp.cust_name = dt.Rows[0][0].ToString();
                        cmp.exist_limit = dt.Rows[0][1].ToString();
                        cmp.outstanding = dt.Rows[0][2].ToString();
                        cmp.reqlimit = dt.Rows[0][3].ToString();
                        cmp.emp_name = dt.Rows[0][4].ToString();
                        cmp.requested_on = dt.Rows[0][5].ToString();
                        cmp.v_recomenders = dt.Rows[0][6].ToString();
                        cmp.COALESCE = dt.Rows[0][7].ToString();
                        cmp.approved_by = dt.Rows[0][8].ToString();
                        cmp.approved_on = dt.Rows[0][9].ToString();



                        cmp.status = "111";
                        cmp.result = "Success";
                    }
                    else
                    {
                        cmp.status = "222";
                        cmp.result = "No Data found";
                    }
                }
                else
                {
                    cmp.status = "333";
                    cmp.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                cmp.status = "666";
                cmp.result = "Something went wrong";
            }

            Context.Response.Write(js.Serialize(cmp));


        }
        public class GetDltImage
        {
            public string extn { get; set; }
            public string image { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }
        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void getDetailsImages(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            GetDltImage resultImage = new GetDltImage();
            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');


            string DocFileQuest;
            string DocFileQuest1;
            string DocFilphoto = "";
            string extn;



            try
            {
                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_mobapp_ngl(286, dataArray[1] + "~" + dataArray[2]);
                    string image1 = dt.Rows[0][0].ToString();

                    if (dt.Rows.Count > 0 && !string.IsNullOrEmpty(image1))
                    {
                        string image = dt.Rows[0][0].ToString();

                        byte[] s;
                        s = (byte[])dt.Rows[0][0];
                        extn = GetFileExtensionFromBytes(s);

                        DocFileQuest = dt.Rows[0][1].ToString() + "_" + dataArray[1] + extn;

                        if (DownloadFile1(DocFileQuest, s))
                        {
                            resultImage.status = "111";
                            resultImage.result = "Success";
                            resultImage.image = DocFileQuest;
                            resultImage.extn = GetFileExtensionFromBytes(s);


                        }


                        else
                        {
                            resultImage.status = "222";
                            resultImage.result = "Failed";
                        }


                    }
                    else
                    {
                        resultImage.status = "333";
                        resultImage.result = "No Image found!";

                    }
                }
            }
            catch (Exception e)
            {
                resultImage.status = "666";
                resultImage.result = "Exception : " + e.Message;
            }

            if (resultImage.status == "111")
            {
                Context.Response.Write(js.Serialize(resultImage));
            }
            else
            {
                Context.Response.Write(js.Serialize(resultImage));
            }
        }
        public class verifylimit
        {
            public string appr_id { get; set; }
            public string tra_dt { get; set; }
            public string cust_id { get; set; }
            public string KYC_ST { get; set; }
            public string PAN_ST { get; set; }
            public string CHEQ_ST { get; set; }
            public string ANX1_ST { get; set; }
            public string ANX2_ST { get; set; }
            public string ANX3_ST { get; set; }
            public string BRAN_REQ_ST { get; set; }
            public string TAX1_ST { get; set; }
            public string TAX2_ST { get; set; }
            public string TAX3_ST { get; set; }

        }
        public class verify : ResultModel
        {
            public List<verifylimit> datas { get; set; }


        }
        [WebMethod]
        public void getLimitVerifyReports(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            verify vlimit = new verify();
            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('¥');
            string[] input1 = decryptedIData.Split('~');
            string[] input2 = decryptedIData.Split('~');


            List<verifylimit> limitts = new List<verifylimit>();


            try
            {


                string sessionId = dataArray[0];


                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_LIMIT_ENAHANCE_HO_VERIFY("", "getLimitVerifyReports", "", "");

                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            limitts.Add(new verifylimit()
                            {

                                appr_id = dr[0].ToString(),
                                tra_dt = dr[1].ToString(),
                                cust_id = dr[2].ToString(),
                                KYC_ST = dr[3].ToString(),
                                PAN_ST = dr[4].ToString(),
                                CHEQ_ST = dr[5].ToString(),
                                ANX1_ST = dr[6].ToString(),
                                ANX2_ST = dr[7].ToString(),
                                ANX3_ST = dr[8].ToString(),
                                BRAN_REQ_ST = dr[9].ToString(),
                                TAX1_ST = dr[10].ToString(),
                                TAX2_ST = dr[11].ToString(),
                                TAX3_ST = dr[12].ToString(),

                            });
                            vlimit.datas = limitts;
                            vlimit.status = "111";
                            vlimit.result = "Success";
                        }


                    }
                    else
                    {
                        vlimit.status = "222";
                        vlimit.result = "No Data found";
                    }
                }
                else
                {
                    vlimit.status = "333";
                    vlimit.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                vlimit.status = "666";
                vlimit.result = "Something went wrong";
            }

            Context.Response.Write(js.Serialize(vlimit));


        }
        [WebMethod]
        public void updateBAHOResponse(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            ResultModel resultModel = new ResultModel();
            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('¥');
            string input1 = dataArray[1];
            string input2 = dataArray[2];

            try
            {
                string sessionId = dataArray[0];
                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.PROC_LIMIT_ENAHANCE_HO_VERIFY("", "updateBAHOResponse", input1, input2);


                    if (dt.Rows[0][0].ToString() == "200")
                    {


                        resultModel.status = "111";
                        resultModel.result = "Confirmed Successfully";

                    }
                    else
                    {

                        resultModel.status = "222";
                        resultModel.result = "Already Confirmed";
                    }
                }
                else
                {

                    resultModel.status = "666";
                    resultModel.result = "Session expired";
                }

            }
            catch (Exception e)
            {
                resultModel.status = "666";
                resultModel.result = "Exception : " + e.Message;

            }

            if (resultModel.status == "111")
            {
                Context.Response.Write(js.Serialize(resultModel));
            }

            else
            {
                Context.Response.Write(js.Serialize(resultModel));
            }


        }

        //----vismaya PS------125874-----CRF for Additional Verification in Limit enhancement Approved Cases-----end---//

        //----Aswathy Babu------125870-----CRF for CRM Complaints-----start---//

        public class Compliants_dtls
        {

            public List<Cust_Cmp_dtls> cmp_dtls_list { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        public class Cust_Cmp_dtls
        {
            public string id { get; set; }
            public string name { get; set; }

        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void getCrmComplaints_Drps(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];
            string flag = dataArray[1];
            float converted = float.Parse(flag);

            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                Compliants_dtls data2 = new Compliants_dtls();
                List<Cust_Cmp_dtls> get_report = new List<Cust_Cmp_dtls>();

                try
                {
                    dt = lb.proc_mobapp_crm_complaints(converted, dataArray[2]);

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dt.Rows)
                        {
                            get_report.Add(new Cust_Cmp_dtls()
                            {
                                id = dr[0].ToString(),
                                name = dr[1].ToString(),
                            });
                        }

                        data2.cmp_dtls_list = get_report;
                        data2.status = "111";
                        data2.result = "Success";

                    }
                    else
                    {
                        data2.status = "222";
                        data2.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    data2.status = "666";
                    data2.result = "Exception : " + e.Message;

                }

                if (data2.status == "111")
                {
                    Context.Response.Write(js.Serialize(data2));
                }
                else
                {
                    Context.Response.Write(js.Serialize(data2));
                }

            }


            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }

        [WebMethod]
        public void viewCRMCmp_document(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel_doc1 resultModel = new ResultModel_doc1();

            byte[] dataFile = new byte[0];
            string data1 = Decryptrel(data);
            string[] dataArray = data1.Split('$');


            string inputstring = dataArray[1];


            if (isSessionValid(dataArray[0]) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();
                string DocFileName;
                string extension;

                try
                {
                    dt = lb.proc_mobapp_crm_complaints(17, inputstring);
                    if (dt.Rows.Count != 0)
                    {

                        string image1 = dt.Rows[0][0].ToString();
                        if ((dt.Rows.Count > 0) && (dt.Rows[0][0].ToString() != "222") && !string.IsNullOrEmpty(image1))
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                byte[] s;
                                s = (byte[])dt.Rows[0][0];
                                dataFile = (byte[])dt.Rows[0][0];
                                extension = GetFileExtensionFromBytes(dataFile);

                                if (extension == ".tif" || extension == ".unknown")
                                {
                                    dataFile = ConvertToJpg(dataFile);
                                    extension = GetFileExtensionFromBytes(dataFile);
                                }


                                if (extension == ".Jpeg")
                                {
                                    dataFile = justfuncJpegBytes(s);
                                    extension = GetFileExtensionFromBytes(dataFile);
                                }

                                if (extension == ".pdf")
                                {
                                    dataFile = (byte[])dt.Rows[0][0];
                                    extension = GetFileExtensionFromBytes(dataFile);
                                }


                                DocFileName = inputstring + extension;
                                if (DownloadFile2(DocFileName, dataFile))
                                {
                                    resultModel.status = "111";
                                    resultModel.result = "Success";
                                    resultModel.image = DocFileName;
                                    resultModel.extension = extension;

                                }
                                else
                                {
                                    resultModel.status = "222";
                                    resultModel.result = "Failed";
                                }
                            }
                        }
                        else
                        {
                            resultModel.status = "333";
                            resultModel.result = "No Image found!";

                        }

                    }

                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;
                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    resultModel.status = "222";
                    resultModel.result = "No Image Found";
                    Context.Response.Write(js.Serialize(resultModel));

                }
            }
            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));

            }
        }

        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void approveOrRejectDocument(string flag, string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];


            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();

                try
                {
                    if (flag == "1") // document approval
                    {

                        dt = lb.proc_mobapp_crm_complaints(18, dataArray[1]);

                        if (dt.Rows.Count > 0)
                        {
                            resultModel.status = "111";
                            resultModel.result = "Success";
                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "No Data Found";
                        }
                    }
                    else if (flag == "2") // document reject
                    {
                        dt = lb.proc_mobapp_crm_complaints(19, dataArray[1]);

                        if (dt.Rows.Count > 0)
                        {
                            resultModel.status = "111";
                            resultModel.result = "Success";
                        }
                        else
                        {
                            resultModel.status = "222";
                            resultModel.result = "No Data Found";
                        }
                    }
                    else
                    {
                        resultModel.status = "222";
                        resultModel.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (resultModel.status == "111")
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        public class CmpBranch_dtls
        {
            public string branch_id { get; set; }
            public string BRANCH_NAME { get; set; }
            public string reg_name { get; set; }
            public string area_name { get; set; }
            public string ZONAL_NAME { get; set; }
            public string state_name { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }


        [WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public void getCmpBranchDtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            ResultModel resultModel = new ResultModel();
            CmpBranch_dtls dtls = new CmpBranch_dtls();

            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('$');
            string sessionId = dataArray[0];


            if (isSessionValid(sessionId) == "1")
            {
                DataSet dS = new DataSet();
                DataTable dt = new DataTable();

                try
                {

                    dt = lb.proc_mobapp_crm_complaints(20, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {
                        dtls.branch_id = dt.Rows[0][0].ToString();
                        dtls.BRANCH_NAME = dt.Rows[0][1].ToString();
                        dtls.reg_name = dt.Rows[0][2].ToString();
                        dtls.area_name = dt.Rows[0][3].ToString();
                        dtls.ZONAL_NAME = dt.Rows[0][4].ToString();
                        dtls.state_name = dt.Rows[0][5].ToString();
                        dtls.status = "111";
                        dtls.result = "Success";

                    }
                    else
                    {
                        resultModel.status = "222";
                        resultModel.result = "No Data Found";
                    }
                }
                catch (Exception e)
                {
                    resultModel.status = "666";
                    resultModel.result = "Exception : " + e.Message;

                }

                if (dtls.status == "111")
                {
                    Context.Response.Write(js.Serialize(dtls));
                }
                else
                {
                    Context.Response.Write(js.Serialize(resultModel));
                }

            }

            else
            {
                resultModel.result = "Session Expired";
                resultModel.status = "333";
                Context.Response.Write(js.Serialize(resultModel));
            }
        }


        public class complaintsmain
        {
            public string cust_name { get; set; }
            public string exis_houe_nme { get; set; }
            public string exis_pstofc { get; set; }
            public string exis_cust_mob { get; set; }
            public string phone1 { get; set; }
            public string state_name { get; set; }
            public string reg_name { get; set; }
            public string area_name { get; set; }
            public string pin_code { get; set; }
            public string exist_cust_email_id { get; set; }
            public string CALL_TYPE { get; set; }
            public string dispositionname { get; set; }
            public string subdispositionname { get; set; }
            public string phonnatureofcomplainte1 { get; set; }
            public string product { get; set; }
            public string source { get; set; }
            public string abit_mafil { get; set; }
            public string priority { get; set; }
            public string language { get; set; }
            public string to_date { get; set; }
            public string details_of_complaint { get; set; }
            public string branch_name { get; set; }
            public string registration_date { get; set; }
            public string existng_cust_no { get; set; }
            public string cust_call_frm { get; set; }
            public string ticket_st { get; set; }
            public string action_type { get; set; }
            public string ticket_remarks { get; set; }
            public string name { get; set; }
            public string EMPLOYMENT_PROFILE { get; set; }
            public string ZONAL_NAME { get; set; }
            public string BRANCH_ID { get; set; }
            public string bh_remark { get; set; }
            public string ah_remark { get; set; }
            public string rm_remark { get; set; }
            public string fzm_remark { get; set; }
            public string dpt_remark { get; set; }
            public string BRANCH_NAME { get; set; }
            public string dep_name { get; set; }
            public string status { get; set; }
            public string result { get; set; }

        }

        [WebMethod]
        public void getCrmcomplaintsDtls(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();
            string decryptedIData = Decryptrel(data);
            string[] dataArray = decryptedIData.Split('~');
            ResultModel resultmodel = new ResultModel();

            complaintsmain comp = new complaintsmain();

            try
            {
                string sessionId = dataArray[0];
                string input = dataArray[1];

                if (isSessionValid(sessionId) == "1")
                {
                    dt = lb.proc_mobapp_crm_complaints(2, input);

                    if (dt.Rows.Count > 0)
                    {

                        comp.cust_name = dt.Rows[0][0].ToString();
                        comp.exis_houe_nme = dt.Rows[0][1].ToString();
                        comp.exis_pstofc = dt.Rows[0][2].ToString();
                        comp.exis_cust_mob = dt.Rows[0][3].ToString();
                        comp.phone1 = dt.Rows[0][4].ToString();
                        comp.state_name = dt.Rows[0][5].ToString();
                        comp.reg_name = dt.Rows[0][6].ToString();
                        comp.area_name = dt.Rows[0][7].ToString();
                        comp.pin_code = dt.Rows[0][8].ToString();
                        comp.exist_cust_email_id = dt.Rows[0][9].ToString();
                        comp.CALL_TYPE = dt.Rows[0][10].ToString();
                        comp.dispositionname = dt.Rows[0][11].ToString();
                        comp.subdispositionname = dt.Rows[0][12].ToString();
                        comp.phonnatureofcomplainte1 = dt.Rows[0][13].ToString();
                        comp.product = dt.Rows[0][14].ToString();  //natureofcmp
                        comp.source = dt.Rows[0][15].ToString();
                        comp.abit_mafil = dt.Rows[0][16].ToString();
                        comp.priority = dt.Rows[0][17].ToString();
                        comp.language = dt.Rows[0][18].ToString();
                        comp.to_date = dt.Rows[0][19].ToString();
                        comp.details_of_complaint = dt.Rows[0][20].ToString();
                        comp.branch_name = dt.Rows[0][21].ToString();
                        comp.registration_date = dt.Rows[0][22].ToString();
                        comp.existng_cust_no = dt.Rows[0][23].ToString(); //call frm
                        comp.cust_call_frm = dt.Rows[0][24].ToString();
                        comp.ticket_st = dt.Rows[0][25].ToString();
                        comp.action_type = dt.Rows[0][26].ToString();
                        comp.ticket_remarks = dt.Rows[0][27].ToString();
                        comp.name = dt.Rows[0][28].ToString();
                        comp.EMPLOYMENT_PROFILE = dt.Rows[0][29].ToString();
                        comp.ZONAL_NAME = dt.Rows[0][30].ToString();
                        comp.BRANCH_ID = dt.Rows[0][31].ToString();
                        comp.bh_remark = dt.Rows[0][32].ToString();
                        comp.ah_remark = dt.Rows[0][33].ToString();
                        comp.rm_remark = dt.Rows[0][34].ToString();
                        comp.fzm_remark = dt.Rows[0][35].ToString();
                        comp.dpt_remark = dt.Rows[0][36].ToString();
                        comp.BRANCH_NAME = dt.Rows[0][37].ToString();
                        comp.dep_name = dt.Rows[0][38].ToString();
                        comp.status = "111";
                        comp.result = "Success";



                    }
                    else
                    {
                        resultmodel.status = "222";
                        resultmodel.result = "No Data found";
                    }
                }
                else
                {
                    resultmodel.status = "333";
                    resultmodel.result = "Session is expired";
                }
            }
            catch (Exception ex)
            {
                resultmodel.status = "666";
                resultmodel.result = "Something went wrong";
            }
            if (comp.status == "111")
            {
                Context.Response.Write(js.Serialize(comp));
            }
            else
            {
                Context.Response.Write(js.Serialize(resultmodel));

            }



        }


        [WebMethod]
        public void crmConfirmation(string data)
        {
            Context.Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
            Context.Response.Cache.SetNoStore();
            Context.Response.Clear();
            Context.Response.ContentType = "application/json";
            DataTable dt = new DataTable();
            DataSet dS = new DataSet();

            ResultModel resultmodel = new ResultModel();

            try
            {
                string decryptedIData = Decryptrel(data);
                string[] dataArray = decryptedIData.Split('$');

                if (isSessionValidess(dataArray[0]) == "1")
                {
                    dt = lb.proc_mobapp_crm_complaints(21, dataArray[1]);

                    if (dt.Rows.Count > 0)
                    {
                        resultmodel.status = "111";
                        resultmodel.result = "COMPLAINT CREATED";
                    }
                    else
                    {
                        resultmodel.status = "222";
                        resultmodel.result = "NO DATA FOUND";
                    }
                }
                else
                {
                    resultmodel.status = "333";
                    resultmodel.result = "Session Expired";
                }
            }
            catch (Exception ex)
            {
                resultmodel.status = "666";
                resultmodel.result = "Something went wrong";
            }


            Context.Response.Write(js.Serialize(resultmodel));

        }


        //----Aswathy Babu------125870-----CRF for CRM Complaints-----end---//





    }
}



